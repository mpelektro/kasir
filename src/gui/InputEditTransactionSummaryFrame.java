/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import iuran.*;
import java.sql.SQLException;
import java.util.*;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import kasir.Clerk;
import kasir.Control;
import org.openide.util.Exceptions;
import pelajar.Profil;
import sak.Kalender;
import sak.KasirException;


/**
 *
 * @author Master
 */
public class InputEditTransactionSummaryFrame extends javax.swing.JFrame {
    private ArrayList<IuranTransaction> transactionList;
    private TableModel allTransactionTableModel;
    private float totalAmount;
    private TransactionSummary transactionSummary;
    private Long tSumID;
    private Clerk clerk;
    private Profil profil;
    private AppFrame appFrame;
    private float updatedTotalAmount;
    private Kalender lastUpdateDate;
    private List<IPPTransactionDetail> ippTDetails;
    /**
     * Creates new form InputEditTransactionSummaryFrame
     */
    public InputEditTransactionSummaryFrame() {
        initComponents();
    }
    
    public InputEditTransactionSummaryFrame(AppFrame af, Long id, Clerk c) {
        appFrame = af;
        tSumID = id;
        clerk = c;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        allTransactionTable = new javax.swing.JTable();
        jTextFieldTransactionSummaryNote = new javax.swing.JTextField();
        jLabelClerkName = new javax.swing.JLabel();
        jFormattedTextFieldTotalTSum = new javax.swing.JFormattedTextField();
        jButtonSubmit = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        try{
            prepareTransactions(tSumID);
        }catch(SQLException ex){
            ex.printStackTrace();
        }catch(KasirException ex){
            ex.printStackTrace();
        }

        allTransactionTable.setModel(allTransactionTableModel);
        allTransactionTable.removeColumn(allTransactionTable.getColumnModel().getColumn(3));
        allTransactionTable.setRowSelectionAllowed(false);
        allTransactionTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        allTransactionTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                allTransactionTableMouseReleased(evt);
            }
        });
        allTransactionTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                allTransactionTablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(allTransactionTable);

        jTextFieldTransactionSummaryNote.setText(transactionSummary.note);
        jTextFieldTransactionSummaryNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldTransactionSummaryNoteActionPerformed(evt);
            }
        });

        jLabelClerkName.setText(clerk.nama);
        jLabelClerkName.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        jFormattedTextFieldTotalTSum.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("Rp #,##0"))));

        jButtonSubmit.setBackground(new java.awt.Color(0, 51, 255));
        jButtonSubmit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtonSubmit.setText(org.openide.util.NbBundle.getMessage(InputEditTransactionSummaryFrame.class, "InputEditTransactionSummaryFrame.jButtonSubmit.text")); // NOI18N
        jButtonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSubmitActionPerformed(evt);
            }
        });

        jButtonCancel.setBackground(new java.awt.Color(255, 0, 51));
        jButtonCancel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButtonCancel.setText(org.openide.util.NbBundle.getMessage(InputEditTransactionSummaryFrame.class, "InputEditTransactionSummaryFrame.jButtonCancel.text")); // NOI18N
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabelClerkName, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jFormattedTextFieldTotalTSum))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jButtonCancel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldTransactionSummaryNote, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextFieldTransactionSummaryNote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelClerkName)
                    .addComponent(jFormattedTextFieldTotalTSum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSubmit)
                    .addComponent(jButtonCancel)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldTransactionSummaryNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldTransactionSummaryNoteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldTransactionSummaryNoteActionPerformed

    private void allTransactionTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_allTransactionTableMouseReleased
        // TODO add your handling code here:
    //    System.out.println(allTransactionTableModel.getValueAt(allTransactionTable.getSelectedRow(), 3));
    //    System.out.println(allTransactionTableModel.getValueAt(allTransactionTable.getSelectedRow(), 0));
    //    appFrame.syncIuranDebt(Iuran.Tipe.IPP, tSumID);
        calculateTempValue();
        
    }//GEN-LAST:event_allTransactionTableMouseReleased

    private void allTransactionTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_allTransactionTablePropertyChange
        // TODO add your handling code here:
       // System.out.println(allTransactionTableModel.getValueAt(allTransactionTable.getSelectedRow(),3));
        calculateTempValue();
    }//GEN-LAST:event_allTransactionTablePropertyChange

    private void jButtonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSubmitActionPerformed
        try {
            // TODO add your handling code here:
            int n =JOptionPane.showConfirmDialog(rootPane, "Update Trasaksi");
            if(n == JOptionPane.OK_OPTION)
                updateT();
            this.setVisible(false);
                
            
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_jButtonSubmitActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InputEditTransactionSummaryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InputEditTransactionSummaryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InputEditTransactionSummaryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InputEditTransactionSummaryFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new InputEditTransactionSummaryFrame().setVisible(true);
            }
        });
    }
    
    private void prepareTransactions(Long TSumID) throws SQLException, KasirException{
        transactionList = new ArrayList<IuranTransaction>();
        TransactionSummary transactionSummary = Control.selectTSummary(TSumID);
        jTextFieldTransactionSummaryNote.setText(transactionSummary.note);
        profil = Control.selectProfil(transactionSummary.noInduk);
        lastUpdateDate = new Kalender();
        //IDD Part
        List<IDDTransactionDetail> iddTDetails;
        try {
            iddTDetails = Control.selectTDetails(TransactionDetail.Tipe.IDDTransaction, IDDTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < iddTDetails.size(); i++){
                transactionList.add(new IuranTransaction(iddTDetails.get(i).id, iddTDetails.get(i).idIuran, iddTDetails.get(i).amount, iddTDetails.get(i).note, Iuran.Tipe.IDD));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }

        //IPSP Part
        List<IPSPTransactionDetail> ipspTDetails;
        try {
            ipspTDetails = Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPSPTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < ipspTDetails.size(); i++){
                transactionList.add(new IuranTransaction(ipspTDetails.get(i).id, ipspTDetails.get(i).idIuran, ipspTDetails.get(i).amount, ipspTDetails.get(i).note, Iuran.Tipe.IPSP));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }

        //IPSB Part
        List<IPSBTransactionDetail> ipsbTDetails;
        try {
            ipsbTDetails = Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPSBTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < ipsbTDetails.size(); i++){
                transactionList.add(new IuranTransaction(ipsbTDetails.get(i).id, ipsbTDetails.get(i).idIuran, ipsbTDetails.get(i).amount, ipsbTDetails.get(i).note, Iuran.Tipe.IPSB));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }

        //IUA Part and IUAP Part
        if(profil.currentLevel.level1.toString().equals("SMP") || profil.currentLevel.level1.toString().equals("SMK")){
            List<IUATransactionDetail> iuaTDetails;
            try {
                iuaTDetails = Control.selectTDetails(TransactionDetail.Tipe.IUATransaction, IUATransactionDetail.idTSummaryColName, false, TSumID.toString());
                for(int i = 0 ; i < iuaTDetails.size(); i++){
                    transactionList.add(new IuranTransaction(iuaTDetails.get(i).id, iuaTDetails.get(i).idIuran, iuaTDetails.get(i).amount, iuaTDetails.get(i).note, Iuran.Tipe.IUA));
                }
            } catch (SQLException ex) {
                Exceptions.printStackTrace(ex);
            } catch (KasirException ex) {
                Exceptions.printStackTrace(ex);
            }
        }else if(profil.currentLevel.level1.toString().equals("SMA")){
            List<IUAPTransactionDetail> iuapTDetails;
            try {
                iuapTDetails = Control.selectTDetails(TransactionDetail.Tipe.IUAPTransaction, IUAPTransactionDetail.idTSummaryColName, false, TSumID.toString());
                for(int i = 0 ; i < iuapTDetails.size(); i++){
                    transactionList.add(new IuranTransaction(iuapTDetails.get(i).id, iuapTDetails.get(i).idIuran, iuapTDetails.get(i).amount, iuapTDetails.get(i).note, Iuran.Tipe.IUAP));
                }
            } catch (SQLException ex) {
                Exceptions.printStackTrace(ex);
            } catch (KasirException ex) {
                Exceptions.printStackTrace(ex);
            }
        }
        //Seragam PART
        List<SeragamTransactionDetail> seragamTDetails;
        try {
            seragamTDetails = Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, SeragamTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < seragamTDetails.size(); i++){
                transactionList.add(new IuranTransaction(seragamTDetails.get(i).id, seragamTDetails.get(i).idIuran, seragamTDetails.get(i).amount, seragamTDetails.get(i).note, Iuran.Tipe.Seragam));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }
        
        //Attribute PART
        List<AttributeTransactionDetail> attributeTDetails;
        try {
            attributeTDetails = Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, AttributeTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < attributeTDetails.size(); i++){
                transactionList.add(new IuranTransaction(attributeTDetails.get(i).id, attributeTDetails.get(i).idIuran, attributeTDetails.get(i).amount, attributeTDetails.get(i).note, Iuran.Tipe.Attribute));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }

        //Buku PART
        List<BukuTransactionDetail> bukuTDetails;
        try {
            bukuTDetails = Control.selectTDetails(TransactionDetail.Tipe.BukuTransaction, BukuTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < bukuTDetails.size(); i++){
                transactionList.add(new IuranTransaction(bukuTDetails.get(i).id, bukuTDetails.get(i).idIuran, bukuTDetails.get(i).amount, bukuTDetails.get(i).note, Iuran.Tipe.Buku));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }

        //ILL PART
        List<ILLTransactionDetail> illTDetails;
        try {
            illTDetails = Control.selectTDetails(TransactionDetail.Tipe.ILLTransaction, ILLTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < illTDetails.size(); i++){
                transactionList.add(new IuranTransaction(illTDetails.get(i).id, illTDetails.get(i).idIuran, illTDetails.get(i).amount, illTDetails.get(i).note, Iuran.Tipe.ILL));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }

        //Tabungan PART
        List<TabunganTransactionDetail> tabunganTDetails;
        try {
            tabunganTDetails = Control.selectTDetails(TransactionDetail.Tipe.TabunganTransaction, TabunganTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < tabunganTDetails.size(); i++){
                transactionList.add(new IuranTransaction(tabunganTDetails.get(i).id, tabunganTDetails.get(i).idIuran, tabunganTDetails.get(i).amount, tabunganTDetails.get(i).note, Iuran.Tipe.Tabungan));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }

        //Sumbangan PART
        List<SumbanganTransactionDetail> sumbanganTDetails;
        try {
            sumbanganTDetails = Control.selectTDetails(TransactionDetail.Tipe.SumbanganTransaction, SumbanganTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < sumbanganTDetails.size(); i++){
                transactionList.add(new IuranTransaction(sumbanganTDetails.get(i).id, sumbanganTDetails.get(i).idIuran, sumbanganTDetails.get(i).amount, sumbanganTDetails.get(i).note, Iuran.Tipe.Sumbangan));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }

        //IPP PART
       
        try {
            ippTDetails = Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < ippTDetails.size(); i++){
                transactionList.add(new IuranTransaction(ippTDetails.get(i).id, ippTDetails.get(i).idIuran, ippTDetails.get(i).amount, ippTDetails.get(i).note, Iuran.Tipe.IPP));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }
        
        //IUS PART
        List<IUSTransactionDetail> iusTDetails;
        try {
            iusTDetails = Control.selectTDetails(TransactionDetail.Tipe.IUSTransaction, IUSTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < iusTDetails.size(); i++){
                transactionList.add(new IuranTransaction(iusTDetails.get(i).id, iusTDetails.get(i).idIuran, iusTDetails.get(i).amount, iusTDetails.get(i).note, Iuran.Tipe.IUS));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }
   
        //IKS PART
        List<IKSTransactionDetail> iksTDetails;
        try {
            iksTDetails = Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IKSTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < iksTDetails.size(); i++){
                transactionList.add(new IuranTransaction(iksTDetails.get(i).id, iksTDetails.get(i).idIuran, iksTDetails.get(i).amount, iksTDetails.get(i).note, Iuran.Tipe.IKS));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }
        
        //PVT PART
        List<PVTTransactionDetail> pvtTDetails;
        try {
            pvtTDetails = Control.selectTDetails(TransactionDetail.Tipe.PVTTransaction, PVTTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < pvtTDetails.size(); i++){
                transactionList.add(new IuranTransaction(pvtTDetails.get(i).id, pvtTDetails.get(i).idIuran, pvtTDetails.get(i).amount, pvtTDetails.get(i).note, Iuran.Tipe.PVT));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }

        //OSIS PART
        List<OSISTransactionDetail> osisTDetails;
        try {
            osisTDetails = Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, OSISTransactionDetail.idTSummaryColName, false, TSumID.toString());
            for(int i = 0 ; i < osisTDetails.size(); i++){
                transactionList.add(new IuranTransaction(osisTDetails.get(i).id, osisTDetails.get(i).idIuran, osisTDetails.get(i).amount, osisTDetails.get(i).note, Iuran.Tipe.OSIS));
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }
        
        allTransactionTableModel = buildAllTransactionTableModel(transactionList);
        allTransactionTable.setModel(allTransactionTableModel);
//TRANSACTION SUMMARY PART        
        transactionSummary.totalAmount = totalAmount;
        transactionSummary.note = jTextFieldTransactionSummaryNote.getText();
        transactionSummary.createDate = new Kalender(System.currentTimeMillis());
        this.transactionSummary = transactionSummary;
//        jTextFieldTransactionSummaryNote1.setText(jTextFieldTransactionSummaryNote.getText());
//        jTextFieldTSumTotalAmount.setText(String.valueOf(totalAmount));
    }
    
    private TableModel buildAllTransactionTableModel(ArrayList<IuranTransaction> at) throws SQLException, KasirException {
       String columnNames[] = {"Tipe Iuran", "Jumlah", "Catatan", "TransactionDetailID"};
       JFormattedTextField amountFTF = new JFormattedTextField(0.0);
       amountFTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("Rp #,##0"))));
       Object[][] data = new Object[at.size()][4];
         
        for(int i = 0 ; i < at.size(); i++){
            data[i][0]= at.get(i).tipeIuran;
            amountFTF.setValue(at.get(i).amount);
            data[i][1]= at.get(i).amount; 
            data[i][2]= at.get(i).note;
            data[i][3]= at.get(i).tDetailID;
        }
       TableModel tm = new DefaultTableModel(data, columnNames){
           @Override
            public boolean isCellEditable(int row, int column) {
                if(column == 0 || column == 2 || column ==3){
                    return false;
                }else if(column == 1){
                    return true;
                }
                return false;
            }
       };
       
       return tm;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable allTransactionTable;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonSubmit;
    private javax.swing.JFormattedTextField jFormattedTextFieldTotalTSum;
    private javax.swing.JLabel jLabelClerkName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldTransactionSummaryNote;
    // End of variables declaration//GEN-END:variables

    private void calculateTempValue() {
        float temp = 0.0f;
        for(int i=0; i<allTransactionTable.getRowCount();i++){
            temp+=Float.valueOf(String.valueOf(allTransactionTable.getValueAt(i, 1)));
        }
        jFormattedTextFieldTotalTSum.setValue(temp);
        updatedTotalAmount = temp;
    }

    private boolean updateT() throws SQLException, KasirException {
        for(int i=0; i<transactionList.size(); i++){
            IuranTransaction temp = transactionList.get(i);
            temp.amount = Float.valueOf(String.valueOf(allTransactionTable.getValueAt(i,1)));
            updateTDetailAndIuran(temp);
        }
        return updateTSum(transactionSummary);
    }

    private boolean updateTDetailAndIuran(IuranTransaction it) throws SQLException, KasirException {
        
        switch(it.tipeIuran.toString().toLowerCase()){
            case "ipp":
                IPPTransactionDetail ippTransactionUpdated = Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, it.tDetailID);
                if(!ippTransactionUpdated.settled){
                    float amountOri = ippTransactionUpdated.amount;
                    ippTransactionUpdated.amount = it.amount;
                    ippTransactionUpdated.lastUpdateDate = lastUpdateDate;
                    ippTransactionUpdated.idClerk = clerk.id;
                    IPP ippIuran = Control.selectIuran(Iuran.Tipe.IPP, it.iuranID);
                    for(int i = 0; i<12 ; i++){
                        if(ippIuran.entries.get(i).transactDetailIDs.contains(ippTransactionUpdated.id)){
                            ippIuran.entries.get(i).debt = amountOri - it.amount + ippIuran.entries.get(i).debt;
                        }
                    }
                    if(ippIuran.update(Iuran.Tipe.IPP)){
                        if(Control.updateTDetail(TransactionDetail.Tipe.IPPTransaction, ippTransactionUpdated))
                            return true;
                    }
                }else{
                    return false;
                }
            break;
            case "ipsp":
                IPSPTransactionDetail ipspTransactionUpdated = Control.selectTDetail(TransactionDetail.Tipe.IPSPTransaction, it.tDetailID);
                if(!ipspTransactionUpdated.settled){
                    float amountOri = ipspTransactionUpdated.amount;
                    ipspTransactionUpdated.amount = it.amount;
                    ipspTransactionUpdated.lastUpdateDate = lastUpdateDate;
                    ipspTransactionUpdated.idClerk = clerk.id;
                    IPSP ipspIuran = Control.selectIuran(Iuran.Tipe.IPSP, it.iuranID);
                    ipspIuran.debt = amountOri - it.amount + ipspIuran.debt;
                    if(ipspIuran.update(Iuran.Tipe.IPSP)){
                        if(Control.updateTDetail(TransactionDetail.Tipe.IPSPTransaction, ipspTransactionUpdated))
                            return true;
                    }
                }else{
                    return false;
                }
            break;
            case "ipsb":
                IPSBTransactionDetail ipsbTransactionUpdated = Control.selectTDetail(TransactionDetail.Tipe.IPSBTransaction, it.tDetailID);
                if(!ipsbTransactionUpdated.settled){
                    float amountOri = ipsbTransactionUpdated.amount;
                    ipsbTransactionUpdated.amount = it.amount;
                    ipsbTransactionUpdated.lastUpdateDate = lastUpdateDate;
                    ipsbTransactionUpdated.idClerk = clerk.id;
                    IPSB ipsbIuran = Control.selectIuran(Iuran.Tipe.IPSB, it.iuranID);
                    ipsbIuran.debt = amountOri - it.amount + ipsbIuran.debt;
                    if(ipsbIuran.update(Iuran.Tipe.IPSB)){
                        if(Control.updateTDetail(TransactionDetail.Tipe.IPSBTransaction, ipsbTransactionUpdated))
                            return true;
                    }
                }else{
                    return false;
                }
            break;
            case "iua":
                IUATransactionDetail iuaTransactionUpdated = Control.selectTDetail(TransactionDetail.Tipe.IUATransaction, it.tDetailID);
                if(!iuaTransactionUpdated.settled){
                    float amountOri = iuaTransactionUpdated.amount;
                    iuaTransactionUpdated.amount = it.amount;
                    iuaTransactionUpdated.lastUpdateDate = lastUpdateDate;
                    iuaTransactionUpdated.idClerk = clerk.id;
                    IUA iuaIuran = Control.selectIuran(Iuran.Tipe.IUA, it.iuranID);
                    iuaIuran.debt = amountOri - it.amount + iuaIuran.debt;
                    if(iuaIuran.update(Iuran.Tipe.IUA)){
                        if(Control.updateTDetail(TransactionDetail.Tipe.IUATransaction, iuaTransactionUpdated))
                            return true;
                    }
                }else{
                    return false;
                }
            break;
            case "iuap":
                IUAPTransactionDetail iuapTransactionUpdated = Control.selectTDetail(TransactionDetail.Tipe.IUAPTransaction, it.tDetailID);
                if(!iuapTransactionUpdated.settled){
                    float amountOri = iuapTransactionUpdated.amount;
                    iuapTransactionUpdated.amount = it.amount;
                    iuapTransactionUpdated.lastUpdateDate = lastUpdateDate;
                    iuapTransactionUpdated.idClerk = clerk.id;
                    IUAP iuapIuran = Control.selectIuran(Iuran.Tipe.IUAP, it.iuranID);
                    for(int i = 0; i<12 ; i++){
                        if(iuapIuran.entries.get(i).transactDetailIDs.contains(iuapTransactionUpdated.id)){
                            iuapIuran.entries.get(i).debt = amountOri - it.amount + iuapIuran.entries.get(i).debt;
                        }
                    }
                    if(iuapIuran.update(Iuran.Tipe.IUAP)){
                        if(Control.updateTDetail(TransactionDetail.Tipe.IUAPTransaction, iuapTransactionUpdated))
                            return true;
                    }
                }else{
                    return false;
                }
            break;
            case "seragam":
                SeragamTransactionDetail seragamTransactionUpdated = Control.selectTDetail(TransactionDetail.Tipe.SeragamTransaction, it.tDetailID);
                if(!seragamTransactionUpdated.settled){
                    float amountOri = seragamTransactionUpdated.amount;
                    seragamTransactionUpdated.amount = it.amount;
                    seragamTransactionUpdated.lastUpdateDate = lastUpdateDate;
                    seragamTransactionUpdated.idClerk = clerk.id;
                    Seragam seragamIuran = Control.selectIuran(Iuran.Tipe.Seragam, it.iuranID);
                    seragamIuran.debt = amountOri - it.amount + seragamIuran.debt;
                    if(seragamIuran.update(Iuran.Tipe.Seragam)){
                        if(Control.updateTDetail(TransactionDetail.Tipe.SeragamTransaction, seragamTransactionUpdated))
                            return true;
                    }
                }else{
                    return false;
                }
            break;
            case "attribute":
                AttributeTransactionDetail attributeTransactionUpdated = Control.selectTDetail(TransactionDetail.Tipe.AttributeTransaction, it.tDetailID);
                if(!attributeTransactionUpdated.settled){
                    float amountOri = attributeTransactionUpdated.amount;
                    attributeTransactionUpdated.amount = it.amount;
                    attributeTransactionUpdated.lastUpdateDate = lastUpdateDate;
                    attributeTransactionUpdated.idClerk = clerk.id;
                    Attribute attributeIuran = Control.selectIuran(Iuran.Tipe.Attribute, it.iuranID);
                    attributeIuran.debt = amountOri - it.amount + attributeIuran.debt;
                    if(attributeIuran.update(Iuran.Tipe.Attribute)){
                        if(Control.updateTDetail(TransactionDetail.Tipe.AttributeTransaction, attributeTransactionUpdated))
                            return true;
                    }
                }else{
                    return false;
                }
            break;
            case "buku":
                BukuTransactionDetail bukuTransactionUpdated = Control.selectTDetail(TransactionDetail.Tipe.BukuTransaction, it.tDetailID);
                if(!bukuTransactionUpdated.settled){
                    float amountOri = bukuTransactionUpdated.amount;
                    bukuTransactionUpdated.amount = it.amount;
                    bukuTransactionUpdated.lastUpdateDate = lastUpdateDate;
                    bukuTransactionUpdated.idClerk = clerk.id;
                    Buku bukuIuran = Control.selectIuran(Iuran.Tipe.Buku, it.iuranID);
                    bukuIuran.debt = amountOri - it.amount + bukuIuran.debt;
                    if(bukuIuran.update(Iuran.Tipe.Buku)){
                        if(Control.updateTDetail(TransactionDetail.Tipe.BukuTransaction, bukuTransactionUpdated))
                            return true;
                    }
                }else{
                    return false;
                }
            break;
            case "ill":
                ILLTransactionDetail illTransactionUpdated = Control.selectTDetail(TransactionDetail.Tipe.ILLTransaction, it.tDetailID);
                if(!illTransactionUpdated.settled){
                    float amountOri = illTransactionUpdated.amount;
                    illTransactionUpdated.amount = it.amount;
                    illTransactionUpdated.lastUpdateDate = lastUpdateDate;
                    illTransactionUpdated.idClerk = clerk.id;
                    ILL illIuran = Control.selectIuran(Iuran.Tipe.ILL, it.iuranID);
                    illIuran.debt = amountOri - it.amount + illIuran.debt;
                    if(illIuran.update(Iuran.Tipe.ILL)){
                        if(Control.updateTDetail(TransactionDetail.Tipe.ILLTransaction, illTransactionUpdated))
                            return true;
                    }
                }else{
                    return false;
                }
            break;
            case "tabungan":
                TabunganTransactionDetail tabunganTransactionUpdated = Control.selectTDetail(TransactionDetail.Tipe.TabunganTransaction, it.tDetailID);
                if(!tabunganTransactionUpdated.settled){
                    float amountOri = tabunganTransactionUpdated.amount;
                    tabunganTransactionUpdated.amount = it.amount;
                    tabunganTransactionUpdated.lastUpdateDate = lastUpdateDate;
                    tabunganTransactionUpdated.idClerk = clerk.id;
                    Tabungan tabunganIuran = Control.selectIuran(Iuran.Tipe.Tabungan, it.iuranID);
                    tabunganIuran.debt = amountOri - it.amount + tabunganIuran.debt;
                    if(tabunganIuran.update(Iuran.Tipe.Tabungan)){
                        if(Control.updateTDetail(TransactionDetail.Tipe.TabunganTransaction, tabunganTransactionUpdated))
                            return true;
                    }
                }else{
                    return false;
                }
            break;
            case "sumbangan":
                SumbanganTransactionDetail sumbanganTransactionUpdated = Control.selectTDetail(TransactionDetail.Tipe.SumbanganTransaction, it.tDetailID);
                if(!sumbanganTransactionUpdated.settled){
                    float amountOri = sumbanganTransactionUpdated.amount;
                    sumbanganTransactionUpdated.amount = it.amount;
                    sumbanganTransactionUpdated.lastUpdateDate = lastUpdateDate;
                    sumbanganTransactionUpdated.idClerk = clerk.id;
                    Sumbangan sumbanganIuran = Control.selectIuran(Iuran.Tipe.Sumbangan, it.iuranID);
                    sumbanganIuran.debt = amountOri - it.amount + sumbanganIuran.debt;
                    if(sumbanganIuran.update(Iuran.Tipe.Sumbangan)){
                        if(Control.updateTDetail(TransactionDetail.Tipe.SumbanganTransaction, sumbanganTransactionUpdated))
                            return true;
                    }
                }else{
                    return false;
                }
            break;
            case "ius":
                IUSTransactionDetail iusTransactionUpdated = Control.selectTDetail(TransactionDetail.Tipe.IUSTransaction, it.tDetailID);
                if(!iusTransactionUpdated.settled){
                    float amountOri = iusTransactionUpdated.amount;
                    iusTransactionUpdated.amount = it.amount;
                    iusTransactionUpdated.lastUpdateDate = lastUpdateDate;
                    iusTransactionUpdated.idClerk = clerk.id;
                    IUS iusIuran = Control.selectIuran(Iuran.Tipe.IUS, it.iuranID);
                    for(int i = 0; i<4 ; i++){
                        if(iusIuran.entries.get(i).transactDetailIDs.contains(iusTransactionUpdated.id)){
                            iusIuran.entries.get(i).debt = amountOri - it.amount + iusIuran.entries.get(i).debt;
                        }
                    }
                    if(iusIuran.update(Iuran.Tipe.IUS)){
                        if(Control.updateTDetail(TransactionDetail.Tipe.IUSTransaction, iusTransactionUpdated))
                            return true;
                    }
                }else{
                    return false;
                }
            break;
            case "iks":
                IKSTransactionDetail iksTransactionUpdated = Control.selectTDetail(TransactionDetail.Tipe.IKSTransaction, it.tDetailID);
                if(!iksTransactionUpdated.settled){
                    float amountOri = iksTransactionUpdated.amount;
                    iksTransactionUpdated.amount = it.amount;
                    iksTransactionUpdated.lastUpdateDate = lastUpdateDate;
                    iksTransactionUpdated.idClerk = clerk.id;
                    IKS iksIuran = Control.selectIuran(Iuran.Tipe.IKS, it.iuranID);
                    for(int i = 0; i<1 ; i++){
                        if(iksIuran.entries.get(i).transactDetailIDs.contains(iksTransactionUpdated.id)){
                            iksIuran.entries.get(i).debt = amountOri - it.amount + iksIuran.entries.get(i).debt;
                        }
                    }
                    if(iksIuran.update(Iuran.Tipe.IKS)){
                        if(Control.updateTDetail(TransactionDetail.Tipe.IKSTransaction, iksTransactionUpdated))
                            return true;
                    }
                }else{
                    return false;
                }
            break;
            case "osis":
                OSISTransactionDetail osisTransactionUpdated = Control.selectTDetail(TransactionDetail.Tipe.OSISTransaction, it.tDetailID);
                if(!osisTransactionUpdated.settled){
                    float amountOri = osisTransactionUpdated.amount;
                    osisTransactionUpdated.amount = it.amount;
                    osisTransactionUpdated.lastUpdateDate = lastUpdateDate;
                    osisTransactionUpdated.idClerk = clerk.id;
                    OSIS osisIuran = Control.selectIuran(Iuran.Tipe.OSIS, it.iuranID);
                    for(int i = 0; i<1 ; i++){
                        if(osisIuran.entries.get(i).transactDetailIDs.contains(osisTransactionUpdated.id)){
                            osisIuran.entries.get(i).debt = amountOri - it.amount + osisIuran.entries.get(i).debt;
                        }
                    }
                    if(osisIuran.update(Iuran.Tipe.OSIS)){
                        if(Control.updateTDetail(TransactionDetail.Tipe.OSISTransaction, osisTransactionUpdated))
                            return true;
                    }
                }else{
                    return false;
                }
            break;
            case "pvt":
                PVTTransactionDetail pvtTransactionUpdated = Control.selectTDetail(TransactionDetail.Tipe.PVTTransaction, it.tDetailID);
                if(!pvtTransactionUpdated.settled){
                    float amountOri = pvtTransactionUpdated.amount;
                    pvtTransactionUpdated.amount = it.amount;
                    pvtTransactionUpdated.lastUpdateDate = lastUpdateDate;
                    pvtTransactionUpdated.idClerk = clerk.id;
                    PVT pvtIuran = Control.selectIuran(Iuran.Tipe.PVT, it.iuranID);
                    for(int i = 0; i<1 ; i++){
                        if(pvtIuran.entries.get(i).transactDetailIDs.contains(pvtTransactionUpdated.id)){
                            pvtIuran.entries.get(i).debt = amountOri - it.amount + pvtIuran.entries.get(i).debt;
                        }
                    }
                    if(pvtIuran.update(Iuran.Tipe.PVT)){
                        if(Control.updateTDetail(TransactionDetail.Tipe.PVTTransaction, pvtTransactionUpdated))
                            return true;
                    }
                }else{
                    return false;
                }
            break;
            case "idd":                 
                IDDTransactionDetail iddTransactionUpdated = Control.selectTDetail(TransactionDetail.Tipe.IDDTransaction, it.tDetailID);
                if(!iddTransactionUpdated.settled){
                    float amountOri = iddTransactionUpdated.amount;
                    
                    iddTransactionUpdated.amount = it.amount;
                    iddTransactionUpdated.lastUpdateDate = lastUpdateDate;
                    iddTransactionUpdated.idClerk = clerk.id;
                    IDD iddIuran = Control.selectIuran(Iuran.Tipe.IDD, it.iuranID);
                    iddIuran.amount = iddIuran.amount - (amountOri - it.amount);
                    if(iddIuran.update(Iuran.Tipe.IDD)){
                        if(Control.updateTDetail(TransactionDetail.Tipe.IDDTransaction, iddTransactionUpdated))
                            return true;
                    }
                }else{
                    return false;
                }
            break;
            case "beasiswa":                 
                BeasiswaTransactionDetail beasiswaTransactionUpdated = Control.selectTDetail(TransactionDetail.Tipe.BeasiswaTransaction, it.tDetailID);
                if(!beasiswaTransactionUpdated.settled){
                    float amountOri = beasiswaTransactionUpdated.amount;
                    
                    beasiswaTransactionUpdated.amount = it.amount;
                    beasiswaTransactionUpdated.lastUpdateDate = lastUpdateDate;
                    beasiswaTransactionUpdated.idClerk = clerk.id;
                    Beasiswa beasiswaIuran = Control.selectIuran(Iuran.Tipe.Beasiswa, it.iuranID);
                    beasiswaIuran.amount = beasiswaIuran.amount - (amountOri - it.amount);
                    if(beasiswaIuran.update(Iuran.Tipe.Beasiswa)){
                        if(Control.updateTDetail(TransactionDetail.Tipe.BeasiswaTransaction, beasiswaTransactionUpdated))
                            return true;
                    }
                }else{
                    return false;
                }
            break;
            case "beasiswacost":                 
                BeasiswaCostTransactionDetail beasiswacostTransactionUpdated = Control.selectTDetail(TransactionDetail.Tipe.BeasiswaCostTransaction, it.tDetailID);
                if(!beasiswacostTransactionUpdated.settled){
                    float amountOri = beasiswacostTransactionUpdated.amount;
                    
                    beasiswacostTransactionUpdated.amount = it.amount;
                    beasiswacostTransactionUpdated.lastUpdateDate = lastUpdateDate;
                    beasiswacostTransactionUpdated.idClerk = clerk.id;
                    BeasiswaCost beasiswacostIuran = Control.selectIuran(Iuran.Tipe.BeasiswaCost, it.iuranID);
                    beasiswacostIuran.amount = beasiswacostIuran.amount - (amountOri - it.amount);
                    if(beasiswacostIuran.update(Iuran.Tipe.BeasiswaCost)){
                        if(Control.updateTDetail(TransactionDetail.Tipe.BeasiswaCostTransaction, beasiswacostTransactionUpdated))
                            return true;
                    }
                }else{
                    return false;
                }
            break;
        }
        
        return false;
    }
    
    private boolean updateTSum(TransactionSummary ts) throws SQLException, KasirException{
        transactionSummary.totalAmount = updatedTotalAmount;
        transactionSummary.lastUpdateDate = lastUpdateDate;
        transactionSummary.idClerk = clerk.id;
        return transactionSummary.update();
    }
}
class IuranTransaction{
    Long tDetailID;
    Long iuranID;
    Iuran.Tipe tipeIuran;
    Float amount;
    String note;
    public IuranTransaction(Long tdid, Long iid, Float a, String n, Iuran.Tipe it){
        tDetailID = tdid;
        iuranID = iid;
        amount = a;
        note = n;
        tipeIuran = it;
    }
}
