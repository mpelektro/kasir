/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import iuran.*;
import iuran.Iuran;
import static iuran.TransactionDetail.Tipe.*;
import iuran.TransactionSummary;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import javax.print.attribute.HashPrintRequestAttributeSet;
import javax.print.attribute.PrintRequestAttributeSet;
import javax.print.attribute.standard.*;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFormattedTextField;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import kasir.Clerk;
import kasir.Control;
import kasir.DBSR;
import static kasir.DBSR.conn;
import static kasir.DBSR.dbPass;
import static kasir.DBSR.dbURL;
import static kasir.DBSR.dbURLppdb;
import static kasir.DBSR.dbUsername;
import net.sf.jasperreports.engine.*;
import net.sf.jasperreports.engine.export.JRPrintServiceExporter;
import net.sf.jasperreports.engine.export.JRPrintServiceExporterParameter;
import net.sf.jasperreports.engine.export.JRXlsExporter;
import net.sf.jasperreports.view.JasperViewer;
import org.ini4j.Ini;
import org.openide.util.Exceptions;
import pelajar.Biodata;
import pelajar.Level;
import pelajar.Profil;
import printout.BuktiPembayaran;
import printout.DetailTunggakanPasca;
import printout.PenerimaanKasir;
import printout.StatusPendaftaran;
import printout.TunggakanPerKelas;
import sak.Kalender;
import sak.KasirException;

/**
 *
 * @author Master
 */
public class AppFrame extends javax.swing.JFrame {
    private Long tSumID;
    private ArrayList<IPP> paramIPPs;
    private ArrayList<IUAP> paramIUAPs;
    private ArrayList<TunggakanPasca> paramTunggakanPascas;
    private IPSP paramIPSP;
    private PASB paramPASB;
    private ArrayList<IKS> paramIKSs;
    private ArrayList<Seragam> paramSeragams;
    private ArrayList<Almamater> paramAlmamaters;
    private IPSB paramIPSB;
    private ArrayList<Buku> paramBukus;
    private ArrayList<ILL> paramILLs;
    private IUA paramIUA;
    private ArrayList<IUS> paramIUSs;
    private ArrayList<OSIS> paramOSISs;
    private ArrayList<PVT> paramPVTs;
    private ArrayList<Tabungan> paramTabungans;
    private ArrayList<Sumbangan> paramSumbangans;
    private ArrayList<Attribute> paramAttributes;
    private String tunggakanTotalAmount;
    private String tunggakanAkumulasiAmount;
    private String cicilanAkumulasi;
    private String tunggakanBerjalanAmount;
    public Float totalDebt;
    public Float totalAkumulasi;
    public Float rekomendasiCicilanAkumulasi;
    public Float tunggakanBerjalan;
    public boolean isPPDB = false;
    /* JasperReport is the object
    that holds our compiled jrxml file */
    JasperReport jasperReport;
    

    /* JasperPrint is the object contains
    report after result filling process */
    JasperPrint jasperPrint;
    /**
     * Creates new form AppFrame
     */
    public Ini ppdbIni;
    public AppFrame() {
        this.clerk = new Clerk();
        try {
            Control.login("rusly","123456");
            initComponents();
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }
    }
    
    public AppFrame(Clerk clerk){
        try{
            ppdbIni = new Ini(new File("lib/ini/ppdb.ini"));
            if(ppdbIni.get("program", "name", String.class).equals("ppdb")){
                 isPPDB = true;
            }else{
                 isPPDB = false;
            }
        } catch (IOException ex) {
            Exceptions.printStackTrace(ex);
        }
        initComponents();
        this.clerk = clerk;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableModelInitialSearch = new DefaultTableModel();
        tableModelTSum = new DefaultTableModel();
        tableModelTunggakanProfil = new DefaultTableModel();
        jPanel1 = new javax.swing.JPanel();
        Level level = new Level();
        List<Level.Level1> listLevel1 = new ArrayList<Level.Level1>(Arrays.asList(Level.Level1.values()));
        List<Level.Level2> listLevel2 = new ArrayList<Level.Level2>(Arrays.asList(Level.Level2.values()));
        List<Level.Level3> listLevel3 = new ArrayList<Level.Level3>(Arrays.asList(Level.Level3.values()));
        listLevel1.add(0, null);
        listLevel2.add(0, null);
        listLevel3.add(0, null);
        DefaultComboBoxModel level1ComboBoxModel = new DefaultComboBoxModel(listLevel1.toArray());
        DefaultComboBoxModel level2ComboBoxModel = new DefaultComboBoxModel(listLevel2.toArray());
        DefaultComboBoxModel level3ComboBoxModel = new DefaultComboBoxModel(listLevel3.toArray());
        jPanel2 = new javax.swing.JPanel();
        jLabelNamaSiswa = new javax.swing.JLabel();
        jTextFieldNamaSiswa = new javax.swing.JTextField();
        jLabelNomorInduk = new javax.swing.JLabel();
        jTextFieldNomorInduk = new javax.swing.JTextField();
        jLabelSekolah = new javax.swing.JLabel();
        jComboBoxLevel1 = new javax.swing.JComboBox();
        jLabelKelas = new javax.swing.JLabel();
        jComboBoxLevel2 = new javax.swing.JComboBox();
        jComboBoxLevel3 = new javax.swing.JComboBox();
        jToolBar1 = new javax.swing.JToolBar();
        jInputSiswa = new javax.swing.JButton();
        jButtonInsertKasir = new javax.swing.JButton();
        jButtonEditDeleteProfil = new javax.swing.JButton();
        jButtonSettingIuran = new javax.swing.JButton();
        jButtonSettingGL = new javax.swing.JButton();
        jButtonSettlement = new javax.swing.JButton();
        jButtonRekapPenerimaan = new javax.swing.JButton();
        jButtonRekapPenerimaanPerKasir = new javax.swing.JButton();
        jButtonLapStatusPendaftaran = new javax.swing.JButton();
        jButtonTunggakanPerKelas = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableInitialSearch = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableTSum = new javax.swing.JTable();
        jButtonTSumEdit = new javax.swing.JButton();
        jButtonTSumPrint = new javax.swing.JButton();
        jToolBar3 = new javax.swing.JToolBar();
        jButtonSearch = new javax.swing.JButton();
        jButtonTransaksi = new javax.swing.JButton();
        jButtonClear = new javax.swing.JButton();
        jButtonRips = new javax.swing.JButton();
        jButtonBatal = new javax.swing.JButton();
        jButtonTunggakanPasca = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableTunggakanProfil = new javax.swing.JTable();
        selectedProfileName = new javax.swing.JLabel();
        selectedProfilTotalDebt = new javax.swing.JLabel();
        jToolBar2 = new javax.swing.JToolBar();
        dateChooserComboTSumS = new datechooser.beans.DateChooserCombo();
        jToolBar4 = new javax.swing.JToolBar();
        jButtonTSum = new javax.swing.JButton();
        jButtonPrintReportKasir = new javax.swing.JButton();
        jToolBar5 = new javax.swing.JToolBar();
        dateChooserComboTSumE = new datechooser.beans.DateChooserCombo();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbCreatedDate = new javax.swing.JCheckBox();
        cbLastUpdateDate = new javax.swing.JCheckBox();
        jLabelTitle = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.title")); // NOI18N
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(1152, 768));
        setPreferredSize(new java.awt.Dimension(1280, 768));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setMinimumSize(new java.awt.Dimension(1024, 768));
        jPanel1.setPreferredSize(new java.awt.Dimension(1024, 768));

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabelNamaSiswa.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jLabelNamaSiswa.text")); // NOI18N

        jTextFieldNamaSiswa.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jTextFieldNamaSiswa.text")); // NOI18N
        jTextFieldNamaSiswa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldNamaSiswaActionPerformed(evt);
            }
        });

        jLabelNomorInduk.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jLabelNomorInduk.text")); // NOI18N

        jTextFieldNomorInduk.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jTextFieldNomorInduk.text")); // NOI18N

        jLabelSekolah.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jLabelSekolah.text")); // NOI18N

        jComboBoxLevel1.setModel(level1ComboBoxModel);

        jLabelKelas.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jLabelKelas.text")); // NOI18N

        jComboBoxLevel2.setModel(level2ComboBoxModel);

        jComboBoxLevel3.setModel(level3ComboBoxModel);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelNamaSiswa)
                .addGap(22, 22, 22)
                .addComponent(jTextFieldNamaSiswa, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelNomorInduk)
                .addGap(18, 18, 18)
                .addComponent(jTextFieldNomorInduk, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelSekolah)
                .addGap(22, 22, 22)
                .addComponent(jComboBoxLevel1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabelKelas)
                .addGap(22, 22, 22)
                .addComponent(jComboBoxLevel2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jComboBoxLevel3, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelKelas)
                        .addComponent(jComboBoxLevel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBoxLevel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelNamaSiswa)
                        .addComponent(jTextFieldNamaSiswa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelNomorInduk)
                        .addComponent(jTextFieldNomorInduk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelSekolah)
                        .addComponent(jComboBoxLevel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(78, 78, 78))
        );

        jToolBar1.setRollover(true);
        jToolBar1.setMaximumSize(new java.awt.Dimension(1900, 43));
        jToolBar1.setMinimumSize(new java.awt.Dimension(1100, 43));

        jInputSiswa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/user5_16.png"))); // NOI18N
        jInputSiswa.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jInputSiswa.text")); // NOI18N
        jInputSiswa.setFocusable(false);
        jInputSiswa.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jInputSiswa.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jInputSiswa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jInputSiswaActionPerformed(evt);
            }
        });
        jToolBar1.add(jInputSiswa);

        jButtonInsertKasir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/user3_16.png"))); // NOI18N
        jButtonInsertKasir.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonInsertKasir.text")); // NOI18N
        jButtonInsertKasir.setFocusable(false);
        jButtonInsertKasir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonInsertKasir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonInsertKasir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInsertKasirActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonInsertKasir);

        jButtonEditDeleteProfil.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/user6_16.png"))); // NOI18N
        jButtonEditDeleteProfil.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonEditDeleteProfil.text")); // NOI18N
        jButtonEditDeleteProfil.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonEditDeleteProfil.setMaximumSize(new java.awt.Dimension(101, 41));
        jButtonEditDeleteProfil.setMinimumSize(new java.awt.Dimension(101, 41));
        jButtonEditDeleteProfil.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonEditDeleteProfil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditDeleteProfilActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonEditDeleteProfil);

        jButtonSettingIuran.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/user_info_16.png"))); // NOI18N
        jButtonSettingIuran.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonSettingIuran.text")); // NOI18N
        jButtonSettingIuran.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSettingIuran.setMaximumSize(new java.awt.Dimension(101, 41));
        jButtonSettingIuran.setMinimumSize(new java.awt.Dimension(101, 41));
        jButtonSettingIuran.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSettingIuran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSettingIuranActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonSettingIuran);

        jButtonSettingGL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/licence_16.png"))); // NOI18N
        jButtonSettingGL.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonSettingGL.text")); // NOI18N
        jButtonSettingGL.setFocusable(false);
        jButtonSettingGL.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSettingGL.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSettingGL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSettingGLActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonSettingGL);

        jButtonSettlement.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Tools.png"))); // NOI18N
        jButtonSettlement.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonSettlement.text")); // NOI18N
        jButtonSettlement.setFocusable(false);
        jButtonSettlement.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonSettlement.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonSettlement.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSettlementActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonSettlement);

        jButtonRekapPenerimaan.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/News.png"))); // NOI18N
        jButtonRekapPenerimaan.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonRekapPenerimaan.text")); // NOI18N
        jButtonRekapPenerimaan.setFocusable(false);
        jButtonRekapPenerimaan.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonRekapPenerimaan.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonRekapPenerimaan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRekapPenerimaanActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonRekapPenerimaan);

        jButtonRekapPenerimaanPerKasir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/document_pencil_16.png"))); // NOI18N
        jButtonRekapPenerimaanPerKasir.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonRekapPenerimaanPerKasir.text")); // NOI18N
        jButtonRekapPenerimaanPerKasir.setFocusable(false);
        jButtonRekapPenerimaanPerKasir.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonRekapPenerimaanPerKasir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonRekapPenerimaanPerKasir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRekapPenerimaanPerKasirActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonRekapPenerimaanPerKasir);

        jButtonLapStatusPendaftaran.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/credit_card_16.png"))); // NOI18N
        jButtonLapStatusPendaftaran.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonLapStatusPendaftaran.text")); // NOI18N
        jButtonLapStatusPendaftaran.setFocusable(false);
        jButtonLapStatusPendaftaran.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonLapStatusPendaftaran.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonLapStatusPendaftaran.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLapStatusPendaftaranActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonLapStatusPendaftaran);

        jButtonTunggakanPerKelas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/document_16.png"))); // NOI18N
        jButtonTunggakanPerKelas.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonTunggakanPerKelas.text")); // NOI18N
        jButtonTunggakanPerKelas.setFocusable(false);
        jButtonTunggakanPerKelas.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonTunggakanPerKelas.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonTunggakanPerKelas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTunggakanPerKelasActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonTunggakanPerKelas);

        jTableInitialSearch.setAutoCreateRowSorter(true);
        jTableInitialSearch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTableInitialSearch.setModel(tableModelInitialSearch);
        jTableInitialSearch.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableInitialSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableInitialSearchMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTableInitialSearchMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableInitialSearchMouseReleased(evt);
            }
        });
        jTableInitialSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTableInitialSearchKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTableInitialSearch);

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jTableTSum.setAutoCreateRowSorter(true);
        jTableTSum.setModel(tableModelTSum);
        jTableTSum.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTableTSum.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTableTSumMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jTableTSum);

        jButtonTSumEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/News.png"))); // NOI18N
        jButtonTSumEdit.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonTSumEdit.text")); // NOI18N
        jButtonTSumEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTSumEditActionPerformed(evt);
            }
        });

        jButtonTSumPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Print.png"))); // NOI18N
        jButtonTSumPrint.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonTSumPrint.text")); // NOI18N
        jButtonTSumPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTSumPrintActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jButtonTSumEdit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonTSumPrint)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1075, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 151, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonTSumEdit)
                    .addComponent(jButtonTSumPrint)))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel3Layout.createSequentialGroup()
                    .addGap(24, 24, 24)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(25, Short.MAX_VALUE)))
        );

        jToolBar3.setRollover(true);

        jButtonSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/paly_16.png"))); // NOI18N
        jButtonSearch.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonSearch.text")); // NOI18N
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });
        jToolBar3.add(jButtonSearch);

        jButtonTransaksi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/money_16.png"))); // NOI18N
        jButtonTransaksi.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonTransaksi.text")); // NOI18N
        jButtonTransaksi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTransaksiActionPerformed(evt);
            }
        });
        jToolBar3.add(jButtonTransaksi);

        jButtonClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/reload_16.png"))); // NOI18N
        jButtonClear.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonClear.text")); // NOI18N
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });
        jToolBar3.add(jButtonClear);

        jButtonRips.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/document_pencil_16.png"))); // NOI18N
        jButtonRips.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonRips.text")); // NOI18N
        jButtonRips.setFocusable(false);
        jButtonRips.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonRips.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRipsActionPerformed(evt);
            }
        });
        jToolBar3.add(jButtonRips);

        jButtonBatal.setEnabled(isPPDB);
        jButtonBatal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Warning.png"))); // NOI18N
        jButtonBatal.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonBatal.text")); // NOI18N
        jButtonBatal.setFocusable(false);
        jButtonBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBatalActionPerformed(evt);
            }
        });
        jToolBar3.add(jButtonBatal);

        jButtonTunggakanPasca.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/wand_16.png"))); // NOI18N
        jButtonTunggakanPasca.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonTunggakanPasca.text")); // NOI18N
        jButtonTunggakanPasca.setFocusable(false);
        jButtonTunggakanPasca.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        jButtonTunggakanPasca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTunggakanPascaActionPerformed(evt);
            }
        });
        jToolBar3.add(jButtonTunggakanPasca);

        jTableTunggakanProfil.setModel(tableModelTunggakanProfil);
        jScrollPane3.setViewportView(jTableTunggakanProfil);

        selectedProfileName.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        selectedProfileName.setText("Peserta Didik");

        selectedProfilTotalDebt.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.selectedProfilTotalDebt.text")); // NOI18N

        jToolBar2.setRollover(true);

        dateChooserComboTSumS.setWeekStyle(datechooser.view.WeekDaysStyle.FULL);
        jToolBar2.add(dateChooserComboTSumS);

        jToolBar4.setRollover(true);

        jButtonTSum.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/News.png"))); // NOI18N
        jButtonTSum.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonTSum.text")); // NOI18N
        jButtonTSum.setFocusable(false);
        jButtonTSum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTSumActionPerformed(evt);
            }
        });
        jToolBar4.add(jButtonTSum);

        jButtonPrintReportKasir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Print.png"))); // NOI18N
        jButtonPrintReportKasir.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jButtonPrintReportKasir.text")); // NOI18N
        jButtonPrintReportKasir.setFocusable(false);
        jButtonPrintReportKasir.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonPrintReportKasir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPrintReportKasirActionPerformed(evt);
            }
        });
        jToolBar4.add(jButtonPrintReportKasir);

        jToolBar5.setRollover(true);

        dateChooserComboTSumE.setWeekStyle(datechooser.view.WeekDaysStyle.FULL);
        jToolBar5.add(dateChooserComboTSumE);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Arrow_Left.png"))); // NOI18N
        jLabel1.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jLabel1.text")); // NOI18N

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Arrow_Right.png"))); // NOI18N
        jLabel2.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jLabel2.text")); // NOI18N
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        cbCreatedDate.setSelected(true);
        cbCreatedDate.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.cbCreatedDate.text")); // NOI18N
        cbCreatedDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCreatedDateActionPerformed(evt);
            }
        });

        cbLastUpdateDate.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.cbLastUpdateDate.text")); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectedProfileName)
                    .addComponent(selectedProfilTotalDebt))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(2, 2, 2)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar5, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbCreatedDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbLastUpdateDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar4, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(selectedProfileName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectedProfilTotalDebt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jToolBar5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cbCreatedDate)
                        .addComponent(cbLastUpdateDate))
                    .addComponent(jToolBar4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addComponent(jToolBar3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 1118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
        );

        jLabelTitle.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabelTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelTitle.setText(isPPDB?"PPDB":"KASIR");
        jLabelTitle.setMaximumSize(new java.awt.Dimension(80, 29));
        jLabelTitle.setMinimumSize(new java.awt.Dimension(60, 29));

        jMenu1.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jMenu1.text")); // NOI18N

        jMenu4.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jMenu4.text")); // NOI18N
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu4MouseClicked(evt);
            }
        });
        jMenu1.add(jMenu4);

        jMenu3.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jMenu3.text")); // NOI18N
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu3MouseClicked(evt);
            }
        });
        jMenu3.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                jMenu3MenuSelected(evt);
            }
        });
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });
        jMenu3.addMenuKeyListener(new javax.swing.event.MenuKeyListener() {
            public void menuKeyPressed(javax.swing.event.MenuKeyEvent evt) {
                jMenu3MenuKeyPressed(evt);
            }
            public void menuKeyReleased(javax.swing.event.MenuKeyEvent evt) {
            }
            public void menuKeyTyped(javax.swing.event.MenuKeyEvent evt) {
            }
        });
        jMenu1.add(jMenu3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText(org.openide.util.NbBundle.getMessage(AppFrame.class, "AppFrame.jMenu2.text")); // NOI18N
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 692, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 55, Short.MAX_VALUE))
            .addComponent(jLabelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        try {
            Biodata biodata = jTextFieldNamaSiswa.getText().isEmpty()? new Biodata(): new Biodata(jTextFieldNamaSiswa.getText(), null,null, null, null, null, null, null, null, null, null);
            Profil profil = new Profil();
            String noInduk = jTextFieldNomorInduk.getText();
            Level level = new Level();
            level.level1 = (Level.Level1)jComboBoxLevel1.getSelectedItem();
            level.level2 = (Level.Level2)jComboBoxLevel2.getSelectedItem();
            level.level3 = (Level.Level3)jComboBoxLevel3.getSelectedItem();
            profil.biodata = biodata.isEmpty()?null:biodata;
            profil.currentLevel = level.isEmpty()?null:level;
            profil.noInduk = noInduk.isEmpty()?null:noInduk;
            tableModelInitialSearch = buildInitialTableModel(profil);
            jTableInitialSearch.setModel(tableModelInitialSearch);
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "Connection to database error!\r\n".concat(ex.toString()));
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "Login Invalid!\r\n".concat(ex.toString()));
        }
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jTableInitialSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableInitialSearchMouseClicked
//        try {
//            profil = Control.selectProfil(jTableInitialSearch.getValueAt(jTableInitialSearch.getSelectedRow(),0).toString());
//        } catch (SQLException ex) {
//            Exceptions.printStackTrace(ex);
//        } catch (KasirException ex) {
//            Exceptions.printStackTrace(ex);
//        }
    }//GEN-LAST:event_jTableInitialSearchMouseClicked

    private void jTableInitialSearchMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableInitialSearchMousePressed
//        try {
//            profil = Control.selectProfil(jTableInitialSearch.getValueAt(jTableInitialSearch.getSelectedRow(),0).toString());
//        } catch (SQLException ex) {
//            Exceptions.printStackTrace(ex);
//        } catch (KasirException ex) {
//            Exceptions.printStackTrace(ex);
//        }
    }//GEN-LAST:event_jTableInitialSearchMousePressed

    private void jTableInitialSearchMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableInitialSearchMouseReleased
        try {
            profil = Control.selectProfil(jTableInitialSearch.getValueAt(jTableInitialSearch.getSelectedRow(),0).toString());
            tableModelTunggakanProfil = buildTunggakanProfilTableModel(profil);
            jTableTunggakanProfil.setModel(tableModelTunggakanProfil);
            selectedProfileName.setText(profil.biodata.nama);
            tableModelTSum = buildTSumTableModel(profil);
            jTableTSum.setModel(tableModelTSum);
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "Connection to database error!\r\n".concat(ex.toString()));
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "Login Invalid!\r\n".concat(ex.toString()));
        }
    }//GEN-LAST:event_jTableInitialSearchMouseReleased

    private void jButtonTransaksiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTransaksiActionPerformed
        // TODO add your handling code here:
        //new InputTransactionFrameSeparated(this.clerk, this.profil).setVisible(true);
        //new InputTransactionFrameSeparated(this.clerk, this.profil, paramIPSP).setVisible(true);
        new InputTransactionFrameSeparated(this, this.clerk, this.profil,paramIPPs, paramIPSP, paramSeragams, paramBukus, paramIKSs, paramILLs, paramIPSB, paramIUA, paramIUSs, paramOSISs, paramAttributes, paramPVTs, paramTabungans, paramSumbangans, paramPASB, paramTunggakanPascas, paramAlmamaters, paramIUAPs).setVisible(true);
    }//GEN-LAST:event_jButtonTransaksiActionPerformed

    private void jButtonSettingIuranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSettingIuranActionPerformed
        // TODO add your handling code here:
        new InputIuranFrame(this.clerk, this.profil).setVisible(true);
        //new InputIuranPeriodicFrame(this.clerk, this.profil).setVisible(true);
        //new InputIuranRegularFrame(this.clerk, this.profil).setVisible(true);
    }//GEN-LAST:event_jButtonSettingIuranActionPerformed

    private void jButtonEditDeleteProfilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditDeleteProfilActionPerformed
        // TODO add your handling code here:
        new InputProfilFrame(this.clerk, this.profil).setVisible(true);
        
    }//GEN-LAST:event_jButtonEditDeleteProfilActionPerformed

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        // TODO add your handling code here:
        clearProfilComponents();
    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jInputSiswaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jInputSiswaActionPerformed
        // TODO add your handling code here:
         new InputProfilFrame(this.clerk).setVisible(true);
    }//GEN-LAST:event_jInputSiswaActionPerformed

    private void jButtonSettingGLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSettingGLActionPerformed
        // TODO add your handling code here:
        new MapAccountGLFrame(this.clerk).setVisible(true);
    }//GEN-LAST:event_jButtonSettingGLActionPerformed

    private void jButtonTSumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTSumActionPerformed
        // TODO add your handling code here:
        Kalender kalS = new Kalender(dateChooserComboTSumS.getSelectedDate().getTime());
        kalS.set(Calendar.HOUR_OF_DAY, 0);
        kalS.set(Calendar.MINUTE, 0);
        kalS.set(Calendar.SECOND, 0);
        Kalender kalE = new Kalender(dateChooserComboTSumE.getSelectedDate().getTime());
        kalE.set(Calendar.HOUR_OF_DAY, 23);
        kalE.set(Calendar.MINUTE, 59);
        kalE.set(Calendar.SECOND, 59);
        //Ngakalin CreateDate End biar sama dapet hari satu hari.
        kalE.add(Calendar.DATE, 1);
        try {
            tableModelTSum = buildTSumTableModel(kalS,kalE);
            jTableTSum.setModel(tableModelTSum);
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "Connection to database error!\r\n".concat(ex.toString()));
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "Login Invalid!\r\n".concat(ex.toString()));
        }
    }//GEN-LAST:event_jButtonTSumActionPerformed

    private void cbCreatedDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCreatedDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbCreatedDateActionPerformed

    private void jButtonSettlementActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSettlementActionPerformed
        try {
            // TODO add your handling code here:
            Control.TDetailToGL_Trans.kirimCoiiiiiiiiiiiiii();
            JOptionPane.showMessageDialog(rootPane, "Transfer Data ke Database Accounting Berhasil!\r\n");
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "Connection to database error!\r\n".concat(ex.toString()));
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "Transfer Data ke Database Accounting Gagal!\r\n".concat(ex.toString()));
        }
    }//GEN-LAST:event_jButtonSettlementActionPerformed

    private void jButtonRipsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRipsActionPerformed
        // TODO add your handling code here: RIPS = Report Iuran Per Siswa
    }//GEN-LAST:event_jButtonRipsActionPerformed

    private void jButtonInsertKasirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInsertKasirActionPerformed
        // TODO add your handling code here:
        new InputClerkFrame(this.clerk).setVisible(true);
    }//GEN-LAST:event_jButtonInsertKasirActionPerformed

    private void jButtonPrintReportKasirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPrintReportKasirActionPerformed
        // TODO add your handling code here:
        try{
            Kalender start = new Kalender(dateChooserComboTSumS.getSelectedDate().getTime());
            Kalender end = new Kalender(dateChooserComboTSumE.getSelectedDate().getTime());
            start.set(Calendar.HOUR_OF_DAY, 0);
            start.set(Calendar.MINUTE, 0);
            start.set(Calendar.SECOND, 0);
            end.set(Calendar.HOUR_OF_DAY, 23);
            end.set(Calendar.MINUTE, 59);
            end.set(Calendar.SECOND, 59);
            printPenerimaanKasKasir(clerk, start, end);
        }catch(JRException ex){
            JOptionPane.showMessageDialog(rootPane, "Print Gagal!\r\n".concat(ex.toString()));
        }catch(PrinterException ex){
            JOptionPane.showMessageDialog(rootPane, "Print Gagal!\r\n".concat(ex.toString()));
        }catch(IllegalArgumentException ex){
            JOptionPane.showMessageDialog(rootPane, "Print Gagal!\r\nTidak ada transaksi pada tanggal yang dipilih\r\n".concat(ex.toString()));
        }
    }//GEN-LAST:event_jButtonPrintReportKasirActionPerformed

    private void jTableInitialSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableInitialSearchKeyReleased
        // TODO add your handling code here:
        try {
            profil = Control.selectProfil(jTableInitialSearch.getValueAt(jTableInitialSearch.getSelectedRow(),0).toString());
            tableModelTunggakanProfil = buildTunggakanProfilTableModel(profil);
            jTableTunggakanProfil.setModel(tableModelTunggakanProfil);
            selectedProfileName.setText(profil.biodata.nama);
            tableModelTSum = buildTSumTableModel(profil);
            jTableTSum.setModel(tableModelTSum);
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "Connection to database error!\r\n".concat(ex.toString()));
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "Login Invalid!\r\n".concat(ex.toString()));
        }
    }//GEN-LAST:event_jTableInitialSearchKeyReleased

    private void jTableTSumMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableTSumMouseReleased
        // TODO add your handling code here:
        System.out.println("TSum ".concat(String.valueOf((Long)(jTableTSum.getValueAt(jTableTSum.getSelectedRow(), 0)))));
        tSumID = (Long)(jTableTSum.getValueAt(jTableTSum.getSelectedRow(), 0));
    }//GEN-LAST:event_jTableTSumMouseReleased

    private void jButtonTSumPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTSumPrintActionPerformed
        try {
            TransactionSummary tsum = Control.selectTSummary(tSumID);
            Profil tempProfil = Control.selectProfil(tsum.noInduk);
            TableModel tm = buildTunggakanProfilTableModel(tempProfil);
            InputTransactionFrameSeparated itfs = new InputTransactionFrameSeparated(this, this.clerk, tempProfil,paramIPPs, paramIPSP, paramSeragams, paramBukus, paramIKSs, paramILLs, paramIPSB, paramIUA, paramIUSs, paramOSISs, paramAttributes, paramPVTs, paramTabungans, paramSumbangans, paramPASB, paramTunggakanPascas, paramAlmamaters, paramIUAPs);
            try {
                itfs.printBuktiPembayaran(tsum, tm, totalDebt);
            } catch (JRException ex) {
                Exceptions.printStackTrace(ex);
            } catch (PrinterException ex) {
                Exceptions.printStackTrace(ex);
            }
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }
        
    }//GEN-LAST:event_jButtonTSumPrintActionPerformed

    private void jButtonTSumEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTSumEditActionPerformed
        // TODO add your handling code here:
        new InputEditTransactionSummaryFrame(this, this.tSumID, this.clerk).setVisible(true);
    }//GEN-LAST:event_jButtonTSumEditActionPerformed

    private void jTextFieldNamaSiswaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldNamaSiswaActionPerformed
        // TODO add your handling code here:
        try {
            Biodata biodata = jTextFieldNamaSiswa.getText().isEmpty()? new Biodata(): new Biodata(jTextFieldNamaSiswa.getText(), null,null, null, null, null, null, null, null, null, null);
            Profil profil = new Profil();
            String noInduk = jTextFieldNomorInduk.getText();
            Level level = new Level();
            level.level1 = (Level.Level1)jComboBoxLevel1.getSelectedItem();
            level.level2 = (Level.Level2)jComboBoxLevel2.getSelectedItem();
            level.level3 = (Level.Level3)jComboBoxLevel3.getSelectedItem();
            profil.biodata = biodata.isEmpty()?null:biodata;
            profil.currentLevel = level.isEmpty()?null:level;
            profil.noInduk = noInduk.isEmpty()?null:noInduk;
            tableModelInitialSearch = buildInitialTableModel(profil);
            jTableInitialSearch.setModel(tableModelInitialSearch);
        } catch (SQLException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "Connection to database error!\r\n".concat(ex.toString()));
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
            JOptionPane.showMessageDialog(rootPane, "Login Invalid!\r\n".concat(ex.toString()));
        }
    }//GEN-LAST:event_jTextFieldNamaSiswaActionPerformed

    private void jButtonRekapPenerimaanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRekapPenerimaanActionPerformed
        // TODO add your handling code here:
         try{
            printRekapPenerimaan(new Kalender(dateChooserComboTSumS.getSelectedDate().getTime()), new Kalender(dateChooserComboTSumE.getSelectedDate().getTime()), null);
        } catch (JRException | PrinterException | SQLException | KasirException e){
            Exceptions.printStackTrace(e);
        }
    }//GEN-LAST:event_jButtonRekapPenerimaanActionPerformed

    private void jButtonRekapPenerimaanPerKasirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRekapPenerimaanPerKasirActionPerformed
        // TODO add your handling code here:
        try{
            printRekapPenerimaan(new Kalender(dateChooserComboTSumS.getSelectedDate().getTime()), new Kalender(dateChooserComboTSumE.getSelectedDate().getTime()), this.clerk);
        } catch (JRException | PrinterException | SQLException | KasirException e){
            Exceptions.printStackTrace(e);
        }
    }//GEN-LAST:event_jButtonRekapPenerimaanPerKasirActionPerformed

    private void jButtonLapStatusPendaftaranActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLapStatusPendaftaranActionPerformed
        // TODO add your handling code here:
         try{
           //printStatusPendaftaran(this.clerk);
           JFrame frame = new JFrame("Status Pendaftaran");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        //Create and set up the content pane.
        DialogStatusPendaftaran newContentPane = new DialogStatusPendaftaran(this);
        newContentPane.setOpaque(true); //content panes must be opaque
        frame.setContentPane(newContentPane);

        //Display the window.
        frame.pack();
        frame.setVisible(true);
        } catch (Exception e){
           Exceptions.printStackTrace(e);
        }
    }//GEN-LAST:event_jButtonLapStatusPendaftaranActionPerformed
    
    private void jButtonBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBatalActionPerformed
        // TODO add your handling code here:
       // new InputTransactionFrameSeparated(this, this.clerk, this.profil,paramIPPs, paramIPSP, paramSeragams, paramBukus, paramIKSs, paramILLs, paramIPSB, paramIUA, paramIUSs, paramOSISs, paramAttributes, paramPVTs, paramTabungans, paramSumbangans, paramPASB, paramTunggakanPascas, paramAlmamaters, paramIUAPs).setVisible(true);
       int n = JOptionPane.showConfirmDialog(
                            this, "Yakin ingin mengubah status "+this.profil.biodata.nama+" menjadi BATAL?",
                            "KONFIRMASI",
                            JOptionPane.YES_NO_OPTION);
                    if (n == JOptionPane.YES_OPTION) {
                        try {
                            this.profil.statusPendaftaran = profil.statusPendaftaran.BATAL;
                            this.profil.lastUpdateDate = new Kalender();
                            this.profil.update();
                            JOptionPane.showMessageDialog(this, "Pembatalan "+this.profil.biodata.nama+" telah berhasil", "Pembatalan Berhasil", JOptionPane.WARNING_MESSAGE);
                        } catch (SQLException ex) {
                            Exceptions.printStackTrace(ex);
                        } catch (KasirException ex) {
                            Exceptions.printStackTrace(ex);
                        }
                        
                    } else if (n == JOptionPane.NO_OPTION) {
                        return;
                    } else {
                        return;
                    }

    }//GEN-LAST:event_jButtonBatalActionPerformed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void jMenu3MenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenu3MenuSelected
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jMenu3MenuSelected

    private void jMenu3MenuKeyPressed(javax.swing.event.MenuKeyEvent evt) {//GEN-FIRST:event_jMenu3MenuKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jMenu3MenuKeyPressed

    private void jMenu3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseClicked
        // TODO add your handling code here:
        try{
            updateCsv();
        }catch (SQLException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_jMenu3MouseClicked

    private void jMenu4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseClicked
        // TODO add your handling code here:
        try{
            updatePpdb();
        }catch (SQLException e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_jMenu4MouseClicked

    private void jButtonTunggakanPascaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTunggakanPascaActionPerformed
        // TODO add your handling code here:
        try{
            printDetailTunggakanPasca(this.clerk, this.profil);
        } catch (JRException | PrinterException | SQLException e){
            Exceptions.printStackTrace(e);
        }
    }//GEN-LAST:event_jButtonTunggakanPascaActionPerformed

    private void jButtonTunggakanPerKelasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTunggakanPerKelasActionPerformed
        // TODO add your handling code here:
        String lv1 = jComboBoxLevel1.getSelectedItem().toString();
        String lv2 = jComboBoxLevel2.getSelectedItem().toString();
        String lv3 = jComboBoxLevel3.getSelectedItem().toString();
        Kalender kalS = new Kalender(dateChooserComboTSumS.getSelectedDate().getTime());
        String yr = String.valueOf(kalS.get(Kalender.YEAR));
        String targetYear = lv1.concat("-").concat(lv2).concat("-").concat(lv3).concat("-").concat(yr);
        try{
            printTunggakanPerKelas(targetYear);
        } catch (JRException | PrinterException | SQLException e){
            Exceptions.printStackTrace(e);
        }
    }//GEN-LAST:event_jButtonTunggakanPerKelasActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new AppFrame().setVisible(true);
            }
        });
    }
    
   private TableModel buildInitialTableModel(Biodata bio) throws SQLException, KasirException{
       String columnNames[] = {"Nomor Induk", "Nama Siswa", "Sekolah", "Kelas"};
       Control.login("rusly", "123456");
       Set<Biodata> setBiodata = new HashSet<Biodata>();
       setBiodata.add(bio);
       Map<String, Profil> searchResultMap = new HashMap<String, Profil>();
       searchResultMap = Control.filterSelectProfils(setBiodata);
       Object[][] data = new Object[searchResultMap.size()][10];
       int i = 0;
       for(Map.Entry<String, Profil> entry: searchResultMap.entrySet()){
           data[i][0]= entry.getKey();
           data[i][1]= entry.getValue().currentLevel.level1;
           data[i][2]= entry.getValue().biodata.nama;
       }
       TableModel tm = new DefaultTableModel(data, columnNames);
       
       return tm;
       
   }
   
   private String tahunAjaran(int tahun){
       return String.valueOf(tahun).concat(" - ").concat(String.valueOf(tahun+1));
   }
   
   private TableModel buildInitialTableModel(Profil profil) throws SQLException, KasirException{
       String columnNames[] = {"Nomor Induk", "Nama Siswa", "Sekolah", "Kelas"};
       Set<Profil> setProfil = new HashSet<>();
       setProfil.add(profil);
       Map<String, Profil> searchResultMap = Control.filterSelectProfils(setProfil);
       Object[][] data = new Object[searchResultMap.size()][5];
       int i = 0;
       profils = new ArrayList<>();       
       if(searchResultMap.size() > 0){
        for(Map.Entry<String, Profil> entry: searchResultMap.entrySet()){
            data[i][0]= entry.getKey();
            data[i][1]= entry.getValue().biodata.nama;
            data[i][2]= entry.getValue().currentLevel.level1;
            data[i][3]= entry.getValue().currentLevel.level2.toString().concat(" - "+entry.getValue().currentLevel.level3.toString());
            profils.add(entry.getValue());
            i++;
        }
       }
       TableModel tm = new DefaultTableModel(data, columnNames){
           @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false for editable
                return false;
            }
       };
       
       return tm;
       
   }
   
   public boolean syncIuranDebt(Iuran.Tipe it, Long iuranID){
       if(it == Iuran.Tipe.IPP){
           System.out.println("Sync Iuran Debt IPP");
           //System.out.println(iuranID);
       }
       return true;
   }
   
   public TableModel buildTunggakanProfilTableModel(Profil profil) throws SQLException, KasirException{
       if(profil.statusPendaftaran.equals(profil.statusPendaftaran.BATAL)){
           jButtonTransaksi.setEnabled(false);
           jButtonBatal.setEnabled(false);
       }else{
           jButtonTransaksi.setEnabled(true);
           jButtonBatal.setEnabled(isPPDB);
       }
       
       String columnNames[] = {"Nama Iuran", "Jumlah Tunggakan", "Catatan"};
       Set<Profil> setProfil = new HashSet<>();
       setProfil.add(profil);
       Map<String, Profil> searchResultMap = Control.filterSelectProfils(setProfil);
       List<Tunggakan> tunggakans = new ArrayList<Tunggakan>();
       
       //Get Month and Year for calculate IuranPeriodic 12 times a year (Monthly)
       Calendar calendarRunning = Calendar.getInstance();
       int targetMonth = calendarRunning.get(Calendar.MONTH);
       int targetYear = calendarRunning.get(Calendar.YEAR);
       if(targetMonth>5){//JULY - DECEMBER
           targetMonth = targetMonth - 5;
       }else{//JANUARY - JUNE
           targetMonth = targetMonth + 7;
           targetYear = targetYear - 1;
       }
       
       //Tunggakan Iuran Iuran
       //IPP
       
       List<IPP> tunggakanIPPs = new ArrayList<IPP>();
       
       Set<IPP> ippFilters = new HashSet<>();
       ippFilters.add(new IPP(profil.noInduk, null, null));
       Map<Long, IPP> srmIPP =new HashMap<>();
       srmIPP = Control.exactFilterSelectIurans(Iuran.Tipe.IPP, ippFilters);
       int j = 0;
       int targetIndex = 12;
       if(srmIPP.size() > 0){
        for(Map.Entry<Long, IPP> entry: srmIPP.entrySet()){
            Float temp = 0f;
            if(targetYear == entry.getValue().chargedLevel.tahun){
                for(int i = 0 ; i < 12 ; i++){
                    if(i<targetMonth){
                        temp += entry.getValue().entries.get(i).debt;
                    }else{
                        entry.getValue().entries.get(i).debt = 0;
                        temp += entry.getValue().entries.get(i).debt;
                    }
                }
                if(temp > 0){
                    tunggakans.add(new Tunggakan("IPP", temp, "IPP ".concat(getTahunAjaran(entry.getValue().chargedLevel.tahun)), entry.getValue().chargedLevel.tahun));
                    tunggakanIPPs.add(entry.getValue());
                }
            }else{
                for(int i = 0 ; i < 12 ; i++){
                    temp += entry.getValue().entries.get(i).debt;
                }
                if(temp > 0){
                    tunggakans.add(new Tunggakan("IPP", temp, "IPP ".concat(getTahunAjaran(entry.getValue().chargedLevel.tahun)), entry.getValue().chargedLevel.tahun));
                    tunggakanIPPs.add(entry.getValue());
                }
            }
            
            temp = 0f;
            j++;
        }
        paramIPPs = new ArrayList<>(tunggakanIPPs);
       }
       
       //IUAP
       
       List<IUAP> tunggakanIUAPs = new ArrayList<IUAP>();
       
       Set<IUAP> iuapFilters = new HashSet<>();
       iuapFilters.add(new IUAP(profil.noInduk, null, null));
       Map<Long, IUAP> srmIUAP =new HashMap<>();
       srmIUAP = Control.exactFilterSelectIurans(Iuran.Tipe.IUAP, iuapFilters);
       j = 0;
       targetIndex = 12;
       if(srmIUAP.size() > 0){
        for(Map.Entry<Long, IUAP> entry: srmIUAP.entrySet()){
            Float temp = 0f;
            if(targetYear == entry.getValue().chargedLevel.tahun){
                for(int i = 0 ; i < 12 ; i++){
                    if(i<targetMonth){
                        temp += entry.getValue().entries.get(i).debt;
                    }else{
                        entry.getValue().entries.get(i).debt = 0;
                        temp += entry.getValue().entries.get(i).debt;
                    }
                }
                if(temp > 0){
                    tunggakans.add(new Tunggakan("IUAP", temp, "IUAP ".concat(getTahunAjaran(entry.getValue().chargedLevel.tahun)), entry.getValue().chargedLevel.tahun));
                    tunggakanIUAPs.add(entry.getValue());
                }
            }else{
                for(int i = 0 ; i < 12 ; i++){
                    temp += entry.getValue().entries.get(i).debt;
                }
                if(temp > 0){
                    tunggakans.add(new Tunggakan("IUAP", temp, "IUAP ".concat(getTahunAjaran(entry.getValue().chargedLevel.tahun)), entry.getValue().chargedLevel.tahun));
                    tunggakanIUAPs.add(entry.getValue());
                }
            }
            
            temp = 0f;
            j++;
        }
        paramIUAPs = new ArrayList<>(tunggakanIUAPs);
       }

       //IPSP
       List<IPSP> tunggakanIPSPs = new ArrayList<>();
       Set<IPSP> ipspFilters = new HashSet<>();
       ipspFilters.add(new IPSP(profil.noInduk, null, 0.0f, null));
       Map<Long, IPSP> srmIPSP = new HashMap<>();
       srmIPSP = Control.exactFilterSelectIurans(Iuran.Tipe.IPSP, ipspFilters);
       j = 0;
       if(srmIPSP.size() > 0){
        for(Map.Entry<Long, IPSP> entry: srmIPSP.entrySet()){
            if(entry.getValue().debt > 0){
                tunggakans.add(new Tunggakan("IPSP", entry.getValue().debt, "IPSP ".concat(String.valueOf(entry.getValue().chargedLevel.tahun)), entry.getValue().chargedLevel.tahun));
                paramIPSP = entry.getValue();
            }else{
                paramIPSP = null;
            }
            j++;
        }
       }
       
       //PASB
       List<PASB> tunggakanPASBs = new ArrayList<>();
       Set<PASB> pasbFilters = new HashSet<>();
       pasbFilters.add(new PASB(profil.noInduk, null, null, 0.0f, null));
       Map<Long, PASB> srmPASB = new HashMap<>();
       srmPASB = Control.exactFilterSelectIurans(Iuran.Tipe.PASB, pasbFilters);
       j = 0;
       if(srmPASB.size() > 0){
        for(Map.Entry<Long, PASB> entry: srmPASB.entrySet()){
            if(entry.getValue().debt > 0){
                tunggakans.add(new Tunggakan("PASB", entry.getValue().debt, "PASB ".concat(String.valueOf(entry.getValue().chargedLevel.tahun)), entry.getValue().chargedLevel.tahun));
                paramPASB = entry.getValue();
            }else{
                paramPASB = null;
            }
            j++;
        }
       }
       
       //IPSB
       List<IPSB> tunggakanIPSBs = new ArrayList<>();
       Set<IPSB> ipsbFilters = new HashSet<>();
       ipsbFilters.add(new IPSB(profil.noInduk, null, 0.0f, null));
       Map<Long, IPSB> srmIPSB = new HashMap<>();
       srmIPSB = Control.exactFilterSelectIurans(Iuran.Tipe.IPSB, ipsbFilters);
       j = 0;
       if(srmIPSB.size() > 0){
        for(Map.Entry<Long, IPSB> entry: srmIPSB.entrySet()){
            if(entry.getValue().debt > 0){
                tunggakans.add(new Tunggakan("IPSB", entry.getValue().debt, "IPSB ".concat(String.valueOf(entry.getValue().chargedLevel.tahun)), entry.getValue().chargedLevel.tahun));
                paramIPSB = entry.getValue();
            }else{
                paramIPSB = null;
            }
            j++;
        }
       }
       
       //IUA
       List<IUA> tunggakanIUAs = new ArrayList<>();
       Set<IUA> iuaFilters = new HashSet<>();
       iuaFilters.add(new IUA(profil.noInduk, null, 0.0f, null));
       Map<Long, IUA> srmIUA = new HashMap<>();
       srmIUA = Control.exactFilterSelectIurans(Iuran.Tipe.IUA, iuaFilters);
       j = 0;
       if(srmIUA.size() > 0){
        for(Map.Entry<Long, IUA> entry: srmIUA.entrySet()){
            if(entry.getValue().debt > 0){
                tunggakans.add(new Tunggakan("IUA", entry.getValue().debt, "IUA ".concat(String.valueOf(entry.getValue().chargedLevel.tahun)), entry.getValue().chargedLevel.tahun));
                paramIUA = entry.getValue();
            }else{
                paramIUA = null;
            }
            j++;
        }
       }
       
       //IKS
       List<IKS> tunggakanIKSs = new ArrayList<>();
       Set<IKS> iksFilters = new HashSet<>();
       iksFilters.add(new IKS(profil.noInduk, null, null));
       Map<Long, IKS> srmIKS = new HashMap<>();
       srmIKS = Control.exactFilterSelectIurans(Iuran.Tipe.IKS, iksFilters);
       
       if(srmIKS.size() > 0){
        for(Map.Entry<Long, IKS> entry: srmIKS.entrySet()){
            if(entry.getValue().entries.get(0).debt > 0){
                tunggakans.add(new Tunggakan("IKS", entry.getValue().entries.get(0).debt, "IKS ".concat(String.valueOf(entry.getValue().chargedLevel.tahun)), entry.getValue().chargedLevel.tahun));
                tunggakanIKSs.add(entry.getValue());
            }
           
        }
        paramIKSs = new ArrayList<>(tunggakanIKSs);
       }
       
       //OSIS
       List<OSIS> tunggakanOSISs = new ArrayList<>();
       Set<OSIS> osisFilters = new HashSet<>();
       osisFilters.add(new OSIS(profil.noInduk, null, null));
       Map<Long, OSIS> srmOSIS = new HashMap<>();
       srmOSIS = Control.exactFilterSelectIurans(Iuran.Tipe.OSIS, osisFilters);
       
       if(srmOSIS.size() > 0){
        for(Map.Entry<Long, OSIS> entry: srmOSIS.entrySet()){
            if(entry.getValue().entries.get(0).debt > 0){
                tunggakans.add(new Tunggakan("OSIS", entry.getValue().entries.get(0).debt, "OSIS ".concat(String.valueOf(entry.getValue().chargedLevel.tahun)), entry.getValue().chargedLevel.tahun));
                tunggakanOSISs.add(entry.getValue());
            }
            
        }
        paramOSISs = new ArrayList<>(tunggakanOSISs);
       }
       
       //IUS
       List<IUS> tunggakanIUSs = new ArrayList<>();
       Set<IUS> iusFilters = new HashSet<>();
       iusFilters.add(new IUS(profil.noInduk, null, null));
       Map<Long, IUS> srmIUS = new HashMap<>();
       srmIUS = Control.exactFilterSelectIurans(Iuran.Tipe.IUS, iusFilters);
       
       if(srmIUS.size() > 0){
        for(Map.Entry<Long, IUS> entry: srmIUS.entrySet()){
            for(int i = 0; i < 12/IUS.periodInMonth; i++){
                if(entry.getValue().entries.get(i).debt > 0){
                    tunggakans.add(new Tunggakan("IUS", entry.getValue().entries.get(i).debt, "IUS ".concat(String.valueOf(entry.getValue().chargedLevel.tahun)), entry.getValue().chargedLevel.tahun));
                    tunggakanIUSs.add(entry.getValue());
                }
            }
            
        }
        paramIUSs = new ArrayList<>(tunggakanIUSs);
       }
       
       //PVT
       
       List<PVT> tunggakanPVTs = new ArrayList<>();
       Set<PVT> pvtFilters = new HashSet<>();
       pvtFilters.add(new PVT(profil.noInduk, null, null));
       Map<Long, PVT> srmPVT = new HashMap<>();
       srmPVT = Control.exactFilterSelectIurans(Iuran.Tipe.PVT, pvtFilters);
       if(srmPVT.size() > 0){
        for(Map.Entry<Long, PVT> entry: srmPVT.entrySet()){
            for(int i = 0; i < 12/PVT.periodInMonth; i++){
                if(entry.getValue().entries.get(i).debt > 0){
                    tunggakans.add(new Tunggakan("PVT", entry.getValue().entries.get(i).debt, "PVT ".concat(String.valueOf(entry.getValue().chargedLevel.tahun)), entry.getValue().chargedLevel.tahun));
                    tunggakanPVTs.add(entry.getValue());
                }
            }
        }
        paramPVTs = new ArrayList<>(tunggakanPVTs);
       }else{
           paramPVTs = new ArrayList<>(tunggakanPVTs);
       }
       
       //Seragam
       paramSeragams =  new ArrayList<>();
       Set<Seragam> seragamFilters = new HashSet<>();
       seragamFilters.add(new Seragam(profil.noInduk,null, null, 0F, null));
       Map<Long, Seragam> srmSeragam = new HashMap<>();
       srmSeragam = Control.exactFilterSelectIurans(Iuran.Tipe.Seragam, seragamFilters);
       j = 0;
       if(srmSeragam.size() > 0){
        for(Map.Entry<Long, Seragam> entry: srmSeragam.entrySet()){
            if(entry.getValue().debt > 0){
                tunggakans.add(new Tunggakan("Seragam", entry.getValue().debt, entry.getValue().transactName, entry.getValue().chargedLevel.tahun));
                paramSeragams.add(entry.getValue());
            }
            j++;
        }
       }
       
       //Almamater
       paramAlmamaters =  new ArrayList<>();
       Set<Almamater> almamaterFilters = new HashSet<>();
       almamaterFilters.add(new Almamater(profil.noInduk,null, null, 0F, null));
       Map<Long, Almamater> srmAlmamater = new HashMap<>();
       srmAlmamater = Control.exactFilterSelectIurans(Iuran.Tipe.Almamater, almamaterFilters);
       j = 0;
       if(srmAlmamater.size() > 0){
        for(Map.Entry<Long, Almamater> entry: srmAlmamater.entrySet()){
            if(entry.getValue().debt > 0){
                tunggakans.add(new Tunggakan("Almamater", entry.getValue().debt, entry.getValue().transactName, entry.getValue().chargedLevel.tahun));
                paramAlmamaters.add(entry.getValue());
            }
            j++;
        }
       }
       
       //Attribute
       paramAttributes = new ArrayList<>();
       Set<Attribute> attributeFilters = new HashSet<>();
       attributeFilters.add(new Attribute(profil.noInduk,null, null, 0F, null));
       Map<Long, Attribute> srmAttribute = new HashMap<>();
       srmAttribute = Control.exactFilterSelectIurans(Iuran.Tipe.Attribute, attributeFilters);
       j = 0;
       if(srmAttribute.size() > 0){
        for(Map.Entry<Long, Attribute> entry: srmAttribute.entrySet()){
            if(entry.getValue().debt > 0){
                tunggakans.add(new Tunggakan("Attribute", entry.getValue().debt, entry.getValue().transactName, entry.getValue().chargedLevel.tahun));
                paramAttributes.add(entry.getValue());
            }
            j++;
        }
       }
       
       //Buku
       paramBukus = new ArrayList<>();
       Set<Buku> bukuFilters = new HashSet<>();
       bukuFilters.add(new Buku(profil.noInduk,null, null, 0F, null));
       Map<Long, Buku> srmBuku = new HashMap<>();
       srmBuku = Control.exactFilterSelectIurans(Iuran.Tipe.Buku, bukuFilters);
       j = 0;
       if(srmBuku.size() > 0){
        for(Map.Entry<Long, Buku> entry: srmBuku.entrySet()){
            if(entry.getValue().debt > 0){
                tunggakans.add(new Tunggakan("Buku", entry.getValue().debt, entry.getValue().transactName, entry.getValue().chargedLevel.tahun));
                paramBukus.add(entry.getValue());
            }
            j++;
        }
       }
       
       //ILL
       paramILLs = new ArrayList<>();
       Set<ILL> illFilters = new HashSet<>();
       illFilters.add(new ILL(profil.noInduk,null, null, 0F, null));
       Map<Long, ILL> srmILL = new HashMap<>();
       srmILL = Control.exactFilterSelectIurans(Iuran.Tipe.ILL, illFilters);
       j = 0;
       if(srmILL.size() > 0){
        for(Map.Entry<Long, ILL> entry: srmILL.entrySet()){
            if(entry.getValue().debt > 0){
                tunggakans.add(new Tunggakan("ILL", entry.getValue().debt, entry.getValue().transactName, entry.getValue().chargedLevel.tahun));
                paramILLs.add(entry.getValue());
            }
            j++;
        }
       }
       
       //Tabungan
       paramTabungans = new ArrayList<>();
       Set<Tabungan> tabunganFilters = new HashSet<>();
       tabunganFilters.add(new Tabungan(profil.noInduk,null, null, 0F, null));
       Map<Long, Tabungan> srmTabungan = new HashMap<>();
       srmTabungan = Control.exactFilterSelectIurans(Iuran.Tipe.Tabungan, tabunganFilters);
       j = 0;
       if(srmTabungan.size() > 0){
        for(Map.Entry<Long, Tabungan> entry: srmTabungan.entrySet()){
            if(entry.getValue().debt > 0){
                tunggakans.add(new Tunggakan("Tabungan", entry.getValue().debt, entry.getValue().transactName, entry.getValue().chargedLevel.tahun));
                paramTabungans.add(entry.getValue());
            }
            j++;
        }
       }
       
       //Sumbangan
       paramSumbangans = new ArrayList<>();
       Set<Sumbangan> sumbanganFilters = new HashSet<>();
       sumbanganFilters.add(new Sumbangan(profil.noInduk,null, null, 0F, null));
       Map<Long, Sumbangan> srmSumbangan = new HashMap<>();
       srmSumbangan = Control.exactFilterSelectIurans(Iuran.Tipe.Sumbangan, sumbanganFilters);
       j = 0;
       if(srmSumbangan.size() > 0){
        for(Map.Entry<Long, Sumbangan> entry: srmSumbangan.entrySet()){
            if(entry.getValue().debt > 0){
                tunggakans.add(new Tunggakan("Sumbangan", entry.getValue().debt, entry.getValue().transactName, entry.getValue().chargedLevel.tahun));
                paramSumbangans.add(entry.getValue());
            }
            j++;
        }
       }
       
       //TunggakanPasca
       rekomendasiCicilanAkumulasi = 0f;
       List<TunggakanPasca> tunggakanTunggakanPascas = new ArrayList<TunggakanPasca>();
       
       Set<TunggakanPasca> tunggakanPascaFilters = new HashSet<>();
       tunggakanPascaFilters.add(new TunggakanPasca(profil.noInduk, null, null));
       Map<Long, TunggakanPasca> srmTunggakanPasca =new HashMap<>();
       srmTunggakanPasca = Control.exactFilterSelectIurans(Iuran.Tipe.TunggakanPasca, tunggakanPascaFilters);
       j = 0;
       targetIndex = 12;
       if(srmTunggakanPasca.size() > 0){
        for(Map.Entry<Long, TunggakanPasca> entry: srmTunggakanPasca.entrySet()){
            Float temp = 0f;
            if(targetYear == entry.getValue().chargedLevel.tahun){
                for(int i = 0 ; i < 12 ; i++){
                    if(i<targetMonth){
                        temp += entry.getValue().entries.get(i).debt;
                    }else{
                        entry.getValue().entries.get(i).debt = 0;
                        temp += entry.getValue().entries.get(i).debt;
                    }
                }
                if(temp > 0){
                    tunggakans.add(new Tunggakan("TunggakanPasca", temp, "TunggakanPasca ".concat(getTahunAjaran(entry.getValue().chargedLevel.tahun)), entry.getValue().chargedLevel.tahun));
                    tunggakanTunggakanPascas.add(entry.getValue());
                }
            }else{
                for(int i = 0 ; i < 12 ; i++){
                    temp += entry.getValue().entries.get(i).debt;
                }
                if(temp > 0){
                    tunggakans.add(new Tunggakan("TunggakanPasca", temp, "TunggakanPasca ".concat(getTahunAjaran(entry.getValue().chargedLevel.tahun)), entry.getValue().chargedLevel.tahun));
                    tunggakanTunggakanPascas.add(entry.getValue());
                }
            }
            rekomendasiCicilanAkumulasi = entry.getValue().entries.get(0).amount;
            temp = 0f;
            j++;
        }
        paramTunggakanPascas = new ArrayList<>(tunggakanTunggakanPascas);
       }
       
       JFormattedTextField debtFTF = new JFormattedTextField(0.0);
       debtFTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("Rp #,##0"))));
       
       int pembagi;
       pembagi = 12;
//       if(this.profil.currentLevel.level2.toString().equals("9") || this.profil.currentLevel.level2.toString().equals("12"))
//           pembagi = 10;
//       int bulanIni = Kalender.getInstance().get(Calendar.MONTH);
       
       
       Object[][] data = new Object[tunggakans.size()][3];
       totalDebt= 0f;
       totalAkumulasi = 0f;
       tunggakanBerjalan = 0f;
       for(int i = 0 ; i < tunggakans.size(); i++){
           data[i][0] = getModifiedNameTipeIuran(tunggakans.get(i).tipeIuran);
           debtFTF.setValue(tunggakans.get(i).debt);
           data[i][1] = debtFTF.getText();
           data[i][2] = tunggakans.get(i).note;
           totalDebt += tunggakans.get(i).debt;
           if(tunggakans.get(i).tipeIuran.equals("TunggakanPasca")){
           //if(tunggakans.get(i).tahun < profil.currentLevel.tahun)
               totalAkumulasi += tunggakans.get(i).debt;
               
           }else{
               tunggakanBerjalan += tunggakans.get(i).debt;
           }
           
       }
       tunggakanTotalAmount = NumberFormat.getInstance().format(totalDebt);
       tunggakanAkumulasiAmount = NumberFormat.getInstance().format(totalAkumulasi);
       tunggakanBerjalanAmount = NumberFormat.getInstance().format(tunggakanBerjalan);
       
       
       //rekomendasiCicilanAkumulasi = totalAkumulasi / pembagi;
       
       cicilanAkumulasi = NumberFormat.getInstance().format(rekomendasiCicilanAkumulasi);
       selectedProfilTotalDebt.setText("Tunggakan Berjalan \t: Rp ".concat(tunggakanBerjalanAmount).concat("\r\n Tunggakan Pasca \t: Rp ").concat(tunggakanAkumulasiAmount).concat(" Rekomendasi Cicilan : Rp ").concat(cicilanAkumulasi));
       TableModel tm = new DefaultTableModel(data, columnNames){
           @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false for editable
                return false;
            }
       };
       
       // part update status DAFTAR, PROSES, LUNAS
       if(profil.statusPendaftaran != Profil.StatusPendaftaran.BATAL && (profil.currentLevel.level2 == profil.currentLevel.level2.TUJUH || profil.currentLevel.level2 == profil.currentLevel.level2.SEPULUH)){
        if(ppdbIni.get("program", "name", String.class).equals("ppdb")){
            switch(profil.currentLevel.level1.toString()){
                case "SMP":
                    profil.currentLevel.level2 = profil.currentLevel.level2.TUJUH;
                    if(totalDebt == 0){
                        profil.statusPendaftaran = Profil.StatusPendaftaran.LUNAS;
                    }else if(totalDebt < (profil.gelombang == Profil.Gelombang.GELOMBANG_1?2500000:2500000) && totalDebt > 0){
                        profil.statusPendaftaran = Profil.StatusPendaftaran.PROSES;
                    }else if(totalDebt >= (profil.gelombang == Profil.Gelombang.GELOMBANG_1?2500000:2500000)){
                        profil.statusPendaftaran = Profil.StatusPendaftaran.DAFTAR;
                    }
                 break;
                case "SMA":
                    profil.currentLevel.level2 = profil.currentLevel.level2.SEPULUH;
                    if(totalDebt == 0){
                        profil.statusPendaftaran = Profil.StatusPendaftaran.LUNAS;
                    }else if(totalDebt < (profil.gelombang == Profil.Gelombang.GELOMBANG_1?6750000:6750000) && totalDebt > 0){
                        profil.statusPendaftaran = Profil.StatusPendaftaran.PROSES;
                    }else if(totalDebt >= (profil.gelombang == Profil.Gelombang.GELOMBANG_1?6750000:6750000)){
                        profil.statusPendaftaran = Profil.StatusPendaftaran.DAFTAR;
                    }
                    break;
                case "SMK":
                    profil.currentLevel.level2 = profil.currentLevel.level2.SEPULUH;
                    if(totalDebt == 0){
                        profil.statusPendaftaran = Profil.StatusPendaftaran.LUNAS;
                    }else if(totalDebt < (profil.gelombang == Profil.Gelombang.GELOMBANG_1?4450000:4450000) && totalDebt > 0){
                        profil.statusPendaftaran = Profil.StatusPendaftaran.PROSES;
                    }else if(totalDebt >= (profil.gelombang == Profil.Gelombang.GELOMBANG_1?4450000:4450000)){
                        profil.statusPendaftaran = Profil.StatusPendaftaran.DAFTAR;
                    }
                    break;               
            }
       
            if(profil.statusPendaftaran!= Profil.StatusPendaftaran.BATAL){
                profil.update();
            }
        }
       }
       
       
       
       return tm;
       
   }
   
   private String getModifiedNameTipeIuran(String tipeIuran){
       String retVal ="";
       switch(tipeIuran){
        case "IPP" : retVal="IPP";
            break;
        case "IPSP" : retVal="IPSP";
            break;
        case "Attribute" : retVal ="Raport / Kartu";
            break;
        case "Buku" :   retVal = "Buku";
            break;
        case "IKS"  :   retVal = "IKS / Komputer";
            break;
        case "ILL"  :   retVal = "Iuran Lain-Lain";
            break;
        case "IPSB" :   retVal = "IPSB / MOPD";
            break;
        case "IUA"  :   retVal = "UAN";
            break;
        case "IUS"  :   retVal = "SEMESTER";
            break;
        case "OSIS" :   retVal = "OSIS";
            break;
        case "PVT"  :   retVal = "Praktek Sinematografi";
            break;
        case "Seragam"  :   retVal = "Seragam";
            break;
        case "Sumbangan"    : retVal = "Sumbangan";
            break;
        case "Tabungan" :   retVal = "Tabungan";
            break;
        default : retVal = tipeIuran;
            break;
       }
       return retVal;
   }
   
   private String getTahunAjaran(int ta){
       return String.valueOf(ta).concat(" - ").concat(String.valueOf(ta+1));
   }
   
   private TableModel buildTSumTableModel(Kalender kalS, Kalender kalE) throws SQLException, KasirException{
       String columnNames[] = {"ID", "Nama", "Tanggal", "Jumlah", "Catatan"};
       Set<TransactionSummary> setTSum = new HashSet<>();
       TransactionSummary tSum = new TransactionSummary();
       if(cbCreatedDate.isSelected() && !cbLastUpdateDate.isSelected()){
            tSum.createDateS = kalS;
            tSum.createDateE = kalE;
       }else if(!cbCreatedDate.isSelected() && cbLastUpdateDate.isSelected()){
            tSum.lastUpdateDateS = kalS;
            tSum.lastUpdateDateE = kalE;
       }else if(cbCreatedDate.isSelected() && cbLastUpdateDate.isSelected()){
            tSum.createDateS = kalS;
            tSum.createDateE = kalE;
            tSum.lastUpdateDateS = kalS;
            tSum.lastUpdateDateE = kalE;
       }else{
           tSum.createDateS = null;
       }
       
       setTSum.add(tSum);
       Map<Long, TransactionSummary> searchResultMap = Control.filterSelectTSummaries(setTSum);
       Object[][] data = new Object[searchResultMap.size()][5];
       int i = 0;
       ArrayList tSums = new ArrayList<>();
       JFormattedTextField tSumFTF = new JFormattedTextField(0.0);
       tSumFTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("Rp #,##0"))));
       if(searchResultMap.size() > 0){
        for(Map.Entry<Long, TransactionSummary> entry: searchResultMap.entrySet()){
            data[i][0]= entry.getKey().longValue();
            data[i][1]= getProfileName(entry.getValue().noInduk);
            data[i][2]= new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(entry.getValue().createDate.toDate());
            tSumFTF.setValue(entry.getValue().totalAmount);
            data[i][3]= tSumFTF.getText();
            data[i][4]= entry.getValue().note;
            
            tSums.add(entry.getValue());
            i++;
        }
       }
       TableModel tm = new DefaultTableModel(data, columnNames){
           @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false for editable
                return false;
            }
       };
       
       return tm;
       
   }
   
   private TableModel buildTSumTableModel(Profil p) throws SQLException, KasirException{
       String columnNames[] = {"ID", "Nama", "Tanggal", "Jumlah", "Catatan"};
       Set<TransactionSummary> setTSum = new HashSet<>();
       TransactionSummary tSum = new TransactionSummary();
       tSum.noInduk = p.noInduk;
       
       setTSum.add(tSum);
       Map<Long, TransactionSummary> searchResultMap = Control.filterSelectTSummaries(setTSum);
       Object[][] data = new Object[searchResultMap.size()][5];
       int i = 0;
       ArrayList tSums = new ArrayList<>();
       JFormattedTextField tSumFTF = new JFormattedTextField(0.0);
       tSumFTF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("Rp #,##0"))));
       if(searchResultMap.size() > 0){
        for(Map.Entry<Long, TransactionSummary> entry: searchResultMap.entrySet()){
            data[i][0]= entry.getKey().longValue();
            data[i][1]= getProfileName(entry.getValue().noInduk);
            data[i][2]= new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(entry.getValue().createDate.toDate());
            tSumFTF.setValue(entry.getValue().totalAmount);
            data[i][3]= tSumFTF.getText();
            data[i][4]= entry.getValue().note;
            
            tSums.add(entry.getValue());
            i++;
        }
       }
       TableModel tm = new DefaultTableModel(data, columnNames){
           @Override
            public boolean isCellEditable(int row, int column) {
                //all cells false for editable
                return false;
            }
       };
       
       return tm;
       
   }
    
   private String getProfileName(String noInduk){
       String retVal = "";
       try{
           retVal = Control.selectProfil(noInduk).biodata.nama;
       }catch(SQLException ex){
           retVal = "";
       }catch(KasirException ex){
           retVal = "";
       }
       return retVal;
   }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbCreatedDate;
    private javax.swing.JCheckBox cbLastUpdateDate;
    private datechooser.beans.DateChooserCombo dateChooserComboTSumE;
    private datechooser.beans.DateChooserCombo dateChooserComboTSumS;
    private javax.swing.JButton jButtonBatal;
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonEditDeleteProfil;
    private javax.swing.JButton jButtonInsertKasir;
    private javax.swing.JButton jButtonLapStatusPendaftaran;
    private javax.swing.JButton jButtonPrintReportKasir;
    private javax.swing.JButton jButtonRekapPenerimaan;
    private javax.swing.JButton jButtonRekapPenerimaanPerKasir;
    private javax.swing.JButton jButtonRips;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JButton jButtonSettingGL;
    private javax.swing.JButton jButtonSettingIuran;
    private javax.swing.JButton jButtonSettlement;
    private javax.swing.JButton jButtonTSum;
    private javax.swing.JButton jButtonTSumEdit;
    private javax.swing.JButton jButtonTSumPrint;
    private javax.swing.JButton jButtonTransaksi;
    private javax.swing.JButton jButtonTunggakanPasca;
    private javax.swing.JButton jButtonTunggakanPerKelas;
    private javax.swing.JComboBox jComboBoxLevel1;
    private javax.swing.JComboBox jComboBoxLevel2;
    private javax.swing.JComboBox jComboBoxLevel3;
    private javax.swing.JButton jInputSiswa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelKelas;
    private javax.swing.JLabel jLabelNamaSiswa;
    private javax.swing.JLabel jLabelNomorInduk;
    private javax.swing.JLabel jLabelSekolah;
    private javax.swing.JLabel jLabelTitle;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableInitialSearch;
    private javax.swing.JTable jTableTSum;
    private javax.swing.JTable jTableTunggakanProfil;
    private javax.swing.JTextField jTextFieldNamaSiswa;
    private javax.swing.JTextField jTextFieldNomorInduk;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JToolBar jToolBar4;
    private javax.swing.JToolBar jToolBar5;
    private javax.swing.JLabel selectedProfilTotalDebt;
    private javax.swing.JLabel selectedProfileName;
    // End of variables declaration//GEN-END:variables
    private javax.swing.table.TableModel tableModelInitialSearch;
    private javax.swing.table.TableModel tableModelTSum;
    private javax.swing.table.TableModel tableModelTunggakanProfil;
    private java.util.ArrayList<Profil> profils;
    private pelajar.Profil profil;
    private Clerk clerk;

    private void clearProfilComponents() {
        jTextFieldNamaSiswa.setText("");
        jTextFieldNomorInduk.setText("");
        jComboBoxLevel1.setSelectedIndex(0);
        jComboBoxLevel2.setSelectedIndex(0);
        jComboBoxLevel3.setSelectedIndex(0);
    }
    
    private void printDetailTunggakanPasca(Clerk cl, Profil profil) throws JRException, PrinterException, SQLException {
        
        HashMap jasperParameter = new HashMap();
        //jasperParameter.put("PARAM_CLERK_ID", Long.valueOf(cl.id));
         printout.DetailTunggakanPasca pb = new DetailTunggakanPasca();
        Connection connection = pb.establishConnection(); 
        //jasperParameter.put("Param_Level", "%".concat(jComboBoxLevel1.getSelectedItem().toString()).concat("%"));
        
        jasperParameter.put("Param_Profil_ID", profil.noInduk);
        jasperParameter.put("Param_Clerk_ID", cl.id);
        
         String fileName = "C://printout//PrintoutDetailTunggakanPasca.jrxml";
            String filetoPrint = "C://printout//PrintoutDetailTunggakanPasca.jrprint";
            String filetoFill = "C://printout//PrintoutDetailTunggakanPasca.jasper";
            //String filePdf = "C://printout//PrintOutReportPerKasir.pdf";
            String filePdf = "C://printout//PrintoutDetailTunggakanPasca.pdf";
       JasperCompileManager.compileReportToFile(fileName);
            
            
            JasperFillManager.fillReportToFile(filetoFill, jasperParameter , connection);
            JasperPrint jp = JasperFillManager.fillReport(filetoFill, jasperParameter, connection);
            JasperViewer.viewReport(jp, false);
            JasperExportManager.exportReportToPdfFile(jp, filePdf);
            JasperPrintManager.printReport(filetoPrint, true);
            
            
            jasperReport = JasperCompileManager.compileReport
        ("C://printout//PrintoutDetailTunggakanPasca.jrxml");

        // filling report with data from data source

        jasperPrint = JasperFillManager.fillReport(jasperReport,jasperParameter, connection); 
        // exporting process
        // 1- export to PDF
        JasperExportManager.exportReportToPdfFile(jasperPrint, "C://printout//PrintoutDetailTunggakanPasca.pdf");

        // 2- export to HTML
        JasperExportManager.exportReportToHtmlFile(jasperPrint, "C://printout//PrintoutDetailTunggakanPasca.html" ); 

        // 3- export to Excel sheet
        JRXlsExporter exporter = new JRXlsExporter();
        exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
        exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, "C://printout//PrintoutDetailTunggakanPasca.xls" );

        exporter.exportReport();
    }
    
    private void printPenerimaanKasKasir(Clerk cl, Kalender startDate, Kalender endDate) throws JRException, PrinterException {
                  
       
        
        
        
        // connection is the data source we used to fetch the data from
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        // jasperParameter is a Hashmap contains the parameters
        // passed from application to the jrxml layout
        HashMap jasperParameter = new HashMap();
        jasperParameter.put("Param_Clerk_ID", Long.valueOf(cl.id));
        jasperParameter.put("Param_Start_Date", startDate.toTimestamp());
        jasperParameter.put("Param_End_Date", endDate.toTimestamp());
        if(jComboBoxLevel1.getSelectedItem() != null)
        jasperParameter.put("Param_Level", "%".concat(jComboBoxLevel1.getSelectedItem().toString()).concat("%"));
        
         String fileName = "C://printout//PrintOutReportPerKasir.jrxml";
            String filetoPrint = "C://printout//PrintOutReportPerKasir.jrprint";
            String filetoFill = "C://printout//PrintOutReportPerKasir.jasper";
            //String filePdf = "C://printout//PrintOutReportPerKasir.pdf";
            String filePdf = "C://printout//PrintOutReportPerKasir.pdf";
       JasperCompileManager.compileReportToFile(fileName);
            
            
            JasperFillManager.fillReportToFile(filetoFill, jasperParameter , connection);
            JasperPrint jp = JasperFillManager.fillReport(filetoFill, jasperParameter, connection);
            JasperViewer.viewReport(jp, false);
            JasperExportManager.exportReportToPdfFile(jp, filePdf);
            JasperPrintManager.printReport(filetoPrint, true);
            
            
            jasperReport = JasperCompileManager.compileReport
        ("C://printout//PrintOutReportPerKasir.jrxml");

        // filling report with data from data source

        jasperPrint = JasperFillManager.fillReport(jasperReport,jasperParameter, connection); 
        // exporting process
        // 1- export to PDF
        JasperExportManager.exportReportToPdfFile(jasperPrint, "C://printout//PrintOutReportPerKasir.pdf");

        // 2- export to HTML
        JasperExportManager.exportReportToHtmlFile(jasperPrint, "C://printout//PrintOutReportPerKasir.html" ); 

        // 3- export to Excel sheet
        JRXlsExporter exporter = new JRXlsExporter();
        exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
        exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, "C://printout//PrintOutReportPerKasir.xls" );

        exporter.exportReport();
       
        
    }
    
    private void printRekapPenerimaan(Kalender startDate, Kalender endDate, Clerk clerk) throws JRException, PrinterException, SQLException, KasirException {
        // connection is the data source we used to fetch the data from
       
        startDate.set(Kalender.HOUR_OF_DAY, 0);
        startDate.set(Kalender.MINUTE, 0);
        startDate.set(Kalender.SECOND,0);
        
        endDate = new Kalender(startDate);
        endDate.set(Kalender.HOUR_OF_DAY, 23);
        endDate.set(Kalender.MINUTE, 59);
        endDate.set(Kalender.SECOND, 59);        
        
        Kalender cumStartDate = new Kalender(startDate);
        cumStartDate.set(Kalender.HOUR_OF_DAY, 0);
        cumStartDate.set(Kalender.MINUTE, 0);
        cumStartDate.set(Kalender.SECOND,0);
        cumStartDate.set(Kalender.DAY_OF_MONTH, 1);
        Kalender cumEndDate = new Kalender(cumStartDate);
        cumEndDate.set(Kalender.HOUR_OF_DAY, 23);
        cumEndDate.set(Kalender.MINUTE, 59);
        cumEndDate.set(Kalender.SECOND, 59);  
        cumEndDate.roll(Kalender.DATE, false);
        //endDate.set(Kalender.DAY_OF_MONTH, 31);
        List<BigDecimal> paramIPP = farmIPP(startDate,endDate,clerk);
        List<BigDecimal> paramAlmamater = farmAlmamater(startDate,endDate,clerk);
        List<BigDecimal> paramAttribute = farmAttribute(startDate,endDate,clerk);
        List<BigDecimal> paramBeasiswa = farmBeasiswa(startDate,endDate,clerk);
        List<BigDecimal> paramBeasiswaCost = farmBeasiswaCost(startDate,endDate,clerk);
        List<BigDecimal> paramBuku = farmBuku(startDate,endDate,clerk);
        List<BigDecimal> paramTunggakanPasca = farmTunggakanPasca(startDate,endDate,clerk);
        List<BigDecimal> paramIDD = farmIDD(startDate,endDate,clerk);
        List<BigDecimal> paramIKS = farmIKS(startDate,endDate,clerk);
        List<BigDecimal> paramILL = farmILL(startDate,endDate,clerk);
        List<BigDecimal> paramIPS = farmIPS(startDate,endDate,clerk);
        List<BigDecimal> paramIPSB = farmIPSB(startDate,endDate,clerk);
        List<BigDecimal> paramIPSP = farmIPSP(startDate,endDate,clerk);
        List<BigDecimal> paramIUA = farmIUA(startDate,endDate,clerk);
        List<BigDecimal> paramIUAP = farmIUAP(startDate,endDate,clerk);
        List<BigDecimal> paramIUS = farmIUS(startDate,endDate,clerk);
        List<BigDecimal> paramOSIS = farmOSIS(startDate,endDate,clerk);
        List<BigDecimal> paramPASB = farmPASB(startDate,endDate,clerk);
        List<BigDecimal> paramPVT = farmPVT(startDate,endDate,clerk);
        List<BigDecimal> paramSeragam = farmSeragam(startDate,endDate,clerk);
        List<BigDecimal> paramSumbangan = farmSumbangan(startDate,endDate,clerk);
        List<BigDecimal> paramTabungan = farmTabungan(startDate,endDate,clerk);
        
        List<BigDecimal> paramCIPP = farmIPP(cumStartDate,cumEndDate,clerk);
        List<BigDecimal> paramCAlmamater = farmAlmamater(cumStartDate,cumEndDate,clerk);
        List<BigDecimal> paramCAttribute = farmAttribute(cumStartDate,cumEndDate,clerk);
        List<BigDecimal> paramCBeasiswa = farmBeasiswa(cumStartDate,cumEndDate,clerk);
        List<BigDecimal> paramCBeasiswaCost = farmBeasiswaCost(cumStartDate,cumEndDate,clerk);
        List<BigDecimal> paramCBuku = farmBuku(cumStartDate,cumEndDate,clerk);
        List<BigDecimal> paramCTunggakanPasca = farmTunggakanPasca(cumStartDate,cumEndDate,clerk);
        List<BigDecimal> paramCIDD = farmIDD(cumStartDate,cumEndDate,clerk);
        List<BigDecimal> paramCIKS = farmIKS(cumStartDate,cumEndDate,clerk);
        List<BigDecimal> paramCILL = farmILL(cumStartDate,cumEndDate,clerk);
        List<BigDecimal> paramCIPS = farmIPS(cumStartDate,cumEndDate,clerk);
        List<BigDecimal> paramCIPSB = farmIPSB(cumStartDate,cumEndDate,clerk);
        List<BigDecimal> paramCIPSP = farmIPSP(cumStartDate,cumEndDate,clerk);
        List<BigDecimal> paramCIUA = farmIUA(cumStartDate,cumEndDate,clerk);
        List<BigDecimal> paramCIUAP = farmIUAP(cumStartDate,cumEndDate,clerk);
        List<BigDecimal> paramCIUS = farmIUS(cumStartDate,cumEndDate,clerk);
        List<BigDecimal> paramCOSIS = farmOSIS(cumStartDate,cumEndDate,clerk);
        List<BigDecimal> paramCPASB = farmPASB(cumStartDate,cumEndDate,clerk);
        List<BigDecimal> paramCPVT = farmPVT(cumStartDate,cumEndDate,clerk);
        List<BigDecimal> paramCSeragam = farmSeragam(cumStartDate,cumEndDate,clerk);
        List<BigDecimal> paramCSumbangan = farmSumbangan(cumStartDate,cumEndDate,clerk);
        List<BigDecimal> paramCTabungan = farmTabungan(cumStartDate,cumEndDate,clerk);
        
        //paramIPS jadi Jumlah
        for(int i = 0 ; i < 14; i++){
            paramIPS.set(i, paramIPP.get(i).add(paramAlmamater.get(i)).add(paramAttribute.get(i)).add(paramBeasiswa.get(i)).add(paramBuku.get(i)
            ).add(paramIDD.get(i)).add(paramIKS.get(i)).add(paramILL.get(i)).add(paramIPSB.get(i)).add(paramIPSP.get(i)).add(paramIUA.get(i)).add(paramIUAP.get(i)).add(paramIUS.get(i)
            ).add(paramOSIS.get(i)).add(paramPASB.get(i)).add(paramPVT.get(i)).add(paramSeragam.get(i)).add(paramTunggakanPasca.get(i)).add(paramTabungan.get(i)));
            
             paramCIPS.set(i, paramCIPP.get(i).add(paramCAlmamater.get(i)).add(paramCAttribute.get(i)).add(paramCBeasiswa.get(i)).add(paramCBuku.get(i)
            ).add(paramCIDD.get(i)).add(paramCIKS.get(i)).add(paramCILL.get(i)).add(paramCIPSB.get(i)).add(paramCIPSP.get(i)).add(paramCIUA.get(i)).add(paramCIUAP.get(i)).add(paramCIUS.get(i)
            ).add(paramCOSIS.get(i)).add(paramCPASB.get(i)).add(paramCPVT.get(i)).add(paramCSeragam.get(i)).add(paramCTunggakanPasca.get(i)).add(paramCTabungan.get(i)));
        }
        
        
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection();
        // jasperParameter is a Hashmap contains the parameters
        // passed from application to the jrxml layout
        BigDecimal pembagiSeribu = new BigDecimal(1000);
        HashMap jasperParameter = new HashMap();
        if(clerk==null)
            jasperParameter.put("PARAM_ISREKAP", true);
        else
            jasperParameter.put("PARAM_ISREKAP", false);
        
        jasperParameter.put("PARAM_IDCLERK", this.clerk.id);
        jasperParameter.put("PARAM_TANGGAL_TRANSAKSI", startDate.toDate());
        jasperParameter.put("PARAM_IPPSMP7", paramIPP.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPPSMP8", paramIPP.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPPSMP9", paramIPP.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPPSMPTOTAL", paramIPP.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPPSMPPASCA", paramIPP.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPPSMA10", paramIPP.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPPSMA11", paramIPP.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPPSMA12", paramIPP.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPPSMATOTAL", paramIPP.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPPSMAPASCA", paramIPP.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPPSMK10", paramIPP.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPPSMK11", paramIPP.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPPSMK12", paramIPP.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPPSMKTOTAL", paramIPP.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPPSMKPASCA", paramIPP.get(14).divide(pembagiSeribu));
        
        
        jasperParameter.put("PARAM_AlmamaterSMP7", paramAlmamater.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AlmamaterSMP8", paramAlmamater.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AlmamaterSMP9", paramAlmamater.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AlmamaterSMPTOTAL", paramAlmamater.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AlmamaterSMPPASCA", paramAlmamater.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AlmamaterSMA10", paramAlmamater.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AlmamaterSMA11", paramAlmamater.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AlmamaterSMA12", paramAlmamater.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AlmamaterSMATOTAL", paramAlmamater.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AlmamaterSMAPASCA", paramAlmamater.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AlmamaterSMK10", paramAlmamater.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AlmamaterSMK11", paramAlmamater.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AlmamaterSMK12", paramAlmamater.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AlmamaterSMKTOTAL", paramAlmamater.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AlmamaterSMKPASCA", paramAlmamater.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_AttributeSMP7", paramAttribute.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AttributeSMP8", paramAttribute.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AttributeSMP9", paramAttribute.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AttributeSMPTOTAL", paramAttribute.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AttributeSMPPASCA", paramAttribute.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AttributeSMA10", paramAttribute.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AttributeSMA11", paramAttribute.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AttributeSMA12", paramAttribute.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AttributeSMATOTAL", paramAttribute.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AttributeSMAPASCA", paramAttribute.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AttributeSMK10", paramAttribute.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AttributeSMK11", paramAttribute.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AttributeSMK12", paramAttribute.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AttributeSMKTOTAL", paramAttribute.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_AttributeSMKPASCA", paramAttribute.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_BeasiswaSMP7", paramBeasiswa.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaSMP8", paramBeasiswa.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaSMP9", paramBeasiswa.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaSMPTOTAL", paramBeasiswa.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaSMPPASCA", paramBeasiswa.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaSMA10", paramBeasiswa.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaSMA11", paramBeasiswa.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaSMA12", paramBeasiswa.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaSMATOTAL", paramBeasiswa.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaSMAPASCA", paramBeasiswa.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaSMK10", paramBeasiswa.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaSMK11", paramBeasiswa.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaSMK12", paramBeasiswa.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaSMKTOTAL", paramBeasiswa.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaSMKPASCA", paramBeasiswa.get(14).divide(pembagiSeribu));
        
        
        jasperParameter.put("PARAM_BeasiswaCostSMP7", paramBeasiswaCost.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaCostSMP8", paramBeasiswaCost.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaCostSMP9", paramBeasiswaCost.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaCostSMPTOTAL", paramBeasiswaCost.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaCostSMPPASCA", paramBeasiswaCost.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaCostSMA10", paramBeasiswaCost.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaCostSMA11", paramBeasiswaCost.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaCostSMA12", paramBeasiswaCost.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaCostSMATOTAL", paramBeasiswaCost.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaCostSMAPASCA", paramBeasiswaCost.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaCostSMK10", paramBeasiswaCost.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaCostSMK11", paramBeasiswaCost.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaCostSMK12", paramBeasiswaCost.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaCostSMKTOTAL", paramBeasiswaCost.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BeasiswaCostSMKPASCA", paramBeasiswaCost.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_BukuSMP7", paramBuku.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BukuSMP8", paramBuku.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BukuSMP9", paramBuku.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BukuSMPTOTAL", paramBuku.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BukuSMPPASCA", paramBuku.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BukuSMA10", paramBuku.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BukuSMA11", paramBuku.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BukuSMA12", paramBuku.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BukuSMATOTAL", paramBuku.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BukuSMAPASCA", paramBuku.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BukuSMK10", paramBuku.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BukuSMK11", paramBuku.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BukuSMK12", paramBuku.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BukuSMKTOTAL", paramBuku.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_BukuSMKPASCA", paramBuku.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_TunggakanPascaSMP7", paramTunggakanPasca.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TunggakanPascaSMP8", paramTunggakanPasca.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TunggakanPascaSMP9", paramTunggakanPasca.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TunggakanPascaSMPTOTAL", paramTunggakanPasca.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TunggakanPascaSMPPASCA", paramTunggakanPasca.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TunggakanPascaSMA10", paramTunggakanPasca.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TunggakanPascaSMA11", paramTunggakanPasca.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TunggakanPascaSMA12", paramTunggakanPasca.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TunggakanPascaSMATOTAL", paramTunggakanPasca.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TunggakanPascaSMAPASCA", paramTunggakanPasca.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TunggakanPascaSMK10", paramTunggakanPasca.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TunggakanPascaSMK11", paramTunggakanPasca.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TunggakanPascaSMK12", paramTunggakanPasca.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TunggakanPascaSMKTOTAL", paramTunggakanPasca.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TunggakanPascaSMKPASCA", paramTunggakanPasca.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_IDDSMP7", paramIDD.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IDDSMP8", paramIDD.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IDDSMP9", paramIDD.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IDDSMPTOTAL", paramIDD.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IDDSMPPASCA", paramIDD.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IDDSMA10", paramIDD.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IDDSMA11", paramIDD.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IDDSMA12", paramIDD.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IDDSMATOTAL", paramIDD.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IDDSMAPASCA", paramIDD.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IDDSMK10", paramIDD.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IDDSMK11", paramIDD.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IDDSMK12", paramIDD.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IDDSMKTOTAL", paramIDD.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IDDSMKPASCA", paramIDD.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_IKSSMP7", paramIKS.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IKSSMP8", paramIKS.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IKSSMP9", paramIKS.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IKSSMPTOTAL", paramIKS.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IKSSMPPASCA", paramIKS.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IKSSMA10", paramIKS.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IKSSMA11", paramIKS.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IKSSMA12", paramIKS.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IKSSMATOTAL", paramIKS.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IKSSMAPASCA", paramIKS.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IKSSMK10", paramIKS.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IKSSMK11", paramIKS.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IKSSMK12", paramIKS.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IKSSMKTOTAL", paramIKS.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IKSSMKPASCA", paramIKS.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_ILLSMP7", paramILL.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_ILLSMP8", paramILL.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_ILLSMP9", paramILL.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_ILLSMPTOTAL", paramILL.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_ILLSMPPASCA", paramILL.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_ILLSMA10", paramILL.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_ILLSMA11", paramILL.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_ILLSMA12", paramILL.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_ILLSMATOTAL", paramILL.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_ILLSMAPASCA", paramILL.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_ILLSMK10", paramILL.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_ILLSMK11", paramILL.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_ILLSMK12", paramILL.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_ILLSMKTOTAL", paramILL.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_ILLSMKPASCA", paramILL.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_IPSSMP7", paramIPS.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSSMP8", paramIPS.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSSMP9", paramIPS.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSSMPTOTAL", paramIPS.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSSMPPASCA", paramIPS.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSSMA10", paramIPS.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSSMA11", paramIPS.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSSMA12", paramIPS.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSSMATOTAL", paramIPS.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSSMAPASCA", paramIPS.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSSMK10", paramIPS.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSSMK11", paramIPS.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSSMK12", paramIPS.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSSMKTOTAL", paramIPS.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSSMKPASCA", paramIPS.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_IPSBSMP7", paramIPSB.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSBSMP8", paramIPSB.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSBSMP9", paramIPSB.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSBSMPTOTAL", paramIPSB.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSBSMPPASCA", paramIPSB.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSBSMA10", paramIPSB.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSBSMA11", paramIPSB.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSBSMA12", paramIPSB.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSBSMATOTAL", paramIPSB.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSBSMAPASCA", paramIPSB.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSBSMK10", paramIPSB.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSBSMK11", paramIPSB.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSBSMK12", paramIPSB.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSBSMKTOTAL", paramIPSB.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSBSMKPASCA", paramIPSB.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_IPSPSMP7", paramIPSP.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSPSMP8", paramIPSP.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSPSMP9", paramIPSP.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSPSMPTOTAL", paramIPSP.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSPSMPPASCA", paramIPSP.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSPSMA10", paramIPSP.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSPSMA11", paramIPSP.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSPSMA12", paramIPSP.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSPSMATOTAL", paramIPSP.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSPSMAPASCA", paramIPSP.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSPSMK10", paramIPSP.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSPSMK11", paramIPSP.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSPSMK12", paramIPSP.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSPSMKTOTAL", paramIPSP.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IPSPSMKPASCA", paramIPSP.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_IUASMP7", paramIUA.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUASMP8", paramIUA.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUASMP9", paramIUA.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUASMPTOTAL", paramIUA.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUASMPPASCA", paramIUA.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUASMA10", paramIUA.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUASMA11", paramIUA.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUASMA12", paramIUA.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUASMATOTAL", paramIUA.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUASMAPASCA", paramIUA.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUASMK10", paramIUA.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUASMK11", paramIUA.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUASMK12", paramIUA.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUASMKTOTAL", paramIUA.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUASMKPASCA", paramIUA.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_IUAPSMP7", paramIUAP.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUAPSMP8", paramIUAP.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUAPSMP9", paramIUAP.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUAPSMPTOTAL", paramIUAP.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUAPSMPPASCA", paramIUAP.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUAPSMA10", paramIUAP.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUAPSMA11", paramIUAP.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUAPSMA12", paramIUAP.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUAPSMATOTAL", paramIUAP.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUAPSMAPASCA", paramIUAP.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUAPSMK10", paramIUAP.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUAPSMK11", paramIUAP.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUAPSMK12", paramIUAP.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUAPSMKTOTAL", paramIUAP.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUAPSMKPASCA", paramIUAP.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_IUSSMP7", paramIUS.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUSSMP8", paramIUS.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUSSMP9", paramIUS.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUSSMPTOTAL", paramIUS.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUSSMPPASCA", paramIUS.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUSSMA10", paramIUS.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUSSMA11", paramIUS.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUSSMA12", paramIUS.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUSSMATOTAL", paramIUS.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUSSMAPASCA", paramIUS.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUSSMK10", paramIUS.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUSSMK11", paramIUS.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUSSMK12", paramIUS.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUSSMKTOTAL", paramIUS.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_IUSSMKPASCA", paramIUS.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_OSISSMP7", paramOSIS.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_OSISSMP8", paramOSIS.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_OSISSMP9", paramOSIS.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_OSISSMPTOTAL", paramOSIS.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_OSISSMPPASCA", paramOSIS.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_OSISSMA10", paramOSIS.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_OSISSMA11", paramOSIS.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_OSISSMA12", paramOSIS.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_OSISSMATOTAL", paramOSIS.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_OSISSMAPASCA", paramOSIS.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_OSISSMK10", paramOSIS.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_OSISSMK11", paramOSIS.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_OSISSMK12", paramOSIS.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_OSISSMKTOTAL", paramOSIS.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_OSISSMKPASCA", paramOSIS.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_PASBSMP7", paramPASB.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PASBSMP8", paramPASB.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PASBSMP9", paramPASB.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PASBSMPTOTAL", paramPASB.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PASBSMPPASCA", paramPASB.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PASBSMA10", paramPASB.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PASBSMA11", paramPASB.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PASBSMA12", paramPASB.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PASBSMATOTAL", paramPASB.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PASBSMAPASCA", paramPASB.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PASBSMK10", paramPASB.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PASBSMK11", paramPASB.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PASBSMK12", paramPASB.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PASBSMKTOTAL", paramPASB.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PASBSMKPASCA", paramPASB.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_PVTSMP7", paramPVT.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PVTSMP8", paramPVT.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PVTSMP9", paramPVT.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PVTSMPTOTAL", paramPVT.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PVTSMPPASCA", paramPVT.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PVTSMA10", paramPVT.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PVTSMA11", paramPVT.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PVTSMA12", paramPVT.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PVTSMATOTAL", paramPVT.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PVTSMAPASCA", paramPVT.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PVTSMK10", paramPVT.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PVTSMK11", paramPVT.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PVTSMK12", paramPVT.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PVTSMKTOTAL", paramPVT.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_PVTSMKPASCA", paramPVT.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_SeragamSMP7", paramSeragam.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SeragamSMP8", paramSeragam.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SeragamSMP9", paramSeragam.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SeragamSMPTOTAL", paramSeragam.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SeragamSMPPASCA", paramSeragam.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SeragamSMA10", paramSeragam.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SeragamSMA11", paramSeragam.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SeragamSMA12", paramSeragam.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SeragamSMATOTAL", paramSeragam.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SeragamSMAPASCA", paramSeragam.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SeragamSMK10", paramSeragam.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SeragamSMK11", paramSeragam.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SeragamSMK12", paramSeragam.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SeragamSMKTOTAL", paramSeragam.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SeragamSMKPASCA", paramSeragam.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_SumbanganSMP7", paramSumbangan.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SumbanganSMP8", paramSumbangan.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SumbanganSMP9", paramSumbangan.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SumbanganSMPTOTAL", paramSumbangan.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SumbanganSMPPASCA", paramSumbangan.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SumbanganSMA10", paramSumbangan.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SumbanganSMA11", paramSumbangan.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SumbanganSMA12", paramSumbangan.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SumbanganSMATOTAL", paramSumbangan.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SumbanganSMAPASCA", paramSumbangan.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SumbanganSMK10", paramSumbangan.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SumbanganSMK11", paramSumbangan.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SumbanganSMK12", paramSumbangan.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SumbanganSMKTOTAL", paramSumbangan.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_SumbanganSMKPASCA", paramSumbangan.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_TabunganSMP7", paramTabungan.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TabunganSMP8", paramTabungan.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TabunganSMP9", paramTabungan.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TabunganSMPTOTAL", paramTabungan.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TabunganSMPPASCA", paramTabungan.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TabunganSMA10", paramTabungan.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TabunganSMA11", paramTabungan.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TabunganSMA12", paramTabungan.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TabunganSMATOTAL", paramTabungan.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TabunganSMAPASCA", paramTabungan.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TabunganSMK10", paramTabungan.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TabunganSMK11", paramTabungan.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TabunganSMK12", paramTabungan.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TabunganSMKTOTAL", paramTabungan.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_TabunganSMKPASCA", paramTabungan.get(14).divide(pembagiSeribu));
         
        //CUM
        jasperParameter.put("PARAM_CIPPSMP7", paramCIPP.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPPSMP8", paramCIPP.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPPSMP9", paramCIPP.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPPSMPTOTAL", paramCIPP.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPPSMPPASCA", paramCIPP.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPPSMA10", paramCIPP.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPPSMA11", paramCIPP.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPPSMA12", paramCIPP.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPPSMATOTAL", paramCIPP.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPPSMAPASCA", paramCIPP.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPPSMK10", paramCIPP.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPPSMK11", paramCIPP.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPPSMK12", paramCIPP.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPPSMKTOTAL", paramCIPP.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPPSMKPASCA", paramCIPP.get(14).divide(pembagiSeribu));
        
        
        jasperParameter.put("PARAM_CAlmamaterSMP7", paramCAlmamater.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAlmamaterSMP8", paramCAlmamater.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAlmamaterSMP9", paramCAlmamater.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAlmamaterSMPTOTAL", paramCAlmamater.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAlmamaterSMPPASCA", paramCAlmamater.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAlmamaterSMA10", paramCAlmamater.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAlmamaterSMA11", paramCAlmamater.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAlmamaterSMA12", paramCAlmamater.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAlmamaterSMATOTAL", paramCAlmamater.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAlmamaterSMAPASCA", paramCAlmamater.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAlmamaterSMK10", paramCAlmamater.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAlmamaterSMK11", paramCAlmamater.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAlmamaterSMK12", paramCAlmamater.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAlmamaterSMKTOTAL", paramCAlmamater.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAlmamaterSMKPASCA", paramCAlmamater.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_CAttributeSMP7", paramCAttribute.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAttributeSMP8", paramCAttribute.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAttributeSMP9", paramCAttribute.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAttributeSMPTOTAL", paramCAttribute.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAttributeSMPPASCA", paramCAttribute.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAttributeSMA10", paramCAttribute.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAttributeSMA11", paramCAttribute.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAttributeSMA12", paramCAttribute.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAttributeSMATOTAL", paramCAttribute.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAttributeSMAPASCA", paramCAttribute.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAttributeSMK10", paramCAttribute.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAttributeSMK11", paramCAttribute.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAttributeSMK12", paramCAttribute.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAttributeSMKTOTAL", paramCAttribute.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CAttributeSMKPASCA", paramCAttribute.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_CBeasiswaSMP7", paramCBeasiswa.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaSMP8", paramCBeasiswa.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaSMP9", paramCBeasiswa.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaSMPTOTAL", paramCBeasiswa.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaSMPPASCA", paramCBeasiswa.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaSMA10", paramCBeasiswa.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaSMA11", paramCBeasiswa.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaSMA12", paramCBeasiswa.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaSMATOTAL", paramCBeasiswa.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaSMAPASCA", paramCBeasiswa.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaSMK10", paramCBeasiswa.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaSMK11", paramCBeasiswa.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaSMK12", paramCBeasiswa.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaSMKTOTAL", paramCBeasiswa.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaSMKPASCA", paramCBeasiswa.get(14).divide(pembagiSeribu));
        
        
        jasperParameter.put("PARAM_CBeasiswaCostSMP7", paramCBeasiswaCost.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaCostSMP8", paramCBeasiswaCost.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaCostSMP9", paramCBeasiswaCost.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaCostSMPTOTAL", paramCBeasiswaCost.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaCostSMPPASCA", paramCBeasiswaCost.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaCostSMA10", paramCBeasiswaCost.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaCostSMA11", paramCBeasiswaCost.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaCostSMA12", paramCBeasiswaCost.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaCostSMATOTAL", paramCBeasiswaCost.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaCostSMAPASCA", paramCBeasiswaCost.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaCostSMK10", paramCBeasiswaCost.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaCostSMK11", paramCBeasiswaCost.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaCostSMK12", paramCBeasiswaCost.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaCostSMKTOTAL", paramCBeasiswaCost.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBeasiswaCostSMKPASCA", paramCBeasiswaCost.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_CBukuSMP7", paramCBuku.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBukuSMP8", paramCBuku.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBukuSMP9", paramCBuku.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBukuSMPTOTAL", paramCBuku.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBukuSMPPASCA", paramCBuku.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBukuSMA10", paramCBuku.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBukuSMA11", paramCBuku.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBukuSMA12", paramCBuku.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBukuSMATOTAL", paramCBuku.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBukuSMAPASCA", paramCBuku.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBukuSMK10", paramCBuku.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBukuSMK11", paramCBuku.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBukuSMK12", paramCBuku.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBukuSMKTOTAL", paramCBuku.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CBukuSMKPASCA", paramCBuku.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_CTunggakanPascaSMP7", paramCTunggakanPasca.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTunggakanPascaSMP8", paramCTunggakanPasca.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTunggakanPascaSMP9", paramCTunggakanPasca.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTunggakanPascaSMPTOTAL", paramCTunggakanPasca.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTunggakanPascaSMPPASCA", paramCTunggakanPasca.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTunggakanPascaSMA10", paramCTunggakanPasca.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTunggakanPascaSMA11", paramCTunggakanPasca.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTunggakanPascaSMA12", paramCTunggakanPasca.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTunggakanPascaSMATOTAL", paramCTunggakanPasca.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTunggakanPascaSMAPASCA", paramCTunggakanPasca.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTunggakanPascaSMK10", paramCTunggakanPasca.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTunggakanPascaSMK11", paramCTunggakanPasca.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTunggakanPascaSMK12", paramCTunggakanPasca.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTunggakanPascaSMKTOTAL", paramCTunggakanPasca.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTunggakanPascaSMKPASCA", paramCTunggakanPasca.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_CIDDSMP7", paramCIDD.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIDDSMP8", paramCIDD.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIDDSMP9", paramCIDD.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIDDSMPTOTAL", paramCIDD.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIDDSMPPASCA", paramCIDD.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIDDSMA10", paramCIDD.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIDDSMA11", paramCIDD.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIDDSMA12", paramCIDD.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIDDSMATOTAL", paramCIDD.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIDDSMAPASCA", paramCIDD.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIDDSMK10", paramCIDD.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIDDSMK11", paramCIDD.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIDDSMK12", paramCIDD.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIDDSMKTOTAL", paramCIDD.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIDDSMKPASCA", paramCIDD.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_CIKSSMP7", paramCIKS.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIKSSMP8", paramCIKS.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIKSSMP9", paramCIKS.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIKSSMPTOTAL", paramCIKS.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIKSSMPPASCA", paramCIKS.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIKSSMA10", paramCIKS.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIKSSMA11", paramCIKS.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIKSSMA12", paramCIKS.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIKSSMATOTAL", paramCIKS.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIKSSMAPASCA", paramCIKS.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIKSSMK10", paramCIKS.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIKSSMK11", paramCIKS.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIKSSMK12", paramCIKS.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIKSSMKTOTAL", paramCIKS.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIKSSMKPASCA", paramCIKS.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_CILLSMP7", paramCILL.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CILLSMP8", paramCILL.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CILLSMP9", paramCILL.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CILLSMPTOTAL", paramCILL.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CILLSMPPASCA", paramCILL.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CILLSMA10", paramCILL.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CILLSMA11", paramCILL.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CILLSMA12", paramCILL.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CILLSMATOTAL", paramCILL.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CILLSMAPASCA", paramCILL.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CILLSMK10", paramCILL.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CILLSMK11", paramCILL.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CILLSMK12", paramCILL.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CILLSMKTOTAL", paramCILL.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CILLSMKPASCA", paramCILL.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_CIPSSMP7", paramCIPS.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSSMP8", paramCIPS.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSSMP9", paramCIPS.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSSMPTOTAL", paramCIPS.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSSMPPASCA", paramCIPS.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSSMA10", paramCIPS.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSSMA11", paramCIPS.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSSMA12", paramCIPS.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSSMATOTAL", paramCIPS.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSSMAPASCA", paramCIPS.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSSMK10", paramCIPS.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSSMK11", paramCIPS.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSSMK12", paramCIPS.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSSMKTOTAL", paramCIPS.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSSMKPASCA", paramCIPS.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_CIPSBSMP7", paramCIPSB.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSBSMP8", paramCIPSB.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSBSMP9", paramCIPSB.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSBSMPTOTAL", paramCIPSB.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSBSMPPASCA", paramCIPSB.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSBSMA10", paramCIPSB.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSBSMA11", paramCIPSB.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSBSMA12", paramCIPSB.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSBSMATOTAL", paramCIPSB.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSBSMAPASCA", paramCIPSB.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSBSMK10", paramCIPSB.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSBSMK11", paramCIPSB.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSBSMK12", paramCIPSB.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSBSMKTOTAL", paramCIPSB.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSBSMKPASCA", paramCIPSB.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_CIPSPSMP7", paramCIPSP.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSPSMP8", paramCIPSP.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSPSMP9", paramCIPSP.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSPSMPTOTAL", paramCIPSP.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSPSMPPASCA", paramCIPSP.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSPSMA10", paramCIPSP.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSPSMA11", paramCIPSP.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSPSMA12", paramCIPSP.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSPSMATOTAL", paramCIPSP.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSPSMAPASCA", paramCIPSP.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSPSMK10", paramCIPSP.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSPSMK11", paramCIPSP.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSPSMK12", paramCIPSP.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSPSMKTOTAL", paramCIPSP.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIPSPSMKPASCA", paramCIPSP.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_CIUASMP7", paramCIUA.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUASMP8", paramCIUA.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUASMP9", paramCIUA.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUASMPTOTAL", paramCIUA.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUASMPPASCA", paramCIUA.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUASMA10", paramCIUA.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUASMA11", paramCIUA.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUASMA12", paramCIUA.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUASMATOTAL", paramCIUA.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUASMAPASCA", paramCIUA.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUASMK10", paramCIUA.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUASMK11", paramCIUA.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUASMK12", paramCIUA.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUASMKTOTAL", paramCIUA.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUASMKPASCA", paramCIUA.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_CIUAPSMP7", paramCIUAP.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUAPSMP8", paramCIUAP.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUAPSMP9", paramCIUAP.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUAPSMPTOTAL", paramCIUAP.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUAPSMPPASCA", paramCIUAP.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUAPSMA10", paramCIUAP.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUAPSMA11", paramCIUAP.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUAPSMA12", paramCIUAP.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUAPSMATOTAL", paramCIUAP.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUAPSMAPASCA", paramCIUAP.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUAPSMK10", paramCIUAP.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUAPSMK11", paramCIUAP.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUAPSMK12", paramCIUAP.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUAPSMKTOTAL", paramCIUAP.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUAPSMKPASCA", paramCIUAP.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_CIUSSMP7", paramCIUS.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUSSMP8", paramCIUS.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUSSMP9", paramCIUS.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUSSMPTOTAL", paramCIUS.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUSSMPPASCA", paramCIUS.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUSSMA10", paramCIUS.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUSSMA11", paramCIUS.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUSSMA12", paramCIUS.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUSSMATOTAL", paramCIUS.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUSSMAPASCA", paramCIUS.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUSSMK10", paramCIUS.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUSSMK11", paramCIUS.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUSSMK12", paramCIUS.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUSSMKTOTAL", paramCIUS.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CIUSSMKPASCA", paramCIUS.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_COSISSMP7", paramCOSIS.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_COSISSMP8", paramCOSIS.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_COSISSMP9", paramCOSIS.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_COSISSMPTOTAL", paramCOSIS.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_COSISSMPPASCA", paramCOSIS.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_COSISSMA10", paramCOSIS.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_COSISSMA11", paramCOSIS.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_COSISSMA12", paramCOSIS.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_COSISSMATOTAL", paramCOSIS.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_COSISSMAPASCA", paramCOSIS.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_COSISSMK10", paramCOSIS.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_COSISSMK11", paramCOSIS.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_COSISSMK12", paramCOSIS.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_COSISSMKTOTAL", paramCOSIS.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_COSISSMKPASCA", paramCOSIS.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_CPASBSMP7", paramCPASB.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPASBSMP8", paramCPASB.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPASBSMP9", paramCPASB.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPASBSMPTOTAL", paramCPASB.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPASBSMPPASCA", paramCPASB.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPASBSMA10", paramCPASB.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPASBSMA11", paramCPASB.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPASBSMA12", paramCPASB.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPASBSMATOTAL", paramCPASB.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPASBSMAPASCA", paramCPASB.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPASBSMK10", paramCPASB.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPASBSMK11", paramCPASB.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPASBSMK12", paramCPASB.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPASBSMKTOTAL", paramCPASB.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPASBSMKPASCA", paramCPASB.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_CPVTSMP7", paramCPVT.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPVTSMP8", paramCPVT.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPVTSMP9", paramCPVT.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPVTSMPTOTAL", paramCPVT.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPVTSMPPASCA", paramCPVT.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPVTSMA10", paramCPVT.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPVTSMA11", paramCPVT.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPVTSMA12", paramCPVT.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPVTSMATOTAL", paramCPVT.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPVTSMAPASCA", paramCPVT.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPVTSMK10", paramCPVT.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPVTSMK11", paramCPVT.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPVTSMK12", paramCPVT.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPVTSMKTOTAL", paramCPVT.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CPVTSMKPASCA", paramCPVT.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_CSeragamSMP7", paramCSeragam.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSeragamSMP8", paramCSeragam.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSeragamSMP9", paramCSeragam.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSeragamSMPTOTAL", paramCSeragam.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSeragamSMPPASCA", paramCSeragam.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSeragamSMA10", paramCSeragam.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSeragamSMA11", paramCSeragam.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSeragamSMA12", paramCSeragam.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSeragamSMATOTAL", paramCSeragam.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSeragamSMAPASCA", paramCSeragam.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSeragamSMK10", paramCSeragam.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSeragamSMK11", paramCSeragam.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSeragamSMK12", paramCSeragam.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSeragamSMKTOTAL", paramCSeragam.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSeragamSMKPASCA", paramCSeragam.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_CSumbanganSMP7", paramCSumbangan.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSumbanganSMP8", paramCSumbangan.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSumbanganSMP9", paramCSumbangan.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSumbanganSMPTOTAL", paramCSumbangan.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSumbanganSMPPASCA", paramCSumbangan.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSumbanganSMA10", paramCSumbangan.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSumbanganSMA11", paramCSumbangan.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSumbanganSMA12", paramCSumbangan.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSumbanganSMATOTAL", paramCSumbangan.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSumbanganSMAPASCA", paramCSumbangan.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSumbanganSMK10", paramCSumbangan.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSumbanganSMK11", paramCSumbangan.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSumbanganSMK12", paramCSumbangan.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSumbanganSMKTOTAL", paramCSumbangan.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CSumbanganSMKPASCA", paramCSumbangan.get(14).divide(pembagiSeribu));
        
        jasperParameter.put("PARAM_CTabunganSMP7", paramCTabungan.get(0).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTabunganSMP8", paramCTabungan.get(1).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTabunganSMP9", paramCTabungan.get(2).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTabunganSMPTOTAL", paramCTabungan.get(3).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTabunganSMPPASCA", paramCTabungan.get(4).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTabunganSMA10", paramCTabungan.get(5).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTabunganSMA11", paramCTabungan.get(6).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTabunganSMA12", paramCTabungan.get(7).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTabunganSMATOTAL", paramCTabungan.get(8).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTabunganSMAPASCA", paramCTabungan.get(9).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTabunganSMK10", paramCTabungan.get(10).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTabunganSMK11", paramCTabungan.get(11).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTabunganSMK12", paramCTabungan.get(12).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTabunganSMKTOTAL", paramCTabungan.get(13).divide(pembagiSeribu));
        jasperParameter.put("PARAM_CTabunganSMKPASCA", paramCTabungan.get(14).divide(pembagiSeribu));
        
        String fileName = "C://printout//PrintOutRekapPenerimaan.jrxml";
        String filetoPrint = "C://printout//PrintOutRekapPenerimaan.jrprint";
        String filetoFill = "C://printout//PrintOutRekapPenerimaan.jasper";
        //String filePdf = "C://printout//PrintOutRekapPenerimaan.pdf";
        String filePdf = "C://printout//PrintOutRekapPenerimaan.pdf";
        JasperCompileManager.compileReportToFile(fileName);
        JasperFillManager.fillReportToFile(filetoFill, jasperParameter , connection);
        JasperPrint jp = JasperFillManager.fillReport(filetoFill, jasperParameter, connection);
        JasperViewer.viewReport(jp, false);
        JasperExportManager.exportReportToPdfFile(jp, filePdf);
        JasperPrintManager.printReport(filetoPrint, true);
        jasperReport = JasperCompileManager.compileReport
        ("C://printout//PrintOutRekapPenerimaan.jrxml");
     
        // filling report with data from data source
        jasperPrint = JasperFillManager.fillReport(jasperReport,jasperParameter, connection); 
        // exporting process
        // 1- export to PDF
        JasperExportManager.exportReportToPdfFile(jasperPrint, "C://printout//PrintOutRekapPenerimaan.pdf");

        // 2- export to HTML
        JasperExportManager.exportReportToHtmlFile(jasperPrint, "C://printout//PrintOutRekapPenerimaan.html" ); 

        // 3- export to Excel sheet
        JRXlsExporter exporter = new JRXlsExporter();
        exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
        exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, "C://printout//PrintOutRekapPenerimaan.xls" );

        exporter.exportReport();
                
    }
    
    public void printStatusPendaftaran(Clerk cl) throws JRException, PrinterException, SQLException {
        ArrayList<Profil> smpProfils = new ArrayList();
        ArrayList<Profil> smaProfils = new ArrayList();     
        ArrayList<Profil> smkProfils = new ArrayList();
        ArrayList<Profil> dirtySmpProfils = new ArrayList();
        ArrayList<Profil> dirtySmaProfils = new ArrayList();     
        ArrayList<Profil> dirtySmkProfils = new ArrayList();     
        try {
            String curYear = String.valueOf(Kalender.getInstance().get(Calendar.YEAR));
            smpProfils = Profil.selectS("SMP-7-1-".concat(curYear));
            dirtySmpProfils.addAll(smpProfils);
            smpProfils.clear();
            for(int fi=0; fi<dirtySmpProfils.size(); fi++){
                if(dirtySmpProfils.get(fi).noInduk.toString().startsWith("P")){
                    smpProfils.add(dirtySmpProfils.get(fi));
                }
            }
            smaProfils = Profil.selectS("SMA-10-1-".concat(curYear));
            dirtySmaProfils.addAll(smaProfils);
            smaProfils.clear();
            for(int fi=0; fi<dirtySmaProfils.size(); fi++){
                if(dirtySmaProfils.get(fi).noInduk.toString().startsWith("A")){
                    smaProfils.add(dirtySmaProfils.get(fi));
                }
            }
            smkProfils = Profil.selectS("SMK-10-1-".concat(curYear));
            dirtySmkProfils.addAll(smkProfils);
            smkProfils.clear();
            for(int fi=0; fi<dirtySmkProfils.size(); fi++){
                if(dirtySmkProfils.get(fi).noInduk.toString().startsWith("K")){
                    smkProfils.add(dirtySmkProfils.get(fi));
                }
            }
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }
        // connection is the data source we used to fetch the data from
        printout.StatusPendaftaran pb = new StatusPendaftaran();
        Connection connection = pb.establishConnection(); 
        int smpdaftar=0, smpproses=0, smplunas=0, smpbatal=0, smadaftar=0, smaproses=0, smalunas=0, smabatal=0, smkdaftar=0, smkproses=0, smklunas=0, smkbatal=0;
        int smpdaftar1=0, smpproses1=0, smplunas1=0, smpbatal1=0, smadaftar1=0, smaproses1=0, smalunas1=0, smabatal1=0, smkdaftar1=0, smkproses1=0, smklunas1=0, smkbatal1=0;
        int smpdaftar2=0, smpproses2=0, smplunas2=0, smpbatal2=0, smadaftar2=0, smaproses2=0, smalunas2=0, smabatal2=0, smkdaftar2=0, smkproses2=0, smklunas2=0, smkbatal2=0;
        int smprombel=0, smpisi=0, smarombel=0, smaisi=0, smkrombel=0, smkisi=0;
        Statement stmt = null;
        
        stmt = connection.createStatement();
        String sql;
        sql = "SELECT * FROM rusly_ppdbdb.Rombel";
        ResultSet rs = stmt.executeQuery(sql);
        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           if(rs.getString("Sekolah").equals("SMP")){
               smprombel = rs.getInt("Rombel");
               smpisi = rs.getInt("Isi");
           }else if(rs.getString("Sekolah").equals("SMA")){
               smarombel = rs.getInt("Rombel");
               smaisi = rs.getInt("Isi");
           }else if(rs.getString("Sekolah").equals("SMK")){
               smkrombel = rs.getInt("Rombel");
               smkisi = rs.getInt("Isi");
           }
        }
        //STEP 4: Execute a query
        /*
        stmt = connection.createStatement();
        String sql;
        sql = "SELECT COUNT(\"\") AS LADEK FROM rusly_ppdbdb.Profil WHERE CurrentLevel LIKE '%SMP%' AND StatusPendaftaran LIKE '%DAFTAR%'";
        ResultSet rs = stmt.executeQuery(sql);
        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           smpdaftar  = rs.getInt("LADEK");
        }
        sql = "SELECT COUNT(\"\") AS LADEK FROM rusly_ppdbdb.Profil WHERE CurrentLevel LIKE '%SMP%' AND StatusPendaftaran LIKE '%PROSES%'";
        rs = stmt.executeQuery(sql);
        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           smpproses  = rs.getInt("LADEK");
        }                
        sql = "SELECT COUNT(\"\") AS LADEK FROM rusly_ppdbdb.Profil WHERE CurrentLevel LIKE '%SMP%' AND StatusPendaftaran LIKE '%LUNAS%'";
        rs = stmt.executeQuery(sql);
        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           smplunas  = rs.getInt("LADEK");
        }
        sql = "SELECT COUNT(\"\") AS LADEK FROM rusly_ppdbdb.Profil WHERE CurrentLevel LIKE '%SMP%' AND StatusPendaftaran LIKE '%BATAL%'";
        rs = stmt.executeQuery(sql);
        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           smpbatal = rs.getInt("LADEK");
        }  
        //SMA
        sql = "SELECT COUNT(\"\") AS LADEK FROM rusly_ppdbdb.Profil WHERE CurrentLevel LIKE '%SMA%' AND StatusPendaftaran LIKE '%DAFTAR%'";
        rs = stmt.executeQuery(sql);
        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           smadaftar  = rs.getInt("LADEK");
        }
        sql = "SELECT COUNT(\"\") AS LADEK FROM rusly_ppdbdb.Profil WHERE CurrentLevel LIKE '%SMA%' AND StatusPendaftaran LIKE '%PROSES%'";
        rs = stmt.executeQuery(sql);
        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           smaproses  = rs.getInt("LADEK");
        }                
        sql = "SELECT COUNT(\"\") AS LADEK FROM rusly_ppdbdb.Profil WHERE CurrentLevel LIKE '%SMA%' AND StatusPendaftaran LIKE '%LUNAS%'";
        rs = stmt.executeQuery(sql);
        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           smalunas  = rs.getInt("LADEK");
        }
        sql = "SELECT COUNT(\"\") AS LADEK FROM rusly_ppdbdb.Profil WHERE CurrentLevel LIKE '%SMA%' AND StatusPendaftaran LIKE '%BATAL%'";
        rs = stmt.executeQuery(sql);
        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           smabatal = rs.getInt("LADEK");
        }
        //SMK
        sql = "SELECT COUNT(\"\") AS LADEK FROM rusly_ppdbdb.Profil WHERE CurrentLevel LIKE '%SMK%' AND StatusPendaftaran LIKE '%DAFTAR%'";
        rs = stmt.executeQuery(sql);
        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           smkdaftar  = rs.getInt("LADEK");
        }
        sql = "SELECT COUNT(\"\") AS LADEK FROM rusly_ppdbdb.Profil WHERE CurrentLevel LIKE '%SMK%' AND StatusPendaftaran LIKE '%PROSES%'";
        rs = stmt.executeQuery(sql);
        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           smkproses  = rs.getInt("LADEK");
        }                
        sql = "SELECT COUNT(\"\") AS LADEK FROM rusly_ppdbdb.Profil WHERE CurrentLevel LIKE '%SMK%' AND StatusPendaftaran LIKE '%LUNAS%'";
        rs = stmt.executeQuery(sql);
        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           smklunas  = rs.getInt("LADEK");
        }
        sql = "SELECT COUNT(\"\") AS LADEK FROM rusly_ppdbdb.Profil WHERE CurrentLevel LIKE '%SMK%' AND StatusPendaftaran LIKE '%BATAL%'";
        rs = stmt.executeQuery(sql);
        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           smkbatal = rs.getInt("LADEK");
        }  
        
        */
        
        //Using Marbun's Legacy
        for(int i = 0 ; i < smpProfils.size() ; i++){
            if(smpProfils.get(i).gelombang == Profil.Gelombang.GELOMBANG_1){
                if(smpProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.DAFTAR){
                    smpdaftar1++;
                }else if(smpProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.PROSES){
                    smpproses1++;
                }else if(smpProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.LUNAS){
                    smplunas1++;
                }else if(smpProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.BATAL){
                    smpbatal1++;
                }
            }else if (smpProfils.get(i).gelombang == Profil.Gelombang.GELOMBANG_2){
                if(smpProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.DAFTAR){
                    smpdaftar2++;
                }else if(smpProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.PROSES){
                    smpproses2++;
                }else if(smpProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.LUNAS){
                    smplunas2++;
                }else if(smpProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.BATAL){
                    smpbatal2++;
                }
            }
        }
        smpdaftar = smpdaftar1 + smpdaftar2;
        smpproses = smpproses1 + smpproses2;
        smplunas = smplunas1 + smplunas2;
        smpbatal = smpbatal1 + smpbatal2;
        
        for(int i = 0 ; i < smaProfils.size() ; i++){
            if(smaProfils.get(i).gelombang == Profil.Gelombang.GELOMBANG_1){
                if(smaProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.DAFTAR){
                    smadaftar1++;
                }else if(smaProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.PROSES){
                    smaproses1++;
                }else if(smaProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.LUNAS){
                    smalunas1++;
                }else if(smaProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.BATAL){
                    smabatal1++;
                }
            }else if (smaProfils.get(i).gelombang == Profil.Gelombang.GELOMBANG_2){
                if(smaProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.DAFTAR){
                    smadaftar2++;
                }else if(smaProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.PROSES){
                    smaproses2++;
                }else if(smaProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.LUNAS){
                    smalunas2++;
                }else if(smaProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.BATAL){
                    smabatal2++;
                }
            }
        }
        smadaftar = smadaftar1 + smadaftar2;
        smaproses = smaproses1 + smaproses2;
        smalunas = smalunas1 + smalunas2;
        smabatal = smabatal1 + smabatal2;
        
        
        for(int i = 0 ; i < smkProfils.size() ; i++){
            if(smkProfils.get(i).gelombang == Profil.Gelombang.GELOMBANG_1){
                if(smkProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.DAFTAR){
                    smkdaftar1++;
                }else if(smkProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.PROSES){
                    smkproses1++;
                }else if(smkProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.LUNAS){
                    smklunas1++;
                }else if(smkProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.BATAL){
                    smkbatal1++;
                }
            }else if (smkProfils.get(i).gelombang == Profil.Gelombang.GELOMBANG_2){
                if(smkProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.DAFTAR){
                    smkdaftar2++;
                }else if(smkProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.PROSES){
                    smkproses2++;
                }else if(smkProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.LUNAS){
                    smklunas2++;
                }else if(smkProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.BATAL){
                    smkbatal2++;
                }
            }
        }
        smkdaftar = smkdaftar1 + smkdaftar2;
        smkproses = smkproses1 + smkproses2;
        smklunas = smklunas1 + smklunas2;
        smkbatal = smkbatal1 + smkbatal2;
        // jasperParameter is a Hashmap contains the parameters
        // passed from application to the jrxml layout
        HashMap jasperParameter = new HashMap();
        jasperParameter.put("PARAM_CLERK_ID", Long.valueOf(cl.id));
        if(jComboBoxLevel1.getSelectedItem() != null)
        jasperParameter.put("Param_Level", "%".concat(jComboBoxLevel1.getSelectedItem().toString()).concat("%"));
        
        jasperParameter.put("PARAM_SMPDAFTAR", smpdaftar);
        jasperParameter.put("PARAM_SMPPROSES", smpproses);
        jasperParameter.put("PARAM_SMPLUNAS", smplunas);
        jasperParameter.put("PARAM_SMPBATAL", smpbatal);
        jasperParameter.put("PARAM_SMADAFTAR", smadaftar);
        jasperParameter.put("PARAM_SMAPROSES", smaproses);
        jasperParameter.put("PARAM_SMALUNAS", smalunas);
        jasperParameter.put("PARAM_SMABATAL", smabatal);
        jasperParameter.put("PARAM_SMKDAFTAR", smkdaftar);
        jasperParameter.put("PARAM_SMKPROSES", smkproses);
        jasperParameter.put("PARAM_SMKLUNAS", smklunas);
        jasperParameter.put("PARAM_SMKBATAL", smkbatal);
        
        jasperParameter.put("PARAM_SMPDAFTAR_1", smpdaftar1);
        jasperParameter.put("PARAM_SMPPROSES_1", smpproses1);
        jasperParameter.put("PARAM_SMPLUNAS_1", smplunas1);
        jasperParameter.put("PARAM_SMPBATAL_1", smpbatal1);
        jasperParameter.put("PARAM_SMADAFTAR_1", smadaftar1);
        jasperParameter.put("PARAM_SMAPROSES_1", smaproses1);
        jasperParameter.put("PARAM_SMALUNAS_1", smalunas1);
        jasperParameter.put("PARAM_SMABATAL_1", smabatal1);
        jasperParameter.put("PARAM_SMKDAFTAR_1", smkdaftar1);
        jasperParameter.put("PARAM_SMKPROSES_1", smkproses1);
        jasperParameter.put("PARAM_SMKLUNAS_1", smklunas1);
        jasperParameter.put("PARAM_SMKBATAL_1", smkbatal1);
        
        jasperParameter.put("PARAM_SMPDAFTAR_2", smpdaftar2);
        jasperParameter.put("PARAM_SMPPROSES_2", smpproses2);
        jasperParameter.put("PARAM_SMPLUNAS_2", smplunas2);
        jasperParameter.put("PARAM_SMPBATAL_2", smpbatal2);
        jasperParameter.put("PARAM_SMADAFTAR_2", smadaftar2);
        jasperParameter.put("PARAM_SMAPROSES_2", smaproses2);
        jasperParameter.put("PARAM_SMALUNAS_2", smalunas2);
        jasperParameter.put("PARAM_SMABATAL_2", smabatal2);
        jasperParameter.put("PARAM_SMKDAFTAR_2", smkdaftar2);
        jasperParameter.put("PARAM_SMKPROSES_2", smkproses2);
        jasperParameter.put("PARAM_SMKLUNAS_2", smklunas2);
        jasperParameter.put("PARAM_SMKBATAL_2", smkbatal2);
        
        jasperParameter.put("PARAM_SMPROMBEL", smprombel);
        jasperParameter.put("PARAM_SMAROMBEL", smarombel);
        jasperParameter.put("PARAM_SMKROMBEL", smkrombel);
        jasperParameter.put("PARAM_SMPISI", smpisi);
        jasperParameter.put("PARAM_SMAISI", smaisi);
        jasperParameter.put("PARAM_SMKISI", smkisi);
        jasperParameter.put("PARAM_KURSISMP", (smprombel*smpisi)-smpproses-smplunas);
        jasperParameter.put("PARAM_KURSISMA", (smarombel*smaisi)-smaproses-smalunas);
        jasperParameter.put("PARAM_KURSISMK", (smkrombel*smkisi)-smkproses-smklunas);
        
         String fileName = "C://printout//PrintOutStatusPendaftaran.jrxml";
            String filetoPrint = "C://printout//PrintOutStatusPendaftaran.jrprint";
            String filetoFill = "C://printout//PrintOutStatusPendaftaran.jasper";
            //String filePdf = "C://printout//PrintOutReportPerKasir.pdf";
            String filePdf = "C://printout//PrintOutStatusPendaftaran.pdf";
       JasperCompileManager.compileReportToFile(fileName);
            
            
            JasperFillManager.fillReportToFile(filetoFill, jasperParameter , connection);
            JasperPrint jp = JasperFillManager.fillReport(filetoFill, jasperParameter, connection);
            JasperViewer.viewReport(jp, false);
            JasperExportManager.exportReportToPdfFile(jp, filePdf);
            JasperPrintManager.printReport(filetoPrint, true);
            
            
            jasperReport = JasperCompileManager.compileReport
        ("C://printout//PrintOutStatusPendaftaran.jrxml");

        // filling report with data from data source

        jasperPrint = JasperFillManager.fillReport(jasperReport,jasperParameter, connection); 
        // exporting process
        // 1- export to PDF
        JasperExportManager.exportReportToPdfFile(jasperPrint, "C://printout//PrintOutStatusPendaftaran.pdf");

        // 2- export to HTML
        JasperExportManager.exportReportToHtmlFile(jasperPrint, "C://printout//PrintOutStatusPendaftaran.html" ); 

        // 3- export to Excel sheet
        JRXlsExporter exporter = new JRXlsExporter();
        exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
        exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, "C://printout//PrintOutStatusPendaftaran.xls" );

        exporter.exportReport();
    }
    
    public void printDetailStatusPendaftaran(Clerk cl, String statusPendaftaran) throws JRException, PrinterException, SQLException {
        
        HashMap jasperParameter = new HashMap();
        //jasperParameter.put("PARAM_CLERK_ID", Long.valueOf(cl.id));
         printout.StatusPendaftaran pb = new StatusPendaftaran();
        Connection connection = pb.establishConnection(); 
        //jasperParameter.put("Param_Level", "%".concat(jComboBoxLevel1.getSelectedItem().toString()).concat("%"));
        
        jasperParameter.put("Param_StatusPendaftaran0", statusPendaftaran);
        jasperParameter.put("Param_StatusPendaftaran1", statusPendaftaran);
        jasperParameter.put("Param_ClerkName", cl.nama);
        
         String fileName = "C://printout//PrintOutDetailStatusPendaftaran.jrxml";
            String filetoPrint = "C://printout//PrintOutDetailStatusPendaftaran.jrprint";
            String filetoFill = "C://printout//PrintOutDetailStatusPendaftaran.jasper";
            //String filePdf = "C://printout//PrintOutReportPerKasir.pdf";
            String filePdf = "C://printout//PrintOutDetailStatusPendaftaran.pdf";
       JasperCompileManager.compileReportToFile(fileName);
            
            
            JasperFillManager.fillReportToFile(filetoFill, jasperParameter , connection);
            JasperPrint jp = JasperFillManager.fillReport(filetoFill, jasperParameter, connection);
            JasperViewer.viewReport(jp, false);
            JasperExportManager.exportReportToPdfFile(jp, filePdf);
            JasperPrintManager.printReport(filetoPrint, true);
            
            
            jasperReport = JasperCompileManager.compileReport
        ("C://printout//PrintOutDetailStatusPendaftaran.jrxml");

        // filling report with data from data source

        jasperPrint = JasperFillManager.fillReport(jasperReport,jasperParameter, connection); 
        // exporting process
        // 1- export to PDF
        JasperExportManager.exportReportToPdfFile(jasperPrint, "C://printout//PrintOutDetailStatusPendaftaran.pdf");

        // 2- export to HTML
        JasperExportManager.exportReportToHtmlFile(jasperPrint, "C://printout//PrintOutDetailStatusPendaftaran.html" ); 

        // 3- export to Excel sheet
        JRXlsExporter exporter = new JRXlsExporter();
        exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
        exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, "C://printout//PrintOutDetailStatusPendaftaran.xls" );

        exporter.exportReport();
    }
    
    public void printDetailBeritaAcara(Clerk cl, String statusPendaftaran) throws JRException, PrinterException, SQLException {
        
        HashMap jasperParameter = new HashMap();
        //jasperParameter.put("PARAM_CLERK_ID", Long.valueOf(cl.id));
         printout.StatusPendaftaran pb = new StatusPendaftaran();
        Connection connection = pb.establishConnection(); 
        //jasperParameter.put("Param_Level", "%".concat(jComboBoxLevel1.getSelectedItem().toString()).concat("%"));
        
        jasperParameter.put("Param_StatusPendaftaran0", statusPendaftaran);
        jasperParameter.put("Param_ClerkName", cl.nama);
        
         String fileName = "C://printout//PrintOutBeritaAcaralStatusPendaftaran.jrxml";
            String filetoPrint = "C://printout//PrintOutBeritaAcaralStatusPendaftaran.jrprint";
            String filetoFill = "C://printout//PrintOutBeritaAcaralStatusPendaftaran.jasper";
            //String filePdf = "C://printout//PrintOutReportPerKasir.pdf";
            String filePdf = "C://printout//PrintOutBeritaAcaralStatusPendaftaran.pdf";
       JasperCompileManager.compileReportToFile(fileName);
            
            
            JasperFillManager.fillReportToFile(filetoFill, jasperParameter , connection);
            JasperPrint jp = JasperFillManager.fillReport(filetoFill, jasperParameter, connection);
            JasperViewer.viewReport(jp, false);
            JasperExportManager.exportReportToPdfFile(jp, filePdf);
            JasperPrintManager.printReport(filetoPrint, true);
            
            
            jasperReport = JasperCompileManager.compileReport
        ("C://printout//PrintOutBeritaAcaralStatusPendaftaran.jrxml");

        // filling report with data from data source

        jasperPrint = JasperFillManager.fillReport(jasperReport,jasperParameter, connection); 
        // exporting process
        // 1- export to PDF
        JasperExportManager.exportReportToPdfFile(jasperPrint, "C://printout//PrintOutBeritaAcaralStatusPendaftaran.pdf");

        // 2- export to HTML
        JasperExportManager.exportReportToHtmlFile(jasperPrint, "C://printout//PrintOutBeritaAcaralStatusPendaftaran.html" ); 

        // 3- export to Excel sheet
        JRXlsExporter exporter = new JRXlsExporter();
        exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
        exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, "C://printout//PrintOutBeritaAcaralStatusPendaftaran.xls" );

        exporter.exportReport();
    }
    
    public void printRekapBeritaAcara(Clerk cl) throws JRException, PrinterException, SQLException, KasirException {
        ArrayList<Profil> smpProfils = new ArrayList();
        ArrayList<Profil> smaProfils = new ArrayList();     
        ArrayList<Profil> smkProfils = new ArrayList();
        BigDecimal smaIppDaftar=BigDecimal.ZERO, smaIpspDaftar=BigDecimal.ZERO, smaIksDaftar=BigDecimal.ZERO, smaPasbDaftar=BigDecimal.ZERO, smaIpsbDaftar=BigDecimal.ZERO, smaSeragamDaftar=BigDecimal.ZERO, smaOsisDaftar=BigDecimal.ZERO, smaAttributeDaftar = BigDecimal.ZERO;
        BigDecimal smaIppProses=BigDecimal.ZERO, smaIpspProses=BigDecimal.ZERO, smaIksProses=BigDecimal.ZERO, smaPasbProses=BigDecimal.ZERO, smaIpsbProses=BigDecimal.ZERO, smaSeragamProses=BigDecimal.ZERO, smaOsisProses=BigDecimal.ZERO, smaAttributeProses = BigDecimal.ZERO;
        BigDecimal smaIppLunas=BigDecimal.ZERO, smaIpspLunas=BigDecimal.ZERO, smaIksLunas=BigDecimal.ZERO, smaPasbLunas=BigDecimal.ZERO, smaIpsbLunas=BigDecimal.ZERO, smaSeragamLunas=BigDecimal.ZERO, smaOsisLunas=BigDecimal.ZERO, smaAttributeLunas = BigDecimal.ZERO;
        BigDecimal smaIppBatal=BigDecimal.ZERO, smaIpspBatal=BigDecimal.ZERO, smaIksBatal=BigDecimal.ZERO, smaPasbBatal=BigDecimal.ZERO, smaIpsbBatal=BigDecimal.ZERO, smaSeragamBatal=BigDecimal.ZERO, smaOsisBatal=BigDecimal.ZERO, smaAttributeBatal = BigDecimal.ZERO;
        BigDecimal smpIppDaftar=BigDecimal.ZERO, smpIpspDaftar=BigDecimal.ZERO, smpIksDaftar=BigDecimal.ZERO, smpPasbDaftar=BigDecimal.ZERO, smpIpsbDaftar=BigDecimal.ZERO, smpSeragamDaftar=BigDecimal.ZERO, smpOsisDaftar=BigDecimal.ZERO, smpAttributeDaftar = BigDecimal.ZERO;
        BigDecimal smpIppProses=BigDecimal.ZERO, smpIpspProses=BigDecimal.ZERO, smpIksProses=BigDecimal.ZERO, smpPasbProses=BigDecimal.ZERO, smpIpsbProses=BigDecimal.ZERO, smpSeragamProses=BigDecimal.ZERO, smpOsisProses=BigDecimal.ZERO, smpAttributeProses = BigDecimal.ZERO;
        BigDecimal smpIppLunas=BigDecimal.ZERO, smpIpspLunas=BigDecimal.ZERO, smpIksLunas=BigDecimal.ZERO, smpPasbLunas=BigDecimal.ZERO, smpIpsbLunas=BigDecimal.ZERO, smpSeragamLunas=BigDecimal.ZERO, smpOsisLunas=BigDecimal.ZERO, smpAttributeLunas = BigDecimal.ZERO;
        BigDecimal smpIppBatal=BigDecimal.ZERO, smpIpspBatal=BigDecimal.ZERO, smpIksBatal=BigDecimal.ZERO, smpPasbBatal=BigDecimal.ZERO, smpIpsbBatal=BigDecimal.ZERO, smpSeragamBatal=BigDecimal.ZERO, smpOsisBatal=BigDecimal.ZERO, smpAttributeBatal = BigDecimal.ZERO;
        BigDecimal smkIppDaftar=BigDecimal.ZERO, smkIpspDaftar=BigDecimal.ZERO, smkIksDaftar=BigDecimal.ZERO, smkPasbDaftar=BigDecimal.ZERO, smkIpsbDaftar=BigDecimal.ZERO, smkSeragamDaftar=BigDecimal.ZERO, smkOsisDaftar=BigDecimal.ZERO, smkAttributeDaftar=BigDecimal.ZERO, smkAlmamaterDaftar=BigDecimal.ZERO, smkPvtDaftar = BigDecimal.ZERO;
        BigDecimal smkIppProses=BigDecimal.ZERO, smkIpspProses=BigDecimal.ZERO, smkIksProses=BigDecimal.ZERO, smkPasbProses=BigDecimal.ZERO, smkIpsbProses=BigDecimal.ZERO, smkSeragamProses=BigDecimal.ZERO, smkOsisProses=BigDecimal.ZERO, smkAttributeProses=BigDecimal.ZERO, smkAlmamaterProses=BigDecimal.ZERO, smkPvtProses = BigDecimal.ZERO;
        BigDecimal smkIppLunas=BigDecimal.ZERO, smkIpspLunas=BigDecimal.ZERO, smkIksLunas=BigDecimal.ZERO, smkPasbLunas=BigDecimal.ZERO, smkIpsbLunas=BigDecimal.ZERO, smkSeragamLunas=BigDecimal.ZERO, smkOsisLunas=BigDecimal.ZERO, smkAttributeLunas=BigDecimal.ZERO, smkAlmamaterLunas=BigDecimal.ZERO, smkPvtLunas = BigDecimal.ZERO;
        BigDecimal smkIppBatal=BigDecimal.ZERO, smkIpspBatal=BigDecimal.ZERO, smkIksBatal=BigDecimal.ZERO, smkPasbBatal=BigDecimal.ZERO, smkIpsbBatal=BigDecimal.ZERO, smkSeragamBatal=BigDecimal.ZERO, smkOsisBatal=BigDecimal.ZERO, smkAttributeBatal=BigDecimal.ZERO, smkAlmamaterBatal=BigDecimal.ZERO, smkPvtBatal = BigDecimal.ZERO;
        
        BigDecimal smaIppDaftar1=BigDecimal.ZERO, smaIpspDaftar1=BigDecimal.ZERO, smaIksDaftar1=BigDecimal.ZERO, smaPasbDaftar1=BigDecimal.ZERO, smaIpsbDaftar1=BigDecimal.ZERO, smaSeragamDaftar1=BigDecimal.ZERO, smaOsisDaftar1=BigDecimal.ZERO, smaAttributeDaftar1= BigDecimal.ZERO;
        BigDecimal smaIppProses1=BigDecimal.ZERO, smaIpspProses1=BigDecimal.ZERO, smaIksProses1=BigDecimal.ZERO, smaPasbProses1=BigDecimal.ZERO, smaIpsbProses1=BigDecimal.ZERO, smaSeragamProses1=BigDecimal.ZERO, smaOsisProses1=BigDecimal.ZERO, smaAttributeProses1= BigDecimal.ZERO;
        BigDecimal smaIppLunas1=BigDecimal.ZERO, smaIpspLunas1=BigDecimal.ZERO, smaIksLunas1=BigDecimal.ZERO, smaPasbLunas1=BigDecimal.ZERO, smaIpsbLunas1=BigDecimal.ZERO, smaSeragamLunas1=BigDecimal.ZERO, smaOsisLunas1=BigDecimal.ZERO, smaAttributeLunas1= BigDecimal.ZERO;
        BigDecimal smaIppBatal1=BigDecimal.ZERO, smaIpspBatal1=BigDecimal.ZERO, smaIksBatal1=BigDecimal.ZERO, smaPasbBatal1=BigDecimal.ZERO, smaIpsbBatal1=BigDecimal.ZERO, smaSeragamBatal1=BigDecimal.ZERO, smaOsisBatal1=BigDecimal.ZERO, smaAttributeBatal1= BigDecimal.ZERO;
        BigDecimal smpIppDaftar1=BigDecimal.ZERO, smpIpspDaftar1=BigDecimal.ZERO, smpIksDaftar1=BigDecimal.ZERO, smpPasbDaftar1=BigDecimal.ZERO, smpIpsbDaftar1=BigDecimal.ZERO, smpSeragamDaftar1=BigDecimal.ZERO, smpOsisDaftar1=BigDecimal.ZERO, smpAttributeDaftar1= BigDecimal.ZERO;
        BigDecimal smpIppProses1=BigDecimal.ZERO, smpIpspProses1=BigDecimal.ZERO, smpIksProses1=BigDecimal.ZERO, smpPasbProses1=BigDecimal.ZERO, smpIpsbProses1=BigDecimal.ZERO, smpSeragamProses1=BigDecimal.ZERO, smpOsisProses1=BigDecimal.ZERO, smpAttributeProses1= BigDecimal.ZERO;
        BigDecimal smpIppLunas1=BigDecimal.ZERO, smpIpspLunas1=BigDecimal.ZERO, smpIksLunas1=BigDecimal.ZERO, smpPasbLunas1=BigDecimal.ZERO, smpIpsbLunas1=BigDecimal.ZERO, smpSeragamLunas1=BigDecimal.ZERO, smpOsisLunas1=BigDecimal.ZERO, smpAttributeLunas1= BigDecimal.ZERO;
        BigDecimal smpIppBatal1=BigDecimal.ZERO, smpIpspBatal1=BigDecimal.ZERO, smpIksBatal1=BigDecimal.ZERO, smpPasbBatal1=BigDecimal.ZERO, smpIpsbBatal1=BigDecimal.ZERO, smpSeragamBatal1=BigDecimal.ZERO, smpOsisBatal1=BigDecimal.ZERO, smpAttributeBatal1= BigDecimal.ZERO;
        BigDecimal smkIppDaftar1=BigDecimal.ZERO, smkIpspDaftar1=BigDecimal.ZERO, smkIksDaftar1=BigDecimal.ZERO, smkPasbDaftar1=BigDecimal.ZERO, smkIpsbDaftar1=BigDecimal.ZERO, smkSeragamDaftar1=BigDecimal.ZERO, smkOsisDaftar1=BigDecimal.ZERO, smkAttributeDaftar1=BigDecimal.ZERO, smkAlmamaterDaftar1=BigDecimal.ZERO, smkPvtDaftar1= BigDecimal.ZERO;
        BigDecimal smkIppProses1=BigDecimal.ZERO, smkIpspProses1=BigDecimal.ZERO, smkIksProses1=BigDecimal.ZERO, smkPasbProses1=BigDecimal.ZERO, smkIpsbProses1=BigDecimal.ZERO, smkSeragamProses1=BigDecimal.ZERO, smkOsisProses1=BigDecimal.ZERO, smkAttributeProses1=BigDecimal.ZERO, smkAlmamaterProses1=BigDecimal.ZERO, smkPvtProses1= BigDecimal.ZERO;
        BigDecimal smkIppLunas1=BigDecimal.ZERO, smkIpspLunas1=BigDecimal.ZERO, smkIksLunas1=BigDecimal.ZERO, smkPasbLunas1=BigDecimal.ZERO, smkIpsbLunas1=BigDecimal.ZERO, smkSeragamLunas1=BigDecimal.ZERO, smkOsisLunas1=BigDecimal.ZERO, smkAttributeLunas1=BigDecimal.ZERO, smkAlmamaterLunas1=BigDecimal.ZERO, smkPvtLunas1= BigDecimal.ZERO;
        BigDecimal smkIppBatal1=BigDecimal.ZERO, smkIpspBatal1=BigDecimal.ZERO, smkIksBatal1=BigDecimal.ZERO, smkPasbBatal1=BigDecimal.ZERO, smkIpsbBatal1=BigDecimal.ZERO, smkSeragamBatal1=BigDecimal.ZERO, smkOsisBatal1=BigDecimal.ZERO, smkAttributeBatal1=BigDecimal.ZERO, smkAlmamaterBatal1=BigDecimal.ZERO, smkPvtBatal1= BigDecimal.ZERO;
        
        BigDecimal smaIppDaftar2=BigDecimal.ZERO, smaIpspDaftar2=BigDecimal.ZERO, smaIksDaftar2=BigDecimal.ZERO, smaPasbDaftar2=BigDecimal.ZERO, smaIpsbDaftar2=BigDecimal.ZERO, smaSeragamDaftar2=BigDecimal.ZERO, smaOsisDaftar2=BigDecimal.ZERO, smaAttributeDaftar2= BigDecimal.ZERO;
        BigDecimal smaIppProses2=BigDecimal.ZERO, smaIpspProses2=BigDecimal.ZERO, smaIksProses2=BigDecimal.ZERO, smaPasbProses2=BigDecimal.ZERO, smaIpsbProses2=BigDecimal.ZERO, smaSeragamProses2=BigDecimal.ZERO, smaOsisProses2=BigDecimal.ZERO, smaAttributeProses2= BigDecimal.ZERO;
        BigDecimal smaIppLunas2=BigDecimal.ZERO, smaIpspLunas2=BigDecimal.ZERO, smaIksLunas2=BigDecimal.ZERO, smaPasbLunas2=BigDecimal.ZERO, smaIpsbLunas2=BigDecimal.ZERO, smaSeragamLunas2=BigDecimal.ZERO, smaOsisLunas2=BigDecimal.ZERO, smaAttributeLunas2= BigDecimal.ZERO;
        BigDecimal smaIppBatal2=BigDecimal.ZERO, smaIpspBatal2=BigDecimal.ZERO, smaIksBatal2=BigDecimal.ZERO, smaPasbBatal2=BigDecimal.ZERO, smaIpsbBatal2=BigDecimal.ZERO, smaSeragamBatal2=BigDecimal.ZERO, smaOsisBatal2=BigDecimal.ZERO, smaAttributeBatal2= BigDecimal.ZERO;
        BigDecimal smpIppDaftar2=BigDecimal.ZERO, smpIpspDaftar2=BigDecimal.ZERO, smpIksDaftar2=BigDecimal.ZERO, smpPasbDaftar2=BigDecimal.ZERO, smpIpsbDaftar2=BigDecimal.ZERO, smpSeragamDaftar2=BigDecimal.ZERO, smpOsisDaftar2=BigDecimal.ZERO, smpAttributeDaftar2= BigDecimal.ZERO;
        BigDecimal smpIppProses2=BigDecimal.ZERO, smpIpspProses2=BigDecimal.ZERO, smpIksProses2=BigDecimal.ZERO, smpPasbProses2=BigDecimal.ZERO, smpIpsbProses2=BigDecimal.ZERO, smpSeragamProses2=BigDecimal.ZERO, smpOsisProses2=BigDecimal.ZERO, smpAttributeProses2= BigDecimal.ZERO;
        BigDecimal smpIppLunas2=BigDecimal.ZERO, smpIpspLunas2=BigDecimal.ZERO, smpIksLunas2=BigDecimal.ZERO, smpPasbLunas2=BigDecimal.ZERO, smpIpsbLunas2=BigDecimal.ZERO, smpSeragamLunas2=BigDecimal.ZERO, smpOsisLunas2=BigDecimal.ZERO, smpAttributeLunas2= BigDecimal.ZERO;
        BigDecimal smpIppBatal2=BigDecimal.ZERO, smpIpspBatal2=BigDecimal.ZERO, smpIksBatal2=BigDecimal.ZERO, smpPasbBatal2=BigDecimal.ZERO, smpIpsbBatal2=BigDecimal.ZERO, smpSeragamBatal2=BigDecimal.ZERO, smpOsisBatal2=BigDecimal.ZERO, smpAttributeBatal2= BigDecimal.ZERO;
        BigDecimal smkIppDaftar2=BigDecimal.ZERO, smkIpspDaftar2=BigDecimal.ZERO, smkIksDaftar2=BigDecimal.ZERO, smkPasbDaftar2=BigDecimal.ZERO, smkIpsbDaftar2=BigDecimal.ZERO, smkSeragamDaftar2=BigDecimal.ZERO, smkOsisDaftar2=BigDecimal.ZERO, smkAttributeDaftar2=BigDecimal.ZERO, smkAlmamaterDaftar2=BigDecimal.ZERO, smkPvtDaftar2= BigDecimal.ZERO;
        BigDecimal smkIppProses2=BigDecimal.ZERO, smkIpspProses2=BigDecimal.ZERO, smkIksProses2=BigDecimal.ZERO, smkPasbProses2=BigDecimal.ZERO, smkIpsbProses2=BigDecimal.ZERO, smkSeragamProses2=BigDecimal.ZERO, smkOsisProses2=BigDecimal.ZERO, smkAttributeProses2=BigDecimal.ZERO, smkAlmamaterProses2=BigDecimal.ZERO, smkPvtProses2= BigDecimal.ZERO;
        BigDecimal smkIppLunas2=BigDecimal.ZERO, smkIpspLunas2=BigDecimal.ZERO, smkIksLunas2=BigDecimal.ZERO, smkPasbLunas2=BigDecimal.ZERO, smkIpsbLunas2=BigDecimal.ZERO, smkSeragamLunas2=BigDecimal.ZERO, smkOsisLunas2=BigDecimal.ZERO, smkAttributeLunas2=BigDecimal.ZERO, smkAlmamaterLunas2=BigDecimal.ZERO, smkPvtLunas2= BigDecimal.ZERO;
        BigDecimal smkIppBatal2=BigDecimal.ZERO, smkIpspBatal2=BigDecimal.ZERO, smkIksBatal2=BigDecimal.ZERO, smkPasbBatal2=BigDecimal.ZERO, smkIpsbBatal2=BigDecimal.ZERO, smkSeragamBatal2=BigDecimal.ZERO, smkOsisBatal2=BigDecimal.ZERO, smkAttributeBatal2=BigDecimal.ZERO, smkAlmamaterBatal2=BigDecimal.ZERO, smkPvtBatal2= BigDecimal.ZERO;
        try {
            String curYear = String.valueOf(Kalender.getInstance().get(Calendar.YEAR));
            smpProfils = Profil.selectS("SMP-7-1-".concat(curYear));
            smaProfils = Profil.selectS("SMA-10-1-".concat(curYear));
            smkProfils = Profil.selectS("SMK-10-1-".concat(curYear));
        } catch (KasirException ex) {
            Exceptions.printStackTrace(ex);
        }
        // connection is the data source we used to fetch the data from
        printout.StatusPendaftaran pb = new StatusPendaftaran();
        Connection connection = pb.establishConnection(); 
        Statement stmt = null;
        
        stmt = connection.createStatement();
                
        
        
        //Using Marbun's Legacy
        for(int i = 0 ; i < smpProfils.size() ; i++){
            if(smpProfils.get(i).gelombang == Profil.Gelombang.GELOMBANG_1){
                if(smpProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.DAFTAR){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIppDaftar1 = smpIppDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIpspDaftar1 = smpIpspDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIksDaftar1 = smpIksDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIpsbDaftar1 = smpIpsbDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpPasbDaftar1 = smpPasbDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpSeragamDaftar1 = smpSeragamDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpOsisDaftar1 = smpOsisDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpAttributeDaftar1 = smpAttributeDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                }else if(smpProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.PROSES){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIppProses1 = smpIppProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIpspProses1 = smpIpspProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIksProses1 = smpIksProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIpsbProses1 = smpIpsbProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpPasbProses1 = smpPasbProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpSeragamProses1 = smpSeragamProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpOsisProses1 = smpOsisProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpAttributeProses1 = smpAttributeProses1.add(BigDecimal.valueOf(j.amount));
                    }
                }else if(smpProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.LUNAS){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIppLunas1 = smpIppLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIpspLunas1 = smpIpspLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIksLunas1 = smpIksLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIpsbLunas1 = smpIpsbLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpPasbLunas1 = smpPasbLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpSeragamLunas1 = smpSeragamLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpOsisLunas1 = smpOsisLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpAttributeLunas1 = smpAttributeLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                }else if(smpProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.BATAL){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIppBatal1 = smpIppBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIpspBatal1 = smpIpspBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIksBatal1 = smpIksBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIpsbBatal1 = smpIpsbBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpPasbBatal1 = smpPasbBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpSeragamBatal1 = smpSeragamBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpOsisBatal1 = smpOsisBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpAttributeBatal1 = smpAttributeBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                }
            }else if (smpProfils.get(i).gelombang == Profil.Gelombang.GELOMBANG_2){
                if(smpProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.DAFTAR){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIppDaftar2 = smpIppDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIpspDaftar2 = smpIpspDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIksDaftar2 = smpIksDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIpsbDaftar2 = smpIpsbDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpPasbDaftar2 = smpPasbDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpSeragamDaftar2 = smpSeragamDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpOsisDaftar2 = smpOsisDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpAttributeDaftar2 = smpAttributeDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                }else if(smpProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.PROSES){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIppProses2 = smpIppProses2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIpspProses2 = smpIpspProses2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIksProses2 = smpIksProses2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIpsbProses2 = smpIpsbProses2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpPasbProses2 = smpPasbProses2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpSeragamProses2 = smpSeragamProses2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpOsisProses2 = smpOsisProses2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpAttributeProses2 = smpAttributeProses2.add(BigDecimal.valueOf(j.amount));
                    }
                }else if(smpProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.LUNAS){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIppLunas2 = smpIppLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIpspLunas2 = smpIpspLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIksLunas2 = smpIksLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIpsbLunas2 = smpIpsbLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpPasbLunas2 = smpPasbLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpSeragamLunas2 = smpSeragamLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpOsisLunas2 = smpOsisLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpAttributeLunas2 = smpAttributeLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                }else if(smpProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.BATAL){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIppBatal2 = smpIppBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIpspBatal2 = smpIpspBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIksBatal2 = smpIksBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpIpsbBatal2 = smpIpsbBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpPasbBatal2 = smpPasbBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpSeragamBatal2 = smpSeragamBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpOsisBatal2 = smpOsisBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smpProfils.get(i).noInduk)){
                        smpAttributeBatal2 = smpAttributeBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                }
            }
        }
        smpIppDaftar = smpIppDaftar1.add(smpIppDaftar2);
        smpIpspDaftar = smpIpspDaftar1.add(smpIpspDaftar2);
        smpIksDaftar = smpIksDaftar1.add(smpIksDaftar2);
        smpIpsbDaftar = smpIpsbDaftar1.add(smpIpsbDaftar2);
        smpPasbDaftar = smpPasbDaftar1.add(smpPasbDaftar2);
        smpSeragamDaftar = smpSeragamDaftar1.add(smpSeragamDaftar2);
        smpOsisDaftar = smpOsisDaftar1.add(smpOsisDaftar2);
        smpAttributeDaftar = smpAttributeDaftar1.add(smpAttributeDaftar2);
        
        smpIppProses = smpIppProses1.add(smpIppProses2);
        smpIpspProses = smpIpspProses1.add(smpIpspProses2);
        smpIksProses = smpIksProses1.add(smpIksProses2);
        smpIpsbProses = smpIpsbProses1.add(smpIpsbProses2);
        smpPasbProses = smpPasbProses1.add(smpPasbProses2);
        smpSeragamProses = smpSeragamProses1.add(smpSeragamProses2);
        smpOsisProses = smpOsisProses1.add(smpOsisProses2);
        smpAttributeProses = smpAttributeProses1.add(smpAttributeProses2);
        
        smpIppLunas = smpIppLunas1.add(smpIppLunas2);
        smpIpspLunas = smpIpspLunas1.add(smpIpspLunas2);
        smpIksLunas = smpIksLunas1.add(smpIksLunas2);
        smpIpsbLunas = smpIpsbLunas1.add(smpIpsbLunas2);
        smpPasbLunas = smpPasbLunas1.add(smpPasbLunas2);
        smpSeragamLunas = smpSeragamLunas1.add(smpSeragamLunas2);
        smpOsisLunas = smpOsisLunas1.add(smpOsisLunas2);
        smpAttributeLunas = smpAttributeLunas1.add(smpAttributeLunas2);
        
        smpIppBatal = smpIppBatal1.add(smpIppBatal2);
        smpIpspBatal = smpIpspBatal1.add(smpIpspBatal2);
        smpIksBatal = smpIksBatal1.add(smpIksBatal2);
        smpIpsbBatal = smpIpsbBatal1.add(smpIpsbBatal2);
        smpPasbBatal = smpPasbBatal1.add(smpPasbBatal2);
        smpSeragamBatal = smpSeragamBatal1.add(smpSeragamBatal2);
        smpOsisBatal = smpOsisBatal1.add(smpOsisBatal2);
        smpAttributeBatal = smpAttributeBatal1.add(smpAttributeBatal2);
        
        for(int i = 0 ; i < smaProfils.size() ; i++){
            if(smaProfils.get(i).gelombang == Profil.Gelombang.GELOMBANG_1){
                if(smaProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.DAFTAR){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIppDaftar1 = smaIppDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIpspDaftar1 = smaIpspDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIksDaftar1 = smaIksDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIpsbDaftar1 = smaIpsbDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaPasbDaftar1 = smaPasbDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaSeragamDaftar1 = smaSeragamDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaOsisDaftar1 = smaOsisDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaAttributeDaftar1 = smaAttributeDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                }else if(smaProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.PROSES){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIppProses1 = smaIppProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIpspProses1 = smaIpspProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIksProses1 = smaIksProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIpsbProses1 = smaIpsbProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaPasbProses1 = smaPasbProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaSeragamProses1 = smaSeragamProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaOsisProses1 = smaOsisProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaAttributeProses1 = smaAttributeProses1.add(BigDecimal.valueOf(j.amount));
                    }
                }else if(smaProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.LUNAS){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIppLunas1 = smaIppLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIpspLunas1 = smaIpspLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIksLunas1 = smaIksLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIpsbLunas1 = smaIpsbLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaPasbLunas1 = smaPasbLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaSeragamLunas1 = smaSeragamLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaOsisLunas1 = smaOsisLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaAttributeLunas1 = smaAttributeLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                }else if(smaProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.BATAL){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIppBatal1 = smaIppBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIpspBatal1 = smaIpspBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIksBatal1 = smaIksBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIpsbBatal1 = smaIpsbBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaPasbBatal1 = smaPasbBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaSeragamBatal1 = smaSeragamBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaOsisBatal1 = smaOsisBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaAttributeBatal1 = smaAttributeBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                }
            }else if (smaProfils.get(i).gelombang == Profil.Gelombang.GELOMBANG_2){
                if(smaProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.DAFTAR){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIppDaftar2 = smaIppDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIpspDaftar2 = smaIpspDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIksDaftar2 = smaIksDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIpsbDaftar2 = smaIpsbDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaPasbDaftar2 = smaPasbDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaSeragamDaftar2 = smaSeragamDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaOsisDaftar2 = smaOsisDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaAttributeDaftar2 = smaAttributeDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                }else if(smaProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.PROSES){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIppProses2 = smaIppProses2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIpspProses2 = smaIpspProses2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIksProses2 = smaIksProses2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIpsbProses2 = smaIpsbProses2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaPasbProses2 = smaPasbProses2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaSeragamProses2 = smaSeragamProses2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaOsisProses2 = smaOsisProses2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaAttributeProses2 = smaAttributeProses2.add(BigDecimal.valueOf(j.amount));
                    }
                }else if(smaProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.LUNAS){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIppLunas2 = smaIppLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIpspLunas2 = smaIpspLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIksLunas2 = smaIksLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIpsbLunas2 = smaIpsbLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaPasbLunas2 = smaPasbLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaSeragamLunas2 = smaSeragamLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaOsisLunas2 = smaOsisLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaAttributeLunas2 = smaAttributeLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                }else if(smaProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.BATAL){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIppBatal2 = smaIppBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIpspBatal2 = smaIpspBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIksBatal2 = smaIksBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaIpsbBatal2 = smaIpsbBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaPasbBatal2 = smaPasbBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaSeragamBatal2 = smaSeragamBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaOsisBatal2 = smaOsisBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smaProfils.get(i).noInduk)){
                        smaAttributeBatal2 = smaAttributeBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                }
            }
        }
                     
        
        smaIppDaftar = smaIppDaftar1.add(smaIppDaftar2);
        smaIpspDaftar = smaIpspDaftar1.add(smaIpspDaftar2);
        smaIksDaftar = smaIksDaftar1.add(smaIksDaftar2);
        smaIpsbDaftar = smaIpsbDaftar1.add(smaIpsbDaftar2);
        smaPasbDaftar = smaPasbDaftar1.add(smaPasbDaftar2);
        smaSeragamDaftar = smaSeragamDaftar1.add(smaSeragamDaftar2);
        smaOsisDaftar = smaOsisDaftar1.add(smaOsisDaftar2);
        smaAttributeDaftar = smaAttributeDaftar1.add(smaAttributeDaftar2);
        
        smaIppProses = smaIppProses1.add(smaIppProses2);
        smaIpspProses = smaIpspProses1.add(smaIpspProses2);
        smaIksProses = smaIksProses1.add(smaIksProses2);
        smaIpsbProses = smaIpsbProses1.add(smaIpsbProses2);
        smaPasbProses = smaPasbProses1.add(smaPasbProses2);
        smaSeragamProses = smaSeragamProses1.add(smaSeragamProses2);
        smaOsisProses = smaOsisProses1.add(smaOsisProses2);
        smaAttributeProses = smaAttributeProses1.add(smaAttributeProses2);
        
        smaIppLunas = smaIppLunas1.add(smaIppLunas2);
        smaIpspLunas = smaIpspLunas1.add(smaIpspLunas2);
        smaIksLunas = smaIksLunas1.add(smaIksLunas2);
        smaIpsbLunas = smaIpsbLunas1.add(smaIpsbLunas2);
        smaPasbLunas = smaPasbLunas1.add(smaPasbLunas2);
        smaSeragamLunas = smaSeragamLunas1.add(smaSeragamLunas2);
        smaOsisLunas = smaOsisLunas1.add(smaOsisLunas2);
        smaAttributeLunas = smaAttributeLunas1.add(smaAttributeLunas2);
        
        smaIppBatal = smaIppBatal1.add(smaIppBatal2);
        smaIpspBatal = smaIpspBatal1.add(smaIpspBatal2);
        smaIksBatal = smaIksBatal1.add(smaIksBatal2);
        smaIpsbBatal = smaIpsbBatal1.add(smaIpsbBatal2);
        smaPasbBatal = smaPasbBatal1.add(smaPasbBatal2);
        smaSeragamBatal = smaSeragamBatal1.add(smaSeragamBatal2);
        smaOsisBatal = smaOsisBatal1.add(smaOsisBatal2);
        smaAttributeBatal = smaAttributeBatal1.add(smaAttributeBatal2);
        
        for(int i = 0 ; i < smkProfils.size() ; i++){
            if(smkProfils.get(i).gelombang == Profil.Gelombang.GELOMBANG_1){
                if(smkProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.DAFTAR){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIppDaftar1 = smkIppDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIpspDaftar1 = smkIpspDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIksDaftar1 = smkIksDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIpsbDaftar1 = smkIpsbDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkPasbDaftar1 = smkPasbDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkSeragamDaftar1 = smkSeragamDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkOsisDaftar1 = smkOsisDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkAttributeDaftar1 = smkAttributeDaftar1.add(BigDecimal.valueOf(j.amount));
                    }
                }else if(smkProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.PROSES){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIppProses1 = smkIppProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIpspProses1 = smkIpspProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIksProses1 = smkIksProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIpsbProses1 = smkIpsbProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkPasbProses1 = smkPasbProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkSeragamProses1 = smkSeragamProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkOsisProses1 = smkOsisProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkAttributeProses1 = smkAttributeProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkAlmamaterProses1 = smkAlmamaterProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PVTTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkPvtProses1 = smkPvtProses1.add(BigDecimal.valueOf(j.amount));
                    }
                    
                    
                }else if(smkProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.LUNAS){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIppLunas1 = smkIppLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIpspLunas1 = smkIpspLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIksLunas1 = smkIksLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIpsbLunas1 = smkIpsbLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkPasbLunas1 = smkPasbLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkSeragamLunas1 = smkSeragamLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkOsisLunas1 = smkOsisLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkAttributeLunas1 = smkAttributeLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkAlmamaterLunas1 = smkAlmamaterLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PVTTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkPvtLunas1 = smkPvtLunas1.add(BigDecimal.valueOf(j.amount));
                    }
                }else if(smkProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.BATAL){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIppBatal1 = smkIppBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIpspBatal1 = smkIpspBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIksBatal1 = smkIksBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIpsbBatal1 = smkIpsbBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkPasbBatal1 = smkPasbBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkSeragamBatal1 = smkSeragamBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkOsisBatal1 = smkOsisBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkAttributeBatal1 = smkAttributeBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkAlmamaterBatal1 = smkAlmamaterBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PVTTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkPvtBatal1 = smkPvtBatal1.add(BigDecimal.valueOf(j.amount));
                    }
                }
            }else if (smkProfils.get(i).gelombang == Profil.Gelombang.GELOMBANG_2){
                if(smkProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.DAFTAR){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIppDaftar2 = smkIppDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIpspDaftar2 = smkIpspDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIksDaftar2 = smkIksDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIpsbDaftar2 = smkIpsbDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkPasbDaftar2 = smkPasbDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkSeragamDaftar2 = smkSeragamDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkOsisDaftar2 = smkOsisDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkAttributeDaftar2 = smkAttributeDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkAlmamaterDaftar2 = smkAlmamaterDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PVTTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkPvtDaftar2 = smkPvtDaftar2.add(BigDecimal.valueOf(j.amount));
                    }
                }else if(smkProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.PROSES){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIppProses2 = smkIppProses2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIpspProses2 = smkIpspProses2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIksProses2 = smkIksProses2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIpsbProses2 = smkIpsbProses2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkPasbProses2 = smkPasbProses2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkSeragamProses2 = smkSeragamProses2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkOsisProses2 = smkOsisProses2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkAttributeProses2 = smkAttributeProses2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkAlmamaterProses2 = smkAlmamaterProses2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PVTTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkPvtProses2 = smkPvtProses2.add(BigDecimal.valueOf(j.amount));
                    }
                }else if(smkProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.LUNAS){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIppLunas2 = smkIppLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIpspLunas2 = smkIpspLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIksLunas2 = smkIksLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIpsbLunas2 = smkIpsbLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkPasbLunas2 = smkPasbLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkSeragamLunas2 = smkSeragamLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkOsisLunas2 = smkOsisLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkAttributeLunas2 = smkAttributeLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkAlmamaterLunas2 = smkAlmamaterLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PVTTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkPvtLunas2 = smkPvtLunas2.add(BigDecimal.valueOf(j.amount));
                    }
                }else if(smkProfils.get(i).statusPendaftaran == Profil.StatusPendaftaran.BATAL){
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIppBatal2 = smkIppBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIpspBatal2 = smkIpspBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIksBatal2 = smkIksBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkIpsbBatal2 = smkIpsbBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkPasbBatal2 = smkPasbBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkSeragamBatal2 = smkSeragamBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkOsisBatal2 = smkOsisBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkAttributeBatal2 = smkAttributeBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkAlmamaterBatal2 = smkAlmamaterBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                    for(TransactionDetail j: Control.selectTDetails(TransactionDetail.Tipe.PVTTransaction, IPPTransactionDetail.noIndukColName, false, smkProfils.get(i).noInduk)){
                        smkPvtBatal2 = smkPvtBatal2.add(BigDecimal.valueOf(j.amount));
                    }
                }
            }
        }
                     
        
        smkIppDaftar = smkIppDaftar1.add(smkIppDaftar2);
        smkIpspDaftar = smkIpspDaftar1.add(smkIpspDaftar2);
        smkIksDaftar = smkIksDaftar1.add(smkIksDaftar2);
        smkIpsbDaftar = smkIpsbDaftar1.add(smkIpsbDaftar2);
        smkPasbDaftar = smkPasbDaftar1.add(smkPasbDaftar2);
        smkSeragamDaftar = smkSeragamDaftar1.add(smkSeragamDaftar2);
        smkOsisDaftar = smkOsisDaftar1.add(smkOsisDaftar2);
        smkAttributeDaftar = smkAttributeDaftar1.add(smkAttributeDaftar2);
        smkAlmamaterDaftar = smkAlmamaterDaftar1.add(smkAlmamaterDaftar2);
        smkPvtDaftar = smkPvtDaftar1.add(smkPvtDaftar2);
        
        smkIppProses = smkIppProses1.add(smkIppProses2);
        smkIpspProses = smkIpspProses1.add(smkIpspProses2);
        smkIksProses = smkIksProses1.add(smkIksProses2);
        smkIpsbProses = smkIpsbProses1.add(smkIpsbProses2);
        smkPasbProses = smkPasbProses1.add(smkPasbProses2);
        smkSeragamProses = smkSeragamProses1.add(smkSeragamProses2);
        smkOsisProses = smkOsisProses1.add(smkOsisProses2);
        smkAttributeProses = smkAttributeProses1.add(smkAttributeProses2);
        smkAlmamaterProses = smkAlmamaterProses1.add(smkAlmamaterProses2);
        smkPvtProses = smkPvtProses1.add(smkPvtProses2);
        
        smkIppLunas = smkIppLunas1.add(smkIppLunas2);
        smkIpspLunas = smkIpspLunas1.add(smkIpspLunas2);
        smkIksLunas = smkIksLunas1.add(smkIksLunas2);
        smkIpsbLunas = smkIpsbLunas1.add(smkIpsbLunas2);
        smkPasbLunas = smkPasbLunas1.add(smkPasbLunas2);
        smkSeragamLunas = smkSeragamLunas1.add(smkSeragamLunas2);
        smkOsisLunas = smkOsisLunas1.add(smkOsisLunas2);
        smkAttributeLunas = smkAttributeLunas1.add(smkAttributeLunas2);
        smkAlmamaterLunas = smkAlmamaterLunas1.add(smkAlmamaterLunas2);
        smkPvtLunas = smkPvtLunas1.add(smkPvtLunas2);
        
        smkIppBatal = smkIppBatal1.add(smkIppBatal2);
        smkIpspBatal = smkIpspBatal1.add(smkIpspBatal2);
        smkIksBatal = smkIksBatal1.add(smkIksBatal2);
        smkIpsbBatal = smkIpsbBatal1.add(smkIpsbBatal2);
        smkPasbBatal = smkPasbBatal1.add(smkPasbBatal2);
        smkSeragamBatal = smkSeragamBatal1.add(smkSeragamBatal2);
        smkOsisBatal = smkOsisBatal1.add(smkOsisBatal2);
        smkAttributeBatal = smkAttributeBatal1.add(smkAttributeBatal2);
        smkAlmamaterBatal = smkAlmamaterBatal1.add(smkAlmamaterBatal2);
        smkPvtBatal = smkPvtBatal1.add(smkPvtBatal2);
        
        System.out.println("**********************BIG DECIMAL ******************************");
        System.out.println(smpIppDaftar.toString());
        System.out.println(smpIppProses.toString());
        System.out.println(smpIppLunas.toString());
        System.out.println(smpIppBatal.toString());
        // jasperParameter is a Hashmap contains the parameters
        // passed from application to the jrxml layout
        HashMap jasperParameter = new HashMap();
        jasperParameter.put("PARAM_CLERK_ID", Long.valueOf(cl.id));
        if(jComboBoxLevel1.getSelectedItem() != null)
        jasperParameter.put("Param_Level", "%".concat(jComboBoxLevel1.getSelectedItem().toString()).concat("%"));
        
        jasperParameter.put("smpIppDaftar", smpIppDaftar);
        jasperParameter.put("smpIpspDaftar", smpIpspDaftar);
        jasperParameter.put("smpIksDaftar", smpIksDaftar);
        jasperParameter.put("smpPasbDaftar", smpPasbDaftar);
        jasperParameter.put("smpIpsbDaftar", smpIpsbDaftar);
        jasperParameter.put("smpOsisDaftar", smpOsisDaftar);
        jasperParameter.put("smpAttributeDaftar", smpAttributeDaftar);
        jasperParameter.put("smpSeragamDaftar", smpSeragamDaftar);
        jasperParameter.put("smpIppProses", smpIppProses);
        jasperParameter.put("smpIpspProses", smpIpspProses);
        jasperParameter.put("smpIksProses", smpIksProses);
        jasperParameter.put("smpPasbProses", smpPasbProses);
        jasperParameter.put("smpIpsbProses", smpIpsbProses);
        jasperParameter.put("smpOsisProses", smpOsisProses);
        jasperParameter.put("smpAttributeProses", smpAttributeProses);
        jasperParameter.put("smpSeragamProses", smpSeragamProses);
        jasperParameter.put("smpIppLunas", smpIppLunas);
        jasperParameter.put("smpIpspLunas", smpIpspLunas);
        jasperParameter.put("smpIksLunas", smpIksLunas);
        jasperParameter.put("smpPasbLunas", smpPasbLunas);
        jasperParameter.put("smpIpsbLunas", smpIpsbLunas);
        jasperParameter.put("smpOsisLunas", smpOsisLunas);
        jasperParameter.put("smpAttributeLunas", smpAttributeLunas);
        jasperParameter.put("smpSeragamLunas", smpSeragamLunas);
        jasperParameter.put("smpIppBatal", smpIppBatal);
        jasperParameter.put("smpIpspBatal", smpIpspBatal);
        jasperParameter.put("smpIksBatal", smpIksBatal);
        jasperParameter.put("smpPasbBatal", smpPasbBatal);
        jasperParameter.put("smpIpsbBatal", smpIpsbBatal);
        jasperParameter.put("smpOsisBatal", smpOsisBatal);
        jasperParameter.put("smpAttributeBatal", smpAttributeBatal);
        jasperParameter.put("smpSeragamBatal", smpSeragamBatal);
        jasperParameter.put("smpIppDaftar1", smpIppDaftar1);
        jasperParameter.put("smpIpspDaftar1", smpIpspDaftar1);
        jasperParameter.put("smpIksDaftar1", smpIksDaftar1);
        jasperParameter.put("smpPasbDaftar1", smpPasbDaftar1);
        jasperParameter.put("smpIpsbDaftar1", smpIpsbDaftar1);
        jasperParameter.put("smpOsisDaftar1", smpOsisDaftar1);
        jasperParameter.put("smpAttributeDaftar1", smpAttributeDaftar1);
        jasperParameter.put("smpSeragamDaftar1", smpSeragamDaftar1);
        jasperParameter.put("smpIppProses1", smpIppProses1);
        jasperParameter.put("smpIpspProses1", smpIpspProses1);
        jasperParameter.put("smpIksProses1", smpIksProses1);
        jasperParameter.put("smpPasbProses1", smpPasbProses1);
        jasperParameter.put("smpIpsbProses1", smpIpsbProses1);
        jasperParameter.put("smpOsisProses1", smpOsisProses1);
        jasperParameter.put("smpAttributeProses1", smpAttributeProses1);
        jasperParameter.put("smpSeragamProses1", smpSeragamProses1);
        jasperParameter.put("smpIppLunas1", smpIppLunas1);
        jasperParameter.put("smpIpspLunas1", smpIpspLunas1);
        jasperParameter.put("smpIksLunas1", smpIksLunas1);
        jasperParameter.put("smpPasbLunas1", smpPasbLunas1);
        jasperParameter.put("smpIpsbLunas1", smpIpsbLunas1);
        jasperParameter.put("smpOsisLunas1", smpOsisLunas1);
        jasperParameter.put("smpAttributeLunas1", smpAttributeLunas1);
        jasperParameter.put("smpSeragamLunas1", smpSeragamLunas1);
        jasperParameter.put("smpIppBatal2", smpIppBatal2);
        jasperParameter.put("smpIpspBatal2", smpIpspBatal2);
        jasperParameter.put("smpIksBatal2", smpIksBatal2);
        jasperParameter.put("smpPasbBatal2", smpPasbBatal2);
        jasperParameter.put("smpIpsbBatal2", smpIpsbBatal2);
        jasperParameter.put("smpOsisBatal2", smpOsisBatal2);
        jasperParameter.put("smpAttributeBatal2", smpAttributeBatal2);
        jasperParameter.put("smpSeragamBatal2", smpSeragamBatal2);
        jasperParameter.put("smpIppDaftar2", smpIppDaftar2);
        jasperParameter.put("smpIpspDaftar2", smpIpspDaftar2);
        jasperParameter.put("smpIksDaftar2", smpIksDaftar2);
        jasperParameter.put("smpPasbDaftar2", smpPasbDaftar2);
        jasperParameter.put("smpIpsbDaftar2", smpIpsbDaftar2);
        jasperParameter.put("smpOsisDaftar2", smpOsisDaftar2);
        jasperParameter.put("smpAttributeDaftar2", smpAttributeDaftar2);
        jasperParameter.put("smpSeragamDaftar2", smpSeragamDaftar2);
        jasperParameter.put("smpIppProses2", smpIppProses2);
        jasperParameter.put("smpIpspProses2", smpIpspProses2);
        jasperParameter.put("smpIksProses2", smpIksProses2);
        jasperParameter.put("smpPasbProses2", smpPasbProses2);
        jasperParameter.put("smpIpsbProses2", smpIpsbProses2);
        jasperParameter.put("smpOsisProses2", smpOsisProses2);
        jasperParameter.put("smpAttributeProses2", smpAttributeProses2);
        jasperParameter.put("smpSeragamProses2", smpSeragamProses2);
        jasperParameter.put("smpIppLunas2", smpIppLunas2);
        jasperParameter.put("smpIpspLunas2", smpIpspLunas2);
        jasperParameter.put("smpIksLunas2", smpIksLunas2);
        jasperParameter.put("smpPasbLunas2", smpPasbLunas2);
        jasperParameter.put("smpIpsbLunas2", smpIpsbLunas2);
        jasperParameter.put("smpOsisLunas2", smpOsisLunas2);
        jasperParameter.put("smpAttributeLunas2", smpAttributeLunas2);
        jasperParameter.put("smpSeragamLunas2", smpSeragamLunas2);
        jasperParameter.put("smpIppBatal2", smpIppBatal2);
        jasperParameter.put("smpIpspBatal2", smpIpspBatal2);
        jasperParameter.put("smpIksBatal2", smpIksBatal2);
        jasperParameter.put("smpPasbBatal2", smpPasbBatal2);
        jasperParameter.put("smpIpsbBatal2", smpIpsbBatal2);
        jasperParameter.put("smpOsisBatal2", smpOsisBatal2);
        jasperParameter.put("smpAttributeBatal2", smpAttributeBatal2);
        jasperParameter.put("smpSeragamBatal2", smpSeragamBatal2);
        
        jasperParameter.put("smaIppDaftar", smaIppDaftar);
        jasperParameter.put("smaIpspDaftar", smaIpspDaftar);
        jasperParameter.put("smaIksDaftar", smaIksDaftar);
        jasperParameter.put("smaPasbDaftar", smaPasbDaftar);
        jasperParameter.put("smaIpsbDaftar", smaIpsbDaftar);
        jasperParameter.put("smaOsisDaftar", smaOsisDaftar);
        jasperParameter.put("smaAttributeDaftar", smaAttributeDaftar);
        jasperParameter.put("smaSeragamDaftar", smaSeragamDaftar);
        jasperParameter.put("smaIppProses", smaIppProses);
        jasperParameter.put("smaIpspProses", smaIpspProses);
        jasperParameter.put("smaIksProses", smaIksProses);
        jasperParameter.put("smaPasbProses", smaPasbProses);
        jasperParameter.put("smaIpsbProses", smaIpsbProses);
        jasperParameter.put("smaOsisProses", smaOsisProses);
        jasperParameter.put("smaAttributeProses", smaAttributeProses);
        jasperParameter.put("smaSeragamProses", smaSeragamProses);
        jasperParameter.put("smaIppLunas", smaIppLunas);
        jasperParameter.put("smaIpspLunas", smaIpspLunas);
        jasperParameter.put("smaIksLunas", smaIksLunas);
        jasperParameter.put("smaPasbLunas", smaPasbLunas);
        jasperParameter.put("smaIpsbLunas", smaIpsbLunas);
        jasperParameter.put("smaOsisLunas", smaOsisLunas);
        jasperParameter.put("smaAttributeLunas", smaAttributeLunas);
        jasperParameter.put("smaSeragamLunas", smaSeragamLunas);
        jasperParameter.put("smaIppBatal", smaIppBatal);
        jasperParameter.put("smaIpspBatal", smaIpspBatal);
        jasperParameter.put("smaIksBatal", smaIksBatal);
        jasperParameter.put("smaPasbBatal", smaPasbBatal);
        jasperParameter.put("smaIpsbBatal", smaIpsbBatal);
        jasperParameter.put("smaOsisBatal", smaOsisBatal);
        jasperParameter.put("smaAttributeBatal", smaAttributeBatal);
        jasperParameter.put("smaSeragamBatal", smaSeragamBatal);
        jasperParameter.put("smaIppDaftar1", smaIppDaftar1);
        jasperParameter.put("smaIpspDaftar1", smaIpspDaftar1);
        jasperParameter.put("smaIksDaftar1", smaIksDaftar1);
        jasperParameter.put("smaPasbDaftar1", smaPasbDaftar1);
        jasperParameter.put("smaIpsbDaftar1", smaIpsbDaftar1);
        jasperParameter.put("smaOsisDaftar1", smaOsisDaftar1);
        jasperParameter.put("smaAttributeDaftar1", smaAttributeDaftar1);
        jasperParameter.put("smaSeragamDaftar1", smaSeragamDaftar1);
        jasperParameter.put("smaIppProses1", smaIppProses1);
        jasperParameter.put("smaIpspProses1", smaIpspProses1);
        jasperParameter.put("smaIksProses1", smaIksProses1);
        jasperParameter.put("smaPasbProses1", smaPasbProses1);
        jasperParameter.put("smaIpsbProses1", smaIpsbProses1);
        jasperParameter.put("smaOsisProses1", smaOsisProses1);
        jasperParameter.put("smaAttributeProses1", smaAttributeProses1);
        jasperParameter.put("smaSeragamProses1", smaSeragamProses1);
        jasperParameter.put("smaIppLunas1", smaIppLunas1);
        jasperParameter.put("smaIpspLunas1", smaIpspLunas1);
        jasperParameter.put("smaIksLunas1", smaIksLunas1);
        jasperParameter.put("smaPasbLunas1", smaPasbLunas1);
        jasperParameter.put("smaIpsbLunas1", smaIpsbLunas1);
        jasperParameter.put("smaOsisLunas1", smaOsisLunas1);
        jasperParameter.put("smaAttributeLunas1", smaAttributeLunas1);
        jasperParameter.put("smaSeragamLunas1", smaSeragamLunas1);
        jasperParameter.put("smaIppBatal2", smaIppBatal2);
        jasperParameter.put("smaIpspBatal2", smaIpspBatal2);
        jasperParameter.put("smaIksBatal2", smaIksBatal2);
        jasperParameter.put("smaPasbBatal2", smaPasbBatal2);
        jasperParameter.put("smaIpsbBatal2", smaIpsbBatal2);
        jasperParameter.put("smaOsisBatal2", smaOsisBatal2);
        jasperParameter.put("smaAttributeBatal2", smaAttributeBatal2);
        jasperParameter.put("smaSeragamBatal2", smaSeragamBatal2);
        jasperParameter.put("smaIppDaftar2", smaIppDaftar2);
        jasperParameter.put("smaIpspDaftar2", smaIpspDaftar2);
        jasperParameter.put("smaIksDaftar2", smaIksDaftar2);
        jasperParameter.put("smaPasbDaftar2", smaPasbDaftar2);
        jasperParameter.put("smaIpsbDaftar2", smaIpsbDaftar2);
        jasperParameter.put("smaOsisDaftar2", smaOsisDaftar2);
        jasperParameter.put("smaAttributeDaftar2", smaAttributeDaftar2);
        jasperParameter.put("smaSeragamDaftar2", smaSeragamDaftar2);
        jasperParameter.put("smaIppProses2", smaIppProses2);
        jasperParameter.put("smaIpspProses2", smaIpspProses2);
        jasperParameter.put("smaIksProses2", smaIksProses2);
        jasperParameter.put("smaPasbProses2", smaPasbProses2);
        jasperParameter.put("smaIpsbProses2", smaIpsbProses2);
        jasperParameter.put("smaOsisProses2", smaOsisProses2);
        jasperParameter.put("smaAttributeProses2", smaAttributeProses2);
        jasperParameter.put("smaSeragamProses2", smaSeragamProses2);
        jasperParameter.put("smaIppLunas2", smaIppLunas2);
        jasperParameter.put("smaIpspLunas2", smaIpspLunas2);
        jasperParameter.put("smaIksLunas2", smaIksLunas2);
        jasperParameter.put("smaPasbLunas2", smaPasbLunas2);
        jasperParameter.put("smaIpsbLunas2", smaIpsbLunas2);
        jasperParameter.put("smaOsisLunas2", smaOsisLunas2);
        jasperParameter.put("smaAttributeLunas2", smaAttributeLunas2);
        jasperParameter.put("smaSeragamLunas2", smaSeragamLunas2);
        jasperParameter.put("smaIppBatal2", smaIppBatal2);
        jasperParameter.put("smaIpspBatal2", smaIpspBatal2);
        jasperParameter.put("smaIksBatal2", smaIksBatal2);
        jasperParameter.put("smaPasbBatal2", smaPasbBatal2);
        jasperParameter.put("smaIpsbBatal2", smaIpsbBatal2);
        jasperParameter.put("smaOsisBatal2", smaOsisBatal2);
        jasperParameter.put("smaAttributeBatal2", smaAttributeBatal2);
        jasperParameter.put("smaSeragamBatal2", smaSeragamBatal2);
        
        jasperParameter.put("smkIppDaftar", smkIppDaftar);
        jasperParameter.put("smkIpspDaftar", smkIpspDaftar);
        jasperParameter.put("smkIksDaftar", smkIksDaftar);
        jasperParameter.put("smkPasbDaftar", smkPasbDaftar);
        jasperParameter.put("smkIpsbDaftar", smkIpsbDaftar);
        jasperParameter.put("smkOsisDaftar", smkOsisDaftar);
        jasperParameter.put("smkAttributeDaftar", smkAttributeDaftar);
        jasperParameter.put("smkSeragamDaftar", smkSeragamDaftar);
        jasperParameter.put("smkAlmamaterDaftar", smkAlmamaterDaftar);
        jasperParameter.put("smkPvtDaftar", smkPvtDaftar);
        jasperParameter.put("smkIppProses", smkIppProses);
        jasperParameter.put("smkIpspProses", smkIpspProses);
        jasperParameter.put("smkIksProses", smkIksProses);
        jasperParameter.put("smkPasbProses", smkPasbProses);
        jasperParameter.put("smkIpsbProses", smkIpsbProses);
        jasperParameter.put("smkOsisProses", smkOsisProses);
        jasperParameter.put("smkAttributeProses", smkAttributeProses);
        jasperParameter.put("smkSeragamProses", smkSeragamProses);
        jasperParameter.put("smkAlmamaterProses", smkAlmamaterProses);
        jasperParameter.put("smkPvtProses", smkPvtProses);
        jasperParameter.put("smkIppLunas", smkIppLunas);
        jasperParameter.put("smkIpspLunas", smkIpspLunas);
        jasperParameter.put("smkIksLunas", smkIksLunas);
        jasperParameter.put("smkPasbLunas", smkPasbLunas);
        jasperParameter.put("smkIpsbLunas", smkIpsbLunas);
        jasperParameter.put("smkOsisLunas", smkOsisLunas);
        jasperParameter.put("smkAttributeLunas", smkAttributeLunas);
        jasperParameter.put("smkSeragamLunas", smkSeragamLunas);
        jasperParameter.put("smkAlmamaterLunas", smkAlmamaterLunas);
        jasperParameter.put("smkPvtLunas", smkPvtLunas);
        jasperParameter.put("smkIppBatal", smkIppBatal);
        jasperParameter.put("smkIpspBatal", smkIpspBatal);
        jasperParameter.put("smkIksBatal", smkIksBatal);
        jasperParameter.put("smkPasbBatal", smkPasbBatal);
        jasperParameter.put("smkIpsbBatal", smkIpsbBatal);
        jasperParameter.put("smkOsisBatal", smkOsisBatal);
        jasperParameter.put("smkAttributeBatal", smkAttributeBatal);
        jasperParameter.put("smkSeragamBatal", smkSeragamBatal);
        jasperParameter.put("smkAlmamaterBatal", smkAlmamaterBatal);
        jasperParameter.put("smkPvtBatal", smkPvtBatal);
        
         String fileName = "C://printout//PrintOutRekapBeritaAcara.jrxml";
            String filetoPrint = "C://printout//PrintOutRekapBeritaAcara.jrprint";
            String filetoFill = "C://printout//PrintOutRekapBeritaAcara.jasper";
            //String filePdf = "C://printout//PrintOutReportPerKasir.pdf";
            String filePdf = "C://printout//PrintOutRekapBeritaAcara.pdf";
       JasperCompileManager.compileReportToFile(fileName);
            
            
            JasperFillManager.fillReportToFile(filetoFill, jasperParameter , connection);
            JasperPrint jp = JasperFillManager.fillReport(filetoFill, jasperParameter, connection);
            JasperViewer.viewReport(jp, false);
            JasperExportManager.exportReportToPdfFile(jp, filePdf);
            JasperPrintManager.printReport(filetoPrint, true);
            
            
            jasperReport = JasperCompileManager.compileReport
        ("C://printout//PrintOutRekapBeritaAcara.jrxml");

        // filling report with data from data source

        jasperPrint = JasperFillManager.fillReport(jasperReport,jasperParameter, connection); 
        // exporting process
        // 1- export to PDF
        JasperExportManager.exportReportToPdfFile(jasperPrint, "C://printout//PrintOutRekapBeritaAcara.pdf");

        // 2- export to HTML
        JasperExportManager.exportReportToHtmlFile(jasperPrint, "C://printout//PrintOutRekapBeritaAcara.html" ); 

        // 3- export to Excel sheet
        JRXlsExporter exporter = new JRXlsExporter();
        exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
        exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, "C://printout//PrintOutRekapBeritaAcara.xls" );

        exporter.exportReport();
    }
    
    public void printTunggakanPerKelas(String targetLevel) throws JRException, PrinterException, SQLException {
         HashMap jasperParameter = new HashMap();
        //jasperParameter.put("PARAM_CLERK_ID", Long.valueOf(cl.id));
         printout.TunggakanPerKelas pb = new TunggakanPerKelas();
        Connection connection = pb.establishConnection(); 
        //jasperParameter.put("Param_Level", "%".concat(jComboBoxLevel1.getSelectedItem().toString()).concat("%"));
        
        jasperParameter.put("CurrentLevel", targetLevel);
        
        
         String fileName = "C://printout//PrintOutTunggakanPerkelas.jrxml";
            String filetoPrint = "C://printout//PrintOutTunggakanPerkelas.jrprint";
            String filetoFill = "C://printout//PrintOutTunggakanPerkelas.jasper";
            //String filePdf = "C://printout//PrintOutReportPerKasir.pdf";
            String filePdf = "C://printout//PrintOutTunggakanPerkelas.pdf";
       JasperCompileManager.compileReportToFile(fileName);
            
            
            JasperFillManager.fillReportToFile(filetoFill, jasperParameter , connection);
            JasperPrint jp = JasperFillManager.fillReport(filetoFill, jasperParameter, connection);
            JasperViewer.viewReport(jp, false);
            JasperExportManager.exportReportToPdfFile(jp, filePdf);
            JasperPrintManager.printReport(filetoPrint, true);
            
            
            jasperReport = JasperCompileManager.compileReport
        ("C://printout//PrintOutTunggakanPerkelas.jrxml");

        // filling report with data from data source

        jasperPrint = JasperFillManager.fillReport(jasperReport,jasperParameter, connection); 
        // exporting process
        // 1- export to PDF
        JasperExportManager.exportReportToPdfFile(jasperPrint, "C://printout//PrintOutTunggakanPerkelas.pdf");

        // 2- export to HTML
        JasperExportManager.exportReportToHtmlFile(jasperPrint, "C://printout//PrintOutTunggakanPerkelas.html" ); 

        // 3- export to Excel sheet
        JRXlsExporter exporter = new JRXlsExporter();
        exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
        exporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, "C://printout//PrintOutTunggakanPerkelas.xls" );

        exporter.exportReport();
    }
    
    
    
    private ArrayList<BigDecimal> farmIPP(Kalender startDate, Kalender endDate, Clerk clerk) throws SQLException, KasirException{
        ArrayList<BigDecimal> retVal = new ArrayList();
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        BigDecimal amountSMA10=BigDecimal.ZERO;
        BigDecimal amountSMA11=BigDecimal.ZERO;
        BigDecimal amountSMA12=BigDecimal.ZERO;
        BigDecimal amountSMK10=BigDecimal.ZERO;
        BigDecimal amountSMK11=BigDecimal.ZERO;
        BigDecimal amountSMK12=BigDecimal.ZERO;
        BigDecimal amountSMP7=BigDecimal.ZERO;
        BigDecimal amountSMP8=BigDecimal.ZERO;
        BigDecimal amountSMP9=BigDecimal.ZERO;
        BigDecimal amountSMAPasca=BigDecimal.ZERO;
        BigDecimal amountSMKPasca=BigDecimal.ZERO;
        BigDecimal amountSMPPasca=BigDecimal.ZERO;
       
        List<TransactionDetail> ippTransactionDetails = new ArrayList<>();
        Statement stmt = null;
        //STEP 4: Execute a query
        stmt = connection.createStatement();
        String sql;
        if(clerk !=null)
        sql = "SELECT * FROM IPPTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH' AND IDClerk ="+clerk.id;
        else
        sql = "SELECT * FROM IPPTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH'";
        ResultSet rs = stmt.executeQuery(sql);

        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           int id  = rs.getInt("ID");
           ippTransactionDetails.add(Control.selectTDetail(TransactionDetail.Tipe.IPPTransaction, id));
        }
        Profil temp = new Profil();
        for(int i=0;i<ippTransactionDetails.size();i++){
            temp = Control.selectProfil(ippTransactionDetails.get(i).noIndukProfil);
            if(temp.tanggalLulus==null){
                switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMA10 = amountSMA10.add(BigDecimal.valueOf(ippTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMA11 = amountSMA11.add(BigDecimal.valueOf(ippTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMA12= amountSMA12.add(BigDecimal.valueOf(ippTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMP":
                      switch(temp.currentLevel.level2.toString()){
                          case "7":
                              amountSMP7 = amountSMP7.add(BigDecimal.valueOf(ippTransactionDetails.get(i).amount));
                              break;
                          case "8":
                              amountSMP8 = amountSMP8.add(BigDecimal.valueOf(ippTransactionDetails.get(i).amount));
                              break;
                          case "9":
                              amountSMP9 = amountSMP9.add(BigDecimal.valueOf(ippTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMK":
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMK10 = amountSMK10.add(BigDecimal.valueOf(ippTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMK11 = amountSMK11.add(BigDecimal.valueOf(ippTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMK12 = amountSMK12.add(BigDecimal.valueOf(ippTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  default : 
                      break;
                 }
            }else{ // FOR PASCA
                 switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      amountSMAPasca = amountSMAPasca.add(BigDecimal.valueOf(ippTransactionDetails.get(i).amount));
                      break;
                  case "SMP":
                      amountSMPPasca = amountSMPPasca.add(BigDecimal.valueOf(ippTransactionDetails.get(i).amount));
                      break;
                  case "SMK":
                      amountSMKPasca = amountSMKPasca.add(BigDecimal.valueOf(ippTransactionDetails.get(i).amount));
                      break;
                  default : ;
                      break;
                 }
            }
        }
          rs.close();
          stmt.close();
          connection.close();
          retVal.add(amountSMP7);
          retVal.add(amountSMP8);
          retVal.add(amountSMP9);
          retVal.add(amountSMP7.add(amountSMP8.add(amountSMP9)));
          retVal.add(amountSMPPasca);
          retVal.add(amountSMA10);
          retVal.add(amountSMA11);
          retVal.add(amountSMA12);
          retVal.add(amountSMA10.add(amountSMA11.add(amountSMA12)));
          retVal.add(amountSMAPasca);
          retVal.add(amountSMK10);
          retVal.add(amountSMK11);
          retVal.add(amountSMK12);
          retVal.add(amountSMK10.add(amountSMK11.add(amountSMK12)));
          retVal.add(amountSMKPasca);
          return retVal;
    }
    
    private ArrayList<BigDecimal> farmAlmamater(Kalender startDate, Kalender endDate, Clerk clerk) throws SQLException, KasirException{
        ArrayList<BigDecimal> retVal = new ArrayList();
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        BigDecimal amountSMA10=BigDecimal.ZERO;
        BigDecimal amountSMA11=BigDecimal.ZERO;
        BigDecimal amountSMA12=BigDecimal.ZERO;
        BigDecimal amountSMK10=BigDecimal.ZERO;
        BigDecimal amountSMK11=BigDecimal.ZERO;
        BigDecimal amountSMK12=BigDecimal.ZERO;
        BigDecimal amountSMP7=BigDecimal.ZERO;
        BigDecimal amountSMP8=BigDecimal.ZERO;
        BigDecimal amountSMP9=BigDecimal.ZERO;
        BigDecimal amountSMAPasca=BigDecimal.ZERO;
        BigDecimal amountSMKPasca=BigDecimal.ZERO;
        BigDecimal amountSMPPasca=BigDecimal.ZERO;
        List<TransactionDetail> almamaterTransactionDetails = new ArrayList<>();
        
        Statement stmt = null;
        //STEP 4: Execute a query
        stmt = connection.createStatement();
        String sql;
        if(clerk !=null)
            sql = "SELECT * FROM AlmamaterTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH' AND IDClerk="+clerk.id;
        else
            sql = "SELECT * FROM AlmamaterTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH'";
        ResultSet rs = stmt.executeQuery(sql);
        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           int id  = rs.getInt("ID");
           almamaterTransactionDetails.add(Control.selectTDetail(TransactionDetail.Tipe.AlmamaterTransaction, id));
        }
        Profil temp = new Profil();
        for(int i=0;i<almamaterTransactionDetails.size();i++){
            temp = Control.selectProfil(almamaterTransactionDetails.get(i).noIndukProfil);
            if(temp.tanggalLulus==null){
                switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMA10 = amountSMA10.add(BigDecimal.valueOf(almamaterTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMA11 = amountSMA11.add(BigDecimal.valueOf(almamaterTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMA12= amountSMA12.add(BigDecimal.valueOf(almamaterTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMP":
                      switch(temp.currentLevel.level2.toString()){
                          case "7":
                              amountSMP7 = amountSMP7.add(BigDecimal.valueOf(almamaterTransactionDetails.get(i).amount));
                              break;
                          case "8":
                              amountSMP8 = amountSMP8.add(BigDecimal.valueOf(almamaterTransactionDetails.get(i).amount));
                              break;
                          case "9":
                              amountSMP9 = amountSMP9.add(BigDecimal.valueOf(almamaterTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMK":
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMK10 = amountSMK10.add(BigDecimal.valueOf(almamaterTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMK11 = amountSMK11.add(BigDecimal.valueOf(almamaterTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMK12 = amountSMK12.add(BigDecimal.valueOf(almamaterTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  default : 
                      break;
                 }
            }else{ // FOR PASCA
                 switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      amountSMAPasca = amountSMAPasca.add(BigDecimal.valueOf(almamaterTransactionDetails.get(i).amount));
                      break;
                  case "SMP":
                      amountSMPPasca = amountSMPPasca.add(BigDecimal.valueOf(almamaterTransactionDetails.get(i).amount));
                      break;
                  case "SMK":
                      amountSMKPasca = amountSMKPasca.add(BigDecimal.valueOf(almamaterTransactionDetails.get(i).amount));
                      break;
                  default : ;
                      break;
                 }
            }
        }
          rs.close();
          stmt.close();
          connection.close();
          retVal.add(amountSMP7);
          retVal.add(amountSMP8);
          retVal.add(amountSMP9);
          retVal.add(amountSMP7.add(amountSMP8.add(amountSMP9)));
          retVal.add(amountSMPPasca);
          retVal.add(amountSMA10);
          retVal.add(amountSMA11);
          retVal.add(amountSMA12);
          retVal.add(amountSMA10.add(amountSMA11.add(amountSMA12)));
          retVal.add(amountSMAPasca);
          retVal.add(amountSMK10);
          retVal.add(amountSMK11);
          retVal.add(amountSMK12);
          retVal.add(amountSMK10.add(amountSMK11.add(amountSMK12)));
          retVal.add(amountSMKPasca);
          return retVal;
      }
    
    private ArrayList<BigDecimal> farmAttribute(Kalender startDate, Kalender endDate, Clerk clerk) throws SQLException, KasirException{
        ArrayList<BigDecimal> retVal = new ArrayList();
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        BigDecimal amountSMA10=BigDecimal.ZERO;
        BigDecimal amountSMA11=BigDecimal.ZERO;
        BigDecimal amountSMA12=BigDecimal.ZERO;
        BigDecimal amountSMK10=BigDecimal.ZERO;
        BigDecimal amountSMK11=BigDecimal.ZERO;
        BigDecimal amountSMK12=BigDecimal.ZERO;
        BigDecimal amountSMP7=BigDecimal.ZERO;
        BigDecimal amountSMP8=BigDecimal.ZERO;
        BigDecimal amountSMP9=BigDecimal.ZERO;
        BigDecimal amountSMAPasca=BigDecimal.ZERO;
        BigDecimal amountSMKPasca=BigDecimal.ZERO;
        BigDecimal amountSMPPasca=BigDecimal.ZERO;
        List<TransactionDetail> attributeTransactionDetails = new ArrayList<>();
        
        Statement stmt = null;
        //STEP 4: Execute a query
        stmt = connection.createStatement();
        String sql;
        if(clerk!=null)
            sql = "SELECT * FROM AttributeTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH' AND IDClerk="+clerk.id;
        else
            sql = "SELECT * FROM AttributeTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH'";
        ResultSet rs = stmt.executeQuery(sql);
        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           int id  = rs.getInt("ID");
           attributeTransactionDetails.add(Control.selectTDetail(TransactionDetail.Tipe.AttributeTransaction, id));
        }
        Profil temp = new Profil();
        for(int i=0;i<attributeTransactionDetails.size();i++){
            temp = Control.selectProfil(attributeTransactionDetails.get(i).noIndukProfil);
            if(temp.tanggalLulus==null){
                switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMA10 = amountSMA10.add(BigDecimal.valueOf(attributeTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMA11 = amountSMA11.add(BigDecimal.valueOf(attributeTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMA12= amountSMA12.add(BigDecimal.valueOf(attributeTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMP":
                      switch(temp.currentLevel.level2.toString()){
                          case "7":
                              amountSMP7 = amountSMP7.add(BigDecimal.valueOf(attributeTransactionDetails.get(i).amount));
                              break;
                          case "8":
                              amountSMP8 = amountSMP8.add(BigDecimal.valueOf(attributeTransactionDetails.get(i).amount));
                              break;
                          case "9":
                              amountSMP9 = amountSMP9.add(BigDecimal.valueOf(attributeTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMK":
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMK10 = amountSMK10.add(BigDecimal.valueOf(attributeTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMK11 = amountSMK11.add(BigDecimal.valueOf(attributeTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMK12 = amountSMK12.add(BigDecimal.valueOf(attributeTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  default : 
                      break;
                 }
            }else{ // FOR PASCA
                 switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      amountSMAPasca = amountSMAPasca.add(BigDecimal.valueOf(attributeTransactionDetails.get(i).amount));
                      break;
                  case "SMP":
                      amountSMPPasca = amountSMPPasca.add(BigDecimal.valueOf(attributeTransactionDetails.get(i).amount));
                      break;
                  case "SMK":
                      amountSMKPasca = amountSMKPasca.add(BigDecimal.valueOf(attributeTransactionDetails.get(i).amount));
                      break;
                  default : ;
                      break;
                 }
            }
        }
          rs.close();
          stmt.close();
          connection.close();
          retVal.add(amountSMP7);
          retVal.add(amountSMP8);
          retVal.add(amountSMP9);
          retVal.add(amountSMP7.add(amountSMP8.add(amountSMP9)));
          retVal.add(amountSMPPasca);
          retVal.add(amountSMA10);
          retVal.add(amountSMA11);
          retVal.add(amountSMA12);
          retVal.add(amountSMA10.add(amountSMA11.add(amountSMA12)));
          retVal.add(amountSMAPasca);
          retVal.add(amountSMK10);
          retVal.add(amountSMK11);
          retVal.add(amountSMK12);
          retVal.add(amountSMK10.add(amountSMK11.add(amountSMK12)));
          retVal.add(amountSMKPasca);
          return retVal;
      }
    
    private ArrayList<BigDecimal> farmBeasiswa(Kalender startDate, Kalender endDate, Clerk clerk) throws SQLException, KasirException{
        ArrayList<BigDecimal> retVal = new ArrayList();
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        BigDecimal amountSMA10=BigDecimal.ZERO;
        BigDecimal amountSMA11=BigDecimal.ZERO;
        BigDecimal amountSMA12=BigDecimal.ZERO;
        BigDecimal amountSMK10=BigDecimal.ZERO;
        BigDecimal amountSMK11=BigDecimal.ZERO;
        BigDecimal amountSMK12=BigDecimal.ZERO;
        BigDecimal amountSMP7=BigDecimal.ZERO;
        BigDecimal amountSMP8=BigDecimal.ZERO;
        BigDecimal amountSMP9=BigDecimal.ZERO;
        BigDecimal amountSMAPasca=BigDecimal.ZERO;
        BigDecimal amountSMKPasca=BigDecimal.ZERO;
        BigDecimal amountSMPPasca=BigDecimal.ZERO;
        List<TransactionDetail> beasiswaTransactionDetails = new ArrayList<>();
        
        Statement stmt = null;
        //STEP 4: Execute a query
        stmt = connection.createStatement();
        String sql;
        if(clerk!=null)
            sql = "SELECT * FROM BeasiswaTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH' AND IDClerk="+clerk.id;
        else
            sql = "SELECT * FROM BeasiswaTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH'";
        ResultSet rs = stmt.executeQuery(sql);
        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           int id  = rs.getInt("ID");
           beasiswaTransactionDetails.add(Control.selectTDetail(TransactionDetail.Tipe.BeasiswaTransaction, id));
        }
        Profil temp = new Profil();
        for(int i=0;i<beasiswaTransactionDetails.size();i++){
            temp = Control.selectProfil(beasiswaTransactionDetails.get(i).noIndukProfil);
            if(temp.tanggalLulus==null){
                switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMA10 = amountSMA10.add(BigDecimal.valueOf(beasiswaTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMA11 = amountSMA11.add(BigDecimal.valueOf(beasiswaTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMA12= amountSMA12.add(BigDecimal.valueOf(beasiswaTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMP":
                      switch(temp.currentLevel.level2.toString()){
                          case "7":
                              amountSMP7 = amountSMP7.add(BigDecimal.valueOf(beasiswaTransactionDetails.get(i).amount));
                              break;
                          case "8":
                              amountSMP8 = amountSMP8.add(BigDecimal.valueOf(beasiswaTransactionDetails.get(i).amount));
                              break;
                          case "9":
                              amountSMP9 = amountSMP9.add(BigDecimal.valueOf(beasiswaTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMK":
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMK10 = amountSMK10.add(BigDecimal.valueOf(beasiswaTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMK11 = amountSMK11.add(BigDecimal.valueOf(beasiswaTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMK12 = amountSMK12.add(BigDecimal.valueOf(beasiswaTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  default : 
                      break;
                 }
            }else{ // FOR PASCA
                 switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      amountSMAPasca = amountSMAPasca.add(BigDecimal.valueOf(beasiswaTransactionDetails.get(i).amount));
                      break;
                  case "SMP":
                      amountSMPPasca = amountSMPPasca.add(BigDecimal.valueOf(beasiswaTransactionDetails.get(i).amount));
                      break;
                  case "SMK":
                      amountSMKPasca = amountSMKPasca.add(BigDecimal.valueOf(beasiswaTransactionDetails.get(i).amount));
                      break;
                  default : ;
                      break;
                 }
            }
        }
          rs.close();
          stmt.close();
          connection.close();
          retVal.add(amountSMP7);
          retVal.add(amountSMP8);
          retVal.add(amountSMP9);
          retVal.add(amountSMP7.add(amountSMP8.add(amountSMP9)));
          retVal.add(amountSMPPasca);
          retVal.add(amountSMA10);
          retVal.add(amountSMA11);
          retVal.add(amountSMA12);
          retVal.add(amountSMA10.add(amountSMA11.add(amountSMA12)));
          retVal.add(amountSMAPasca);
          retVal.add(amountSMK10);
          retVal.add(amountSMK11);
          retVal.add(amountSMK12);
          retVal.add(amountSMK10.add(amountSMK11.add(amountSMK12)));
          retVal.add(amountSMKPasca);
          return retVal;
      }
    
    private ArrayList<BigDecimal> farmBeasiswaCost(Kalender startDate, Kalender endDate, Clerk clerk) throws SQLException, KasirException{
        ArrayList<BigDecimal> retVal = new ArrayList();
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        BigDecimal amountSMA10=BigDecimal.ZERO;
        BigDecimal amountSMA11=BigDecimal.ZERO;
        BigDecimal amountSMA12=BigDecimal.ZERO;
        BigDecimal amountSMK10=BigDecimal.ZERO;
        BigDecimal amountSMK11=BigDecimal.ZERO;
        BigDecimal amountSMK12=BigDecimal.ZERO;
        BigDecimal amountSMP7=BigDecimal.ZERO;
        BigDecimal amountSMP8=BigDecimal.ZERO;
        BigDecimal amountSMP9=BigDecimal.ZERO;
        BigDecimal amountSMAPasca=BigDecimal.ZERO;
        BigDecimal amountSMKPasca=BigDecimal.ZERO;
        BigDecimal amountSMPPasca=BigDecimal.ZERO;
        List<TransactionDetail> beasiswacostTransactionDetails = new ArrayList<>();
        
        Statement stmt = null;
        //STEP 4: Execute a query
        stmt = connection.createStatement();
        String sql;
        if(clerk!=null)
            sql = "SELECT * FROM BeasiswaCostTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH' AND IDClerk="+clerk.id;
        else
            sql = "SELECT * FROM BeasiswaCostTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH'";
        ResultSet rs = stmt.executeQuery(sql);
        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           int id  = rs.getInt("ID");
           beasiswacostTransactionDetails.add(Control.selectTDetail(TransactionDetail.Tipe.BeasiswaCostTransaction, id));
        }
        Profil temp = new Profil();
        for(int i=0;i<beasiswacostTransactionDetails.size();i++){
            temp = Control.selectProfil(beasiswacostTransactionDetails.get(i).noIndukProfil);
            if(temp.tanggalLulus==null){
                switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMA10 = amountSMA10.add(BigDecimal.valueOf(beasiswacostTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMA11 = amountSMA11.add(BigDecimal.valueOf(beasiswacostTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMA12= amountSMA12.add(BigDecimal.valueOf(beasiswacostTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMP":
                      switch(temp.currentLevel.level2.toString()){
                          case "7":
                              amountSMP7 = amountSMP7.add(BigDecimal.valueOf(beasiswacostTransactionDetails.get(i).amount));
                              break;
                          case "8":
                              amountSMP8 = amountSMP8.add(BigDecimal.valueOf(beasiswacostTransactionDetails.get(i).amount));
                              break;
                          case "9":
                              amountSMP9 = amountSMP9.add(BigDecimal.valueOf(beasiswacostTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMK":
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMK10 = amountSMK10.add(BigDecimal.valueOf(beasiswacostTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMK11 = amountSMK11.add(BigDecimal.valueOf(beasiswacostTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMK12 = amountSMK12.add(BigDecimal.valueOf(beasiswacostTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  default : 
                      break;
                 }
            }else{ // FOR PASCA
                 switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      amountSMAPasca = amountSMAPasca.add(BigDecimal.valueOf(beasiswacostTransactionDetails.get(i).amount));
                      break;
                  case "SMP":
                      amountSMPPasca = amountSMPPasca.add(BigDecimal.valueOf(beasiswacostTransactionDetails.get(i).amount));
                      break;
                  case "SMK":
                      amountSMKPasca = amountSMKPasca.add(BigDecimal.valueOf(beasiswacostTransactionDetails.get(i).amount));
                      break;
                  default : ;
                      break;
                 }
            }
        }
          rs.close();
          stmt.close();
          connection.close();
          retVal.add(amountSMP7);
          retVal.add(amountSMP8);
          retVal.add(amountSMP9);
          retVal.add(amountSMP7.add(amountSMP8.add(amountSMP9)));
          retVal.add(amountSMPPasca);
          retVal.add(amountSMA10);
          retVal.add(amountSMA11);
          retVal.add(amountSMA12);
          retVal.add(amountSMA10.add(amountSMA11.add(amountSMA12)));
          retVal.add(amountSMAPasca);
          retVal.add(amountSMK10);
          retVal.add(amountSMK11);
          retVal.add(amountSMK12);
          retVal.add(amountSMK10.add(amountSMK11.add(amountSMK12)));
          retVal.add(amountSMKPasca);
          return retVal;
      }
    
    private ArrayList<BigDecimal> farmBuku(Kalender startDate, Kalender endDate, Clerk clerk) throws SQLException, KasirException{
        ArrayList<BigDecimal> retVal = new ArrayList();
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        BigDecimal amountSMA10=BigDecimal.ZERO;
        BigDecimal amountSMA11=BigDecimal.ZERO;
        BigDecimal amountSMA12=BigDecimal.ZERO;
        BigDecimal amountSMK10=BigDecimal.ZERO;
        BigDecimal amountSMK11=BigDecimal.ZERO;
        BigDecimal amountSMK12=BigDecimal.ZERO;
        BigDecimal amountSMP7=BigDecimal.ZERO;
        BigDecimal amountSMP8=BigDecimal.ZERO;
        BigDecimal amountSMP9=BigDecimal.ZERO;
        BigDecimal amountSMAPasca=BigDecimal.ZERO;
        BigDecimal amountSMKPasca=BigDecimal.ZERO;
        BigDecimal amountSMPPasca=BigDecimal.ZERO;
        List<TransactionDetail> bukuTransactionDetails = new ArrayList<>();
        
        Statement stmt = null;
        //STEP 4: Execute a query
        stmt = connection.createStatement();
        String sql;
        if(clerk!=null)
            sql = "SELECT * FROM BukuTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH' AND IDClerk="+clerk.id;
        else
           sql = "SELECT * FROM BukuTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH'";
        ResultSet rs = stmt.executeQuery(sql);
        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           int id  = rs.getInt("ID");
           bukuTransactionDetails.add(Control.selectTDetail(TransactionDetail.Tipe.BukuTransaction, id));
        }
        Profil temp = new Profil();
        for(int i=0;i<bukuTransactionDetails.size();i++){
            temp = Control.selectProfil(bukuTransactionDetails.get(i).noIndukProfil);
            if(temp.tanggalLulus==null){
                switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMA10 = amountSMA10.add(BigDecimal.valueOf(bukuTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMA11 = amountSMA11.add(BigDecimal.valueOf(bukuTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMA12= amountSMA12.add(BigDecimal.valueOf(bukuTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMP":
                      switch(temp.currentLevel.level2.toString()){
                          case "7":
                              amountSMP7 = amountSMP7.add(BigDecimal.valueOf(bukuTransactionDetails.get(i).amount));
                              break;
                          case "8":
                              amountSMP8 = amountSMP8.add(BigDecimal.valueOf(bukuTransactionDetails.get(i).amount));
                              break;
                          case "9":
                              amountSMP9 = amountSMP9.add(BigDecimal.valueOf(bukuTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMK":
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMK10 = amountSMK10.add(BigDecimal.valueOf(bukuTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMK11 = amountSMK11.add(BigDecimal.valueOf(bukuTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMK12 = amountSMK12.add(BigDecimal.valueOf(bukuTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  default : 
                      break;
                 }
            }else{ // FOR PASCA
                 switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      amountSMAPasca = amountSMAPasca.add(BigDecimal.valueOf(bukuTransactionDetails.get(i).amount));
                      break;
                  case "SMP":
                      amountSMPPasca = amountSMPPasca.add(BigDecimal.valueOf(bukuTransactionDetails.get(i).amount));
                      break;
                  case "SMK":
                      amountSMKPasca = amountSMKPasca.add(BigDecimal.valueOf(bukuTransactionDetails.get(i).amount));
                      break;
                  default : ;
                      break;
                 }
            }
        }
          rs.close();
          stmt.close();
          connection.close();
          retVal.add(amountSMP7);
          retVal.add(amountSMP8);
          retVal.add(amountSMP9);
          retVal.add(amountSMP7.add(amountSMP8.add(amountSMP9)));
          retVal.add(amountSMPPasca);
          retVal.add(amountSMA10);
          retVal.add(amountSMA11);
          retVal.add(amountSMA12);
          retVal.add(amountSMA10.add(amountSMA11.add(amountSMA12)));
          retVal.add(amountSMAPasca);
          retVal.add(amountSMK10);
          retVal.add(amountSMK11);
          retVal.add(amountSMK12);
          retVal.add(amountSMK10.add(amountSMK11.add(amountSMK12)));
          retVal.add(amountSMKPasca);
          return retVal;
      }
    
    private ArrayList<BigDecimal> farmTunggakanPasca(Kalender startDate, Kalender endDate, Clerk clerk) throws SQLException, KasirException{
        ArrayList<BigDecimal> retVal = new ArrayList();
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        BigDecimal amountSMA10=BigDecimal.ZERO;
        BigDecimal amountSMA11=BigDecimal.ZERO;
        BigDecimal amountSMA12=BigDecimal.ZERO;
        BigDecimal amountSMK10=BigDecimal.ZERO;
        BigDecimal amountSMK11=BigDecimal.ZERO;
        BigDecimal amountSMK12=BigDecimal.ZERO;
        BigDecimal amountSMP7=BigDecimal.ZERO;
        BigDecimal amountSMP8=BigDecimal.ZERO;
        BigDecimal amountSMP9=BigDecimal.ZERO;
        BigDecimal amountSMAPasca=BigDecimal.ZERO;
        BigDecimal amountSMKPasca=BigDecimal.ZERO;
        BigDecimal amountSMPPasca=BigDecimal.ZERO;
        List<TransactionDetail> tunggakanPascaTransactionDetails = new ArrayList<>();
        
        Statement stmt = null;
        //STEP 4: Execute a query
        stmt = connection.createStatement();
        String sql;
        if(clerk!=null)
            sql = "SELECT * FROM TunggakanPascaTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH' AND IDClerk="+clerk.id;
        else
            sql = "SELECT * FROM TunggakanPascaTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH'";
        ResultSet rs = stmt.executeQuery(sql);
        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           int id  = rs.getInt("ID");
           tunggakanPascaTransactionDetails.add(Control.selectTDetail(TransactionDetail.Tipe.TunggakanPascaTransaction, id));
        }
        Profil temp = new Profil();
        for(int i=0;i<tunggakanPascaTransactionDetails.size();i++){
            temp = Control.selectProfil(tunggakanPascaTransactionDetails.get(i).noIndukProfil);
            if(temp.tanggalLulus==null){
                switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMA10 = amountSMA10.add(BigDecimal.valueOf(tunggakanPascaTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMA11 = amountSMA11.add(BigDecimal.valueOf(tunggakanPascaTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMA12= amountSMA12.add(BigDecimal.valueOf(tunggakanPascaTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMP":
                      switch(temp.currentLevel.level2.toString()){
                          case "7":
                              amountSMP7 = amountSMP7.add(BigDecimal.valueOf(tunggakanPascaTransactionDetails.get(i).amount));
                              break;
                          case "8":
                              amountSMP8 = amountSMP8.add(BigDecimal.valueOf(tunggakanPascaTransactionDetails.get(i).amount));
                              break;
                          case "9":
                              amountSMP9 = amountSMP9.add(BigDecimal.valueOf(tunggakanPascaTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMK":
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMK10 = amountSMK10.add(BigDecimal.valueOf(tunggakanPascaTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMK11 = amountSMK11.add(BigDecimal.valueOf(tunggakanPascaTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMK12 = amountSMK12.add(BigDecimal.valueOf(tunggakanPascaTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  default : 
                      break;
                 }
            }else{ // FOR PASCA
                 switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      amountSMAPasca = amountSMAPasca.add(BigDecimal.valueOf(tunggakanPascaTransactionDetails.get(i).amount));
                      break;
                  case "SMP":
                      amountSMPPasca = amountSMPPasca.add(BigDecimal.valueOf(tunggakanPascaTransactionDetails.get(i).amount));
                      break;
                  case "SMK":
                      amountSMKPasca = amountSMKPasca.add(BigDecimal.valueOf(tunggakanPascaTransactionDetails.get(i).amount));
                      break;
                  default : ;
                      break;
                 }
            }
        }
          rs.close();
          stmt.close();
          connection.close();
          retVal.add(amountSMP7);
          retVal.add(amountSMP8);
          retVal.add(amountSMP9);
          retVal.add(amountSMP7.add(amountSMP8.add(amountSMP9)));
          retVal.add(amountSMPPasca);
          retVal.add(amountSMA10);
          retVal.add(amountSMA11);
          retVal.add(amountSMA12);
          retVal.add(amountSMA10.add(amountSMA11.add(amountSMA12)));
          retVal.add(amountSMAPasca);
          retVal.add(amountSMK10);
          retVal.add(amountSMK11);
          retVal.add(amountSMK12);
          retVal.add(amountSMK10.add(amountSMK11.add(amountSMK12)));
          retVal.add(amountSMKPasca);
          return retVal;
      }
    
    private ArrayList<BigDecimal> farmIDD(Kalender startDate, Kalender endDate, Clerk clerk) throws SQLException, KasirException{
        ArrayList<BigDecimal> retVal = new ArrayList();
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        BigDecimal amountSMA10=BigDecimal.ZERO;
        BigDecimal amountSMA11=BigDecimal.ZERO;
        BigDecimal amountSMA12=BigDecimal.ZERO;
        BigDecimal amountSMK10=BigDecimal.ZERO;
        BigDecimal amountSMK11=BigDecimal.ZERO;
        BigDecimal amountSMK12=BigDecimal.ZERO;
        BigDecimal amountSMP7=BigDecimal.ZERO;
        BigDecimal amountSMP8=BigDecimal.ZERO;
        BigDecimal amountSMP9=BigDecimal.ZERO;
        BigDecimal amountSMAPasca=BigDecimal.ZERO;
        BigDecimal amountSMKPasca=BigDecimal.ZERO;
        BigDecimal amountSMPPasca=BigDecimal.ZERO;
       
        List<TransactionDetail> iddTransactionDetails = new ArrayList<>();
        Statement stmt = null;
        //STEP 4: Execute a query
        stmt = connection.createStatement();
        String sql;
        if(clerk!=null)
            sql = "SELECT * FROM IDDTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH' AND IDClerk="+clerk.id;
        else
            sql = "SELECT * FROM IDDTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH'";
        ResultSet rs = stmt.executeQuery(sql);

        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           int id  = rs.getInt("ID");
           iddTransactionDetails.add(Control.selectTDetail(TransactionDetail.Tipe.IDDTransaction, id));
        }
        Profil temp = new Profil();
        for(int i=0;i<iddTransactionDetails.size();i++){
            temp = Control.selectProfil(iddTransactionDetails.get(i).noIndukProfil);
            if(temp.tanggalLulus==null){
                switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMA10 = amountSMA10.add(BigDecimal.valueOf(iddTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMA11 = amountSMA11.add(BigDecimal.valueOf(iddTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMA12= amountSMA12.add(BigDecimal.valueOf(iddTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMP":
                      switch(temp.currentLevel.level2.toString()){
                          case "7":
                              amountSMP7 = amountSMP7.add(BigDecimal.valueOf(iddTransactionDetails.get(i).amount));
                              break;
                          case "8":
                              amountSMP8 = amountSMP8.add(BigDecimal.valueOf(iddTransactionDetails.get(i).amount));
                              break;
                          case "9":
                              amountSMP9 = amountSMP9.add(BigDecimal.valueOf(iddTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMK":
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMK10 = amountSMK10.add(BigDecimal.valueOf(iddTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMK11 = amountSMK11.add(BigDecimal.valueOf(iddTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMK12 = amountSMK12.add(BigDecimal.valueOf(iddTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  default : 
                      break;
                 }
            }else{ // FOR PASCA
                 switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      amountSMAPasca = amountSMAPasca.add(BigDecimal.valueOf(iddTransactionDetails.get(i).amount));
                      break;
                  case "SMP":
                      amountSMPPasca = amountSMPPasca.add(BigDecimal.valueOf(iddTransactionDetails.get(i).amount));
                      break;
                  case "SMK":
                      amountSMKPasca = amountSMKPasca.add(BigDecimal.valueOf(iddTransactionDetails.get(i).amount));
                      break;
                  default : ;
                      break;
                 }
            }
        }
          rs.close();
          stmt.close();
          connection.close();
          retVal.add(amountSMP7);
          retVal.add(amountSMP8);
          retVal.add(amountSMP9);
          retVal.add(amountSMP7.add(amountSMP8.add(amountSMP9)));
          retVal.add(amountSMPPasca);
          retVal.add(amountSMA10);
          retVal.add(amountSMA11);
          retVal.add(amountSMA12);
          retVal.add(amountSMA10.add(amountSMA11.add(amountSMA12)));
          retVal.add(amountSMAPasca);
          retVal.add(amountSMK10);
          retVal.add(amountSMK11);
          retVal.add(amountSMK12);
          retVal.add(amountSMK10.add(amountSMK11.add(amountSMK12)));
          retVal.add(amountSMKPasca);
          return retVal;
    }

    private ArrayList<BigDecimal> farmIKS(Kalender startDate, Kalender endDate, Clerk clerk) throws SQLException, KasirException{
        ArrayList<BigDecimal> retVal = new ArrayList();
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        BigDecimal amountSMA10=BigDecimal.ZERO;
        BigDecimal amountSMA11=BigDecimal.ZERO;
        BigDecimal amountSMA12=BigDecimal.ZERO;
        BigDecimal amountSMK10=BigDecimal.ZERO;
        BigDecimal amountSMK11=BigDecimal.ZERO;
        BigDecimal amountSMK12=BigDecimal.ZERO;
        BigDecimal amountSMP7=BigDecimal.ZERO;
        BigDecimal amountSMP8=BigDecimal.ZERO;
        BigDecimal amountSMP9=BigDecimal.ZERO;
        BigDecimal amountSMAPasca=BigDecimal.ZERO;
        BigDecimal amountSMKPasca=BigDecimal.ZERO;
        BigDecimal amountSMPPasca=BigDecimal.ZERO;
       
        List<TransactionDetail> iksTransactionDetails = new ArrayList<>();
        Statement stmt = null;
        //STEP 4: Execute a query
        stmt = connection.createStatement();
        String sql;
        if(clerk!=null)
            sql = "SELECT * FROM IKSTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH' AND IDClerk="+clerk.id;
        else
            sql = "SELECT * FROM IKSTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH'";
        ResultSet rs = stmt.executeQuery(sql);

        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           int id  = rs.getInt("ID");
           iksTransactionDetails.add(Control.selectTDetail(TransactionDetail.Tipe.IKSTransaction, id));
        }
        Profil temp = new Profil();
        for(int i=0;i<iksTransactionDetails.size();i++){
            temp = Control.selectProfil(iksTransactionDetails.get(i).noIndukProfil);
            if(temp.tanggalLulus==null){
                switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMA10 = amountSMA10.add(BigDecimal.valueOf(iksTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMA11 = amountSMA11.add(BigDecimal.valueOf(iksTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMA12= amountSMA12.add(BigDecimal.valueOf(iksTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMP":
                      switch(temp.currentLevel.level2.toString()){
                          case "7":
                              amountSMP7 = amountSMP7.add(BigDecimal.valueOf(iksTransactionDetails.get(i).amount));
                              break;
                          case "8":
                              amountSMP8 = amountSMP8.add(BigDecimal.valueOf(iksTransactionDetails.get(i).amount));
                              break;
                          case "9":
                              amountSMP9 = amountSMP9.add(BigDecimal.valueOf(iksTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMK":
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMK10 = amountSMK10.add(BigDecimal.valueOf(iksTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMK11 = amountSMK11.add(BigDecimal.valueOf(iksTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMK12 = amountSMK12.add(BigDecimal.valueOf(iksTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  default : 
                      break;
                 }
            }else{ // FOR PASCA
                 switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      amountSMAPasca = amountSMAPasca.add(BigDecimal.valueOf(iksTransactionDetails.get(i).amount));
                      break;
                  case "SMP":
                      amountSMPPasca = amountSMPPasca.add(BigDecimal.valueOf(iksTransactionDetails.get(i).amount));
                      break;
                  case "SMK":
                      amountSMKPasca = amountSMKPasca.add(BigDecimal.valueOf(iksTransactionDetails.get(i).amount));
                      break;
                  default : ;
                      break;
                 }
            }
        }
          rs.close();
          stmt.close();
          connection.close();
          retVal.add(amountSMP7);
          retVal.add(amountSMP8);
          retVal.add(amountSMP9);
          retVal.add(amountSMP7.add(amountSMP8.add(amountSMP9)));
          retVal.add(amountSMPPasca);
          retVal.add(amountSMA10);
          retVal.add(amountSMA11);
          retVal.add(amountSMA12);
          retVal.add(amountSMA10.add(amountSMA11.add(amountSMA12)));
          retVal.add(amountSMAPasca);
          retVal.add(amountSMK10);
          retVal.add(amountSMK11);
          retVal.add(amountSMK12);
          retVal.add(amountSMK10.add(amountSMK11.add(amountSMK12)));
          retVal.add(amountSMKPasca);
          return retVal;
    }

    private ArrayList<BigDecimal> farmILL(Kalender startDate, Kalender endDate, Clerk clerk) throws SQLException, KasirException{
        ArrayList<BigDecimal> retVal = new ArrayList();
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        BigDecimal amountSMA10=BigDecimal.ZERO;
        BigDecimal amountSMA11=BigDecimal.ZERO;
        BigDecimal amountSMA12=BigDecimal.ZERO;
        BigDecimal amountSMK10=BigDecimal.ZERO;
        BigDecimal amountSMK11=BigDecimal.ZERO;
        BigDecimal amountSMK12=BigDecimal.ZERO;
        BigDecimal amountSMP7=BigDecimal.ZERO;
        BigDecimal amountSMP8=BigDecimal.ZERO;
        BigDecimal amountSMP9=BigDecimal.ZERO;
        BigDecimal amountSMAPasca=BigDecimal.ZERO;
        BigDecimal amountSMKPasca=BigDecimal.ZERO;
        BigDecimal amountSMPPasca=BigDecimal.ZERO;
       
        List<TransactionDetail> illTransactionDetails = new ArrayList<>();
        Statement stmt = null;
        //STEP 4: Execute a query
        stmt = connection.createStatement();
        String sql;
        if(clerk!=null)
            sql = "SELECT * FROM ILLTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH' AND IDClerk="+clerk.id;
        else
            sql = "SELECT * FROM ILLTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH'";
        ResultSet rs = stmt.executeQuery(sql);

        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           int id  = rs.getInt("ID");
           illTransactionDetails.add(Control.selectTDetail(TransactionDetail.Tipe.ILLTransaction, id));
        }
        Profil temp = new Profil();
        for(int i=0;i<illTransactionDetails.size();i++){
            temp = Control.selectProfil(illTransactionDetails.get(i).noIndukProfil);
            if(temp.tanggalLulus==null){
                switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMA10 = amountSMA10.add(BigDecimal.valueOf(illTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMA11 = amountSMA11.add(BigDecimal.valueOf(illTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMA12= amountSMA12.add(BigDecimal.valueOf(illTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMP":
                      switch(temp.currentLevel.level2.toString()){
                          case "7":
                              amountSMP7 = amountSMP7.add(BigDecimal.valueOf(illTransactionDetails.get(i).amount));
                              break;
                          case "8":
                              amountSMP8 = amountSMP8.add(BigDecimal.valueOf(illTransactionDetails.get(i).amount));
                              break;
                          case "9":
                              amountSMP9 = amountSMP9.add(BigDecimal.valueOf(illTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMK":
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMK10 = amountSMK10.add(BigDecimal.valueOf(illTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMK11 = amountSMK11.add(BigDecimal.valueOf(illTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMK12 = amountSMK12.add(BigDecimal.valueOf(illTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  default : 
                      break;
                 }
            }else{ // FOR PASCA
                 switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      amountSMAPasca = amountSMAPasca.add(BigDecimal.valueOf(illTransactionDetails.get(i).amount));
                      break;
                  case "SMP":
                      amountSMPPasca = amountSMPPasca.add(BigDecimal.valueOf(illTransactionDetails.get(i).amount));
                      break;
                  case "SMK":
                      amountSMKPasca = amountSMKPasca.add(BigDecimal.valueOf(illTransactionDetails.get(i).amount));
                      break;
                  default : ;
                      break;
                 }
            }
        }
          rs.close();
          stmt.close();
          connection.close();
          retVal.add(amountSMP7);
          retVal.add(amountSMP8);
          retVal.add(amountSMP9);
          retVal.add(amountSMP7.add(amountSMP8.add(amountSMP9)));
          retVal.add(amountSMPPasca);
          retVal.add(amountSMA10);
          retVal.add(amountSMA11);
          retVal.add(amountSMA12);
          retVal.add(amountSMA10.add(amountSMA11.add(amountSMA12)));
          retVal.add(amountSMAPasca);
          retVal.add(amountSMK10);
          retVal.add(amountSMK11);
          retVal.add(amountSMK12);
          retVal.add(amountSMK10.add(amountSMK11.add(amountSMK12)));
          retVal.add(amountSMKPasca);
          return retVal;
    }

    private ArrayList<BigDecimal> farmIPS(Kalender startDate, Kalender endDate, Clerk clerk) throws SQLException, KasirException{
        ArrayList<BigDecimal> retVal = new ArrayList();
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        BigDecimal amountSMA10=BigDecimal.ZERO;
        BigDecimal amountSMA11=BigDecimal.ZERO;
        BigDecimal amountSMA12=BigDecimal.ZERO;
        BigDecimal amountSMK10=BigDecimal.ZERO;
        BigDecimal amountSMK11=BigDecimal.ZERO;
        BigDecimal amountSMK12=BigDecimal.ZERO;
        BigDecimal amountSMP7=BigDecimal.ZERO;
        BigDecimal amountSMP8=BigDecimal.ZERO;
        BigDecimal amountSMP9=BigDecimal.ZERO;
        BigDecimal amountSMAPasca=BigDecimal.ZERO;
        BigDecimal amountSMKPasca=BigDecimal.ZERO;
        BigDecimal amountSMPPasca=BigDecimal.ZERO;
       
        List<TransactionDetail> ipsTransactionDetails = new ArrayList<>();
        Statement stmt = null;
        //STEP 4: Execute a query
        stmt = connection.createStatement();
        String sql;
        if(clerk!=null)
            sql = "SELECT * FROM IPSTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH' AND IDClerk="+clerk.id;
        else
            sql = "SELECT * FROM IPSTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH'";
        ResultSet rs = stmt.executeQuery(sql);

        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           int id  = rs.getInt("ID");
           ipsTransactionDetails.add(Control.selectTDetail(TransactionDetail.Tipe.IPSTransaction, id));
        }
        Profil temp = new Profil();
        for(int i=0;i<ipsTransactionDetails.size();i++){
            temp = Control.selectProfil(ipsTransactionDetails.get(i).noIndukProfil);
            if(temp.tanggalLulus==null){
                switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMA10 = amountSMA10.add(BigDecimal.valueOf(ipsTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMA11 = amountSMA11.add(BigDecimal.valueOf(ipsTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMA12= amountSMA12.add(BigDecimal.valueOf(ipsTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMP":
                      switch(temp.currentLevel.level2.toString()){
                          case "7":
                              amountSMP7 = amountSMP7.add(BigDecimal.valueOf(ipsTransactionDetails.get(i).amount));
                              break;
                          case "8":
                              amountSMP8 = amountSMP8.add(BigDecimal.valueOf(ipsTransactionDetails.get(i).amount));
                              break;
                          case "9":
                              amountSMP9 = amountSMP9.add(BigDecimal.valueOf(ipsTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMK":
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMK10 = amountSMK10.add(BigDecimal.valueOf(ipsTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMK11 = amountSMK11.add(BigDecimal.valueOf(ipsTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMK12 = amountSMK12.add(BigDecimal.valueOf(ipsTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  default : 
                      break;
                 }
            }else{ // FOR PASCA
                 switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      amountSMAPasca = amountSMAPasca.add(BigDecimal.valueOf(ipsTransactionDetails.get(i).amount));
                      break;
                  case "SMP":
                      amountSMPPasca = amountSMPPasca.add(BigDecimal.valueOf(ipsTransactionDetails.get(i).amount));
                      break;
                  case "SMK":
                      amountSMKPasca = amountSMKPasca.add(BigDecimal.valueOf(ipsTransactionDetails.get(i).amount));
                      break;
                  default : ;
                      break;
                 }
            }
        }
          rs.close();
          stmt.close();
          connection.close();
          retVal.add(amountSMP7);
          retVal.add(amountSMP8);
          retVal.add(amountSMP9);
          retVal.add(amountSMP7.add(amountSMP8.add(amountSMP9)));
          retVal.add(amountSMPPasca);
          retVal.add(amountSMA10);
          retVal.add(amountSMA11);
          retVal.add(amountSMA12);
          retVal.add(amountSMA10.add(amountSMA11.add(amountSMA12)));
          retVal.add(amountSMAPasca);
          retVal.add(amountSMK10);
          retVal.add(amountSMK11);
          retVal.add(amountSMK12);
          retVal.add(amountSMK10.add(amountSMK11.add(amountSMK12)));
          retVal.add(amountSMKPasca);
          return retVal;
    }

    private ArrayList<BigDecimal> farmIPSB(Kalender startDate, Kalender endDate, Clerk clerk) throws SQLException, KasirException{
        ArrayList<BigDecimal> retVal = new ArrayList();
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        BigDecimal amountSMA10=BigDecimal.ZERO;
        BigDecimal amountSMA11=BigDecimal.ZERO;
        BigDecimal amountSMA12=BigDecimal.ZERO;
        BigDecimal amountSMK10=BigDecimal.ZERO;
        BigDecimal amountSMK11=BigDecimal.ZERO;
        BigDecimal amountSMK12=BigDecimal.ZERO;
        BigDecimal amountSMP7=BigDecimal.ZERO;
        BigDecimal amountSMP8=BigDecimal.ZERO;
        BigDecimal amountSMP9=BigDecimal.ZERO;
        BigDecimal amountSMAPasca=BigDecimal.ZERO;
        BigDecimal amountSMKPasca=BigDecimal.ZERO;
        BigDecimal amountSMPPasca=BigDecimal.ZERO;
       
        List<TransactionDetail> ipsbTransactionDetails = new ArrayList<>();
        Statement stmt = null;
        //STEP 4: Execute a query
        stmt = connection.createStatement();
        String sql;
        if(clerk!=null)
            sql = "SELECT * FROM IPSBTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH' AND IDClerk="+clerk.id;
        else
            sql = "SELECT * FROM IPSBTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH'";
        ResultSet rs = stmt.executeQuery(sql);

        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           int id  = rs.getInt("ID");
           ipsbTransactionDetails.add(Control.selectTDetail(TransactionDetail.Tipe.IPSBTransaction, id));
        }
        Profil temp = new Profil();
        for(int i=0;i<ipsbTransactionDetails.size();i++){
            temp = Control.selectProfil(ipsbTransactionDetails.get(i).noIndukProfil);
            if(temp.tanggalLulus==null){
                switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMA10 = amountSMA10.add(BigDecimal.valueOf(ipsbTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMA11 = amountSMA11.add(BigDecimal.valueOf(ipsbTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMA12= amountSMA12.add(BigDecimal.valueOf(ipsbTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMP":
                      switch(temp.currentLevel.level2.toString()){
                          case "7":
                              amountSMP7 = amountSMP7.add(BigDecimal.valueOf(ipsbTransactionDetails.get(i).amount));
                              break;
                          case "8":
                              amountSMP8 = amountSMP8.add(BigDecimal.valueOf(ipsbTransactionDetails.get(i).amount));
                              break;
                          case "9":
                              amountSMP9 = amountSMP9.add(BigDecimal.valueOf(ipsbTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMK":
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMK10 = amountSMK10.add(BigDecimal.valueOf(ipsbTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMK11 = amountSMK11.add(BigDecimal.valueOf(ipsbTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMK12 = amountSMK12.add(BigDecimal.valueOf(ipsbTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  default : 
                      break;
                 }
            }else{ // FOR PASCA
                 switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      amountSMAPasca = amountSMAPasca.add(BigDecimal.valueOf(ipsbTransactionDetails.get(i).amount));
                      break;
                  case "SMP":
                      amountSMPPasca = amountSMPPasca.add(BigDecimal.valueOf(ipsbTransactionDetails.get(i).amount));
                      break;
                  case "SMK":
                      amountSMKPasca = amountSMKPasca.add(BigDecimal.valueOf(ipsbTransactionDetails.get(i).amount));
                      break;
                  default : ;
                      break;
                 }
            }
        }
          rs.close();
          stmt.close();
          connection.close();
          retVal.add(amountSMP7);
          retVal.add(amountSMP8);
          retVal.add(amountSMP9);
          retVal.add(amountSMP7.add(amountSMP8.add(amountSMP9)));
          retVal.add(amountSMPPasca);
          retVal.add(amountSMA10);
          retVal.add(amountSMA11);
          retVal.add(amountSMA12);
          retVal.add(amountSMA10.add(amountSMA11.add(amountSMA12)));
          retVal.add(amountSMAPasca);
          retVal.add(amountSMK10);
          retVal.add(amountSMK11);
          retVal.add(amountSMK12);
          retVal.add(amountSMK10.add(amountSMK11.add(amountSMK12)));
          retVal.add(amountSMKPasca);
          return retVal;
    }

    private ArrayList<BigDecimal> farmIPSP(Kalender startDate, Kalender endDate, Clerk clerk) throws SQLException, KasirException{
        ArrayList<BigDecimal> retVal = new ArrayList();
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        BigDecimal amountSMA10=BigDecimal.ZERO;
        BigDecimal amountSMA11=BigDecimal.ZERO;
        BigDecimal amountSMA12=BigDecimal.ZERO;
        BigDecimal amountSMK10=BigDecimal.ZERO;
        BigDecimal amountSMK11=BigDecimal.ZERO;
        BigDecimal amountSMK12=BigDecimal.ZERO;
        BigDecimal amountSMP7=BigDecimal.ZERO;
        BigDecimal amountSMP8=BigDecimal.ZERO;
        BigDecimal amountSMP9=BigDecimal.ZERO;
        BigDecimal amountSMAPasca=BigDecimal.ZERO;
        BigDecimal amountSMKPasca=BigDecimal.ZERO;
        BigDecimal amountSMPPasca=BigDecimal.ZERO;
       
        List<TransactionDetail> ipspTransactionDetails = new ArrayList<>();
        Statement stmt = null;
        //STEP 4: Execute a query
        stmt = connection.createStatement();
        String sql;
        if(clerk!=null)
            sql = "SELECT * FROM IPSPTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH' AND IDClerk="+clerk.id;
        else
            sql = "SELECT * FROM IPSPTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH'";
        ResultSet rs = stmt.executeQuery(sql);

        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           int id  = rs.getInt("ID");
           ipspTransactionDetails.add(Control.selectTDetail(TransactionDetail.Tipe.IPSPTransaction, id));
        }
        Profil temp = new Profil();
        for(int i=0;i<ipspTransactionDetails.size();i++){
            temp = Control.selectProfil(ipspTransactionDetails.get(i).noIndukProfil);
            if(temp.tanggalLulus==null){
                switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMA10 = amountSMA10.add(BigDecimal.valueOf(ipspTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMA11 = amountSMA11.add(BigDecimal.valueOf(ipspTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMA12= amountSMA12.add(BigDecimal.valueOf(ipspTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMP":
                      switch(temp.currentLevel.level2.toString()){
                          case "7":
                              amountSMP7 = amountSMP7.add(BigDecimal.valueOf(ipspTransactionDetails.get(i).amount));
                              break;
                          case "8":
                              amountSMP8 = amountSMP8.add(BigDecimal.valueOf(ipspTransactionDetails.get(i).amount));
                              break;
                          case "9":
                              amountSMP9 = amountSMP9.add(BigDecimal.valueOf(ipspTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMK":
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMK10 = amountSMK10.add(BigDecimal.valueOf(ipspTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMK11 = amountSMK11.add(BigDecimal.valueOf(ipspTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMK12 = amountSMK12.add(BigDecimal.valueOf(ipspTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  default : 
                      break;
                 }
            }else{ // FOR PASCA
                 switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      amountSMAPasca = amountSMAPasca.add(BigDecimal.valueOf(ipspTransactionDetails.get(i).amount));
                      break;
                  case "SMP":
                      amountSMPPasca = amountSMPPasca.add(BigDecimal.valueOf(ipspTransactionDetails.get(i).amount));
                      break;
                  case "SMK":
                      amountSMKPasca = amountSMKPasca.add(BigDecimal.valueOf(ipspTransactionDetails.get(i).amount));
                      break;
                  default : ;
                      break;
                 }
            }
        }
          rs.close();
          stmt.close();
          connection.close();
          retVal.add(amountSMP7);
          retVal.add(amountSMP8);
          retVal.add(amountSMP9);
          retVal.add(amountSMP7.add(amountSMP8.add(amountSMP9)));
          retVal.add(amountSMPPasca);
          retVal.add(amountSMA10);
          retVal.add(amountSMA11);
          retVal.add(amountSMA12);
          retVal.add(amountSMA10.add(amountSMA11.add(amountSMA12)));
          retVal.add(amountSMAPasca);
          retVal.add(amountSMK10);
          retVal.add(amountSMK11);
          retVal.add(amountSMK12);
          retVal.add(amountSMK10.add(amountSMK11.add(amountSMK12)));
          retVal.add(amountSMKPasca);
          return retVal;
    }
    
    private ArrayList<BigDecimal> farmIUA(Kalender startDate, Kalender endDate, Clerk clerk) throws SQLException, KasirException{
        ArrayList<BigDecimal> retVal = new ArrayList();
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        BigDecimal amountSMA10=BigDecimal.ZERO;
        BigDecimal amountSMA11=BigDecimal.ZERO;
        BigDecimal amountSMA12=BigDecimal.ZERO;
        BigDecimal amountSMK10=BigDecimal.ZERO;
        BigDecimal amountSMK11=BigDecimal.ZERO;
        BigDecimal amountSMK12=BigDecimal.ZERO;
        BigDecimal amountSMP7=BigDecimal.ZERO;
        BigDecimal amountSMP8=BigDecimal.ZERO;
        BigDecimal amountSMP9=BigDecimal.ZERO;
        BigDecimal amountSMAPasca=BigDecimal.ZERO;
        BigDecimal amountSMKPasca=BigDecimal.ZERO;
        BigDecimal amountSMPPasca=BigDecimal.ZERO;
       
        List<TransactionDetail> iuaTransactionDetails = new ArrayList<>();
        Statement stmt = null;
        //STEP 4: Execute a query
        stmt = connection.createStatement();
        String sql;
        if(clerk!=null)
            sql = "SELECT * FROM IUATransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH' AND IDClerk="+clerk.id;
        else
            sql = "SELECT * FROM IUATransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH'";
        ResultSet rs = stmt.executeQuery(sql);

        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           int id  = rs.getInt("ID");
           iuaTransactionDetails.add(Control.selectTDetail(TransactionDetail.Tipe.IUATransaction, id));
        }
        Profil temp = new Profil();
        for(int i=0;i<iuaTransactionDetails.size();i++){
            temp = Control.selectProfil(iuaTransactionDetails.get(i).noIndukProfil);
            if(temp.tanggalLulus==null){
                switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMA10 = amountSMA10.add(BigDecimal.valueOf(iuaTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMA11 = amountSMA11.add(BigDecimal.valueOf(iuaTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMA12= amountSMA12.add(BigDecimal.valueOf(iuaTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMP":
                      switch(temp.currentLevel.level2.toString()){
                          case "7":
                              amountSMP7 = amountSMP7.add(BigDecimal.valueOf(iuaTransactionDetails.get(i).amount));
                              break;
                          case "8":
                              amountSMP8 = amountSMP8.add(BigDecimal.valueOf(iuaTransactionDetails.get(i).amount));
                              break;
                          case "9":
                              amountSMP9 = amountSMP9.add(BigDecimal.valueOf(iuaTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMK":
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMK10 = amountSMK10.add(BigDecimal.valueOf(iuaTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMK11 = amountSMK11.add(BigDecimal.valueOf(iuaTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMK12 = amountSMK12.add(BigDecimal.valueOf(iuaTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  default : 
                      break;
                 }
            }else{ // FOR PASCA
                 switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      amountSMAPasca = amountSMAPasca.add(BigDecimal.valueOf(iuaTransactionDetails.get(i).amount));
                      break;
                  case "SMP":
                      amountSMPPasca = amountSMPPasca.add(BigDecimal.valueOf(iuaTransactionDetails.get(i).amount));
                      break;
                  case "SMK":
                      amountSMKPasca = amountSMKPasca.add(BigDecimal.valueOf(iuaTransactionDetails.get(i).amount));
                      break;
                  default : ;
                      break;
                 }
            }
        }
          rs.close();
          stmt.close();
          connection.close();
          retVal.add(amountSMP7);
          retVal.add(amountSMP8);
          retVal.add(amountSMP9);
          retVal.add(amountSMP7.add(amountSMP8.add(amountSMP9)));
          retVal.add(amountSMPPasca);
          retVal.add(amountSMA10);
          retVal.add(amountSMA11);
          retVal.add(amountSMA12);
          retVal.add(amountSMA10.add(amountSMA11.add(amountSMA12)));
          retVal.add(amountSMAPasca);
          retVal.add(amountSMK10);
          retVal.add(amountSMK11);
          retVal.add(amountSMK12);
          retVal.add(amountSMK10.add(amountSMK11.add(amountSMK12)));
          retVal.add(amountSMKPasca);
          return retVal;
    }

    private ArrayList<BigDecimal> farmIUAP(Kalender startDate, Kalender endDate, Clerk clerk) throws SQLException, KasirException{
        ArrayList<BigDecimal> retVal = new ArrayList();
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        BigDecimal amountSMA10=BigDecimal.ZERO;
        BigDecimal amountSMA11=BigDecimal.ZERO;
        BigDecimal amountSMA12=BigDecimal.ZERO;
        BigDecimal amountSMK10=BigDecimal.ZERO;
        BigDecimal amountSMK11=BigDecimal.ZERO;
        BigDecimal amountSMK12=BigDecimal.ZERO;
        BigDecimal amountSMP7=BigDecimal.ZERO;
        BigDecimal amountSMP8=BigDecimal.ZERO;
        BigDecimal amountSMP9=BigDecimal.ZERO;
        BigDecimal amountSMAPasca=BigDecimal.ZERO;
        BigDecimal amountSMKPasca=BigDecimal.ZERO;
        BigDecimal amountSMPPasca=BigDecimal.ZERO;
       
        List<TransactionDetail> iuapTransactionDetails = new ArrayList<>();
        Statement stmt = null;
        //STEP 4: Execute a query
        stmt = connection.createStatement();
        String sql;
        if(clerk!=null)
            sql = "SELECT * FROM IUAPTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH' AND IDClerk="+clerk.id;
        else
            sql = "SELECT * FROM IUAPTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH'";
        ResultSet rs = stmt.executeQuery(sql);

        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           int id  = rs.getInt("ID");
           iuapTransactionDetails.add(Control.selectTDetail(TransactionDetail.Tipe.IUAPTransaction, id));
        }
        Profil temp = new Profil();
        for(int i=0;i<iuapTransactionDetails.size();i++){
            temp = Control.selectProfil(iuapTransactionDetails.get(i).noIndukProfil);
            if(temp.tanggalLulus==null){
                switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMA10 = amountSMA10.add(BigDecimal.valueOf(iuapTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMA11 = amountSMA11.add(BigDecimal.valueOf(iuapTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMA12= amountSMA12.add(BigDecimal.valueOf(iuapTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMP":
                      switch(temp.currentLevel.level2.toString()){
                          case "7":
                              amountSMP7 = amountSMP7.add(BigDecimal.valueOf(iuapTransactionDetails.get(i).amount));
                              break;
                          case "8":
                              amountSMP8 = amountSMP8.add(BigDecimal.valueOf(iuapTransactionDetails.get(i).amount));
                              break;
                          case "9":
                              amountSMP9 = amountSMP9.add(BigDecimal.valueOf(iuapTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMK":
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMK10 = amountSMK10.add(BigDecimal.valueOf(iuapTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMK11 = amountSMK11.add(BigDecimal.valueOf(iuapTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMK12 = amountSMK12.add(BigDecimal.valueOf(iuapTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  default : 
                      break;
                 }
            }else{ // FOR PASCA
                 switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      amountSMAPasca = amountSMAPasca.add(BigDecimal.valueOf(iuapTransactionDetails.get(i).amount));
                      break;
                  case "SMP":
                      amountSMPPasca = amountSMPPasca.add(BigDecimal.valueOf(iuapTransactionDetails.get(i).amount));
                      break;
                  case "SMK":
                      amountSMKPasca = amountSMKPasca.add(BigDecimal.valueOf(iuapTransactionDetails.get(i).amount));
                      break;
                  default : ;
                      break;
                 }
            }
        }
          rs.close();
          stmt.close();
          connection.close();
          retVal.add(amountSMP7);
          retVal.add(amountSMP8);
          retVal.add(amountSMP9);
          retVal.add(amountSMP7.add(amountSMP8.add(amountSMP9)));
          retVal.add(amountSMPPasca);
          retVal.add(amountSMA10);
          retVal.add(amountSMA11);
          retVal.add(amountSMA12);
          retVal.add(amountSMA10.add(amountSMA11.add(amountSMA12)));
          retVal.add(amountSMAPasca);
          retVal.add(amountSMK10);
          retVal.add(amountSMK11);
          retVal.add(amountSMK12);
          retVal.add(amountSMK10.add(amountSMK11.add(amountSMK12)));
          retVal.add(amountSMKPasca);
          return retVal;
    }

    private ArrayList<BigDecimal> farmIUS(Kalender startDate, Kalender endDate, Clerk clerk) throws SQLException, KasirException{
        ArrayList<BigDecimal> retVal = new ArrayList();
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        BigDecimal amountSMA10=BigDecimal.ZERO;
        BigDecimal amountSMA11=BigDecimal.ZERO;
        BigDecimal amountSMA12=BigDecimal.ZERO;
        BigDecimal amountSMK10=BigDecimal.ZERO;
        BigDecimal amountSMK11=BigDecimal.ZERO;
        BigDecimal amountSMK12=BigDecimal.ZERO;
        BigDecimal amountSMP7=BigDecimal.ZERO;
        BigDecimal amountSMP8=BigDecimal.ZERO;
        BigDecimal amountSMP9=BigDecimal.ZERO;
        BigDecimal amountSMAPasca=BigDecimal.ZERO;
        BigDecimal amountSMKPasca=BigDecimal.ZERO;
        BigDecimal amountSMPPasca=BigDecimal.ZERO;
       
        List<TransactionDetail> iusTransactionDetails = new ArrayList<>();
        Statement stmt = null;
        //STEP 4: Execute a query
        stmt = connection.createStatement();
        String sql;
        if(clerk!=null)
            sql = "SELECT * FROM IUSTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH' AND IDClerk="+clerk.id;
        else
            sql = "SELECT * FROM IUSTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH'";
        ResultSet rs = stmt.executeQuery(sql);

        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           int id  = rs.getInt("ID");
           iusTransactionDetails.add(Control.selectTDetail(TransactionDetail.Tipe.IUSTransaction, id));
        }
        Profil temp = new Profil();
        for(int i=0;i<iusTransactionDetails.size();i++){
            temp = Control.selectProfil(iusTransactionDetails.get(i).noIndukProfil);
            if(temp.tanggalLulus==null){
                switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMA10 = amountSMA10.add(BigDecimal.valueOf(iusTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMA11 = amountSMA11.add(BigDecimal.valueOf(iusTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMA12= amountSMA12.add(BigDecimal.valueOf(iusTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMP":
                      switch(temp.currentLevel.level2.toString()){
                          case "7":
                              amountSMP7 = amountSMP7.add(BigDecimal.valueOf(iusTransactionDetails.get(i).amount));
                              break;
                          case "8":
                              amountSMP8 = amountSMP8.add(BigDecimal.valueOf(iusTransactionDetails.get(i).amount));
                              break;
                          case "9":
                              amountSMP9 = amountSMP9.add(BigDecimal.valueOf(iusTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMK":
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMK10 = amountSMK10.add(BigDecimal.valueOf(iusTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMK11 = amountSMK11.add(BigDecimal.valueOf(iusTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMK12 = amountSMK12.add(BigDecimal.valueOf(iusTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  default : 
                      break;
                 }
            }else{ // FOR PASCA
                 switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      amountSMAPasca = amountSMAPasca.add(BigDecimal.valueOf(iusTransactionDetails.get(i).amount));
                      break;
                  case "SMP":
                      amountSMPPasca = amountSMPPasca.add(BigDecimal.valueOf(iusTransactionDetails.get(i).amount));
                      break;
                  case "SMK":
                      amountSMKPasca = amountSMKPasca.add(BigDecimal.valueOf(iusTransactionDetails.get(i).amount));
                      break;
                  default : ;
                      break;
                 }
            }
        }
          rs.close();
          stmt.close();
          connection.close();
          retVal.add(amountSMP7);
          retVal.add(amountSMP8);
          retVal.add(amountSMP9);
          retVal.add(amountSMP7.add(amountSMP8.add(amountSMP9)));
          retVal.add(amountSMPPasca);
          retVal.add(amountSMA10);
          retVal.add(amountSMA11);
          retVal.add(amountSMA12);
          retVal.add(amountSMA10.add(amountSMA11.add(amountSMA12)));
          retVal.add(amountSMAPasca);
          retVal.add(amountSMK10);
          retVal.add(amountSMK11);
          retVal.add(amountSMK12);
          retVal.add(amountSMK10.add(amountSMK11.add(amountSMK12)));
          retVal.add(amountSMKPasca);
          return retVal;
    }
    
    private ArrayList<BigDecimal> farmOSIS(Kalender startDate, Kalender endDate, Clerk clerk) throws SQLException, KasirException{
        ArrayList<BigDecimal> retVal = new ArrayList();
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        BigDecimal amountSMA10=BigDecimal.ZERO;
        BigDecimal amountSMA11=BigDecimal.ZERO;
        BigDecimal amountSMA12=BigDecimal.ZERO;
        BigDecimal amountSMK10=BigDecimal.ZERO;
        BigDecimal amountSMK11=BigDecimal.ZERO;
        BigDecimal amountSMK12=BigDecimal.ZERO;
        BigDecimal amountSMP7=BigDecimal.ZERO;
        BigDecimal amountSMP8=BigDecimal.ZERO;
        BigDecimal amountSMP9=BigDecimal.ZERO;
        BigDecimal amountSMAPasca=BigDecimal.ZERO;
        BigDecimal amountSMKPasca=BigDecimal.ZERO;
        BigDecimal amountSMPPasca=BigDecimal.ZERO;
       
        List<TransactionDetail> osisTransactionDetails = new ArrayList<>();
        Statement stmt = null;
        //STEP 4: Execute a query
        stmt = connection.createStatement();
        String sql;
        if(clerk!=null)
            sql = "SELECT * FROM OSISTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH' AND IDClerk="+clerk.id;
        else
        sql = "SELECT * FROM OSISTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH'";
        ResultSet rs = stmt.executeQuery(sql);

        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           int id  = rs.getInt("ID");
           osisTransactionDetails.add(Control.selectTDetail(TransactionDetail.Tipe.OSISTransaction, id));
        }
        Profil temp = new Profil();
        for(int i=0;i<osisTransactionDetails.size();i++){
            temp = Control.selectProfil(osisTransactionDetails.get(i).noIndukProfil);
            if(temp.tanggalLulus==null){
                switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMA10 = amountSMA10.add(BigDecimal.valueOf(osisTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMA11 = amountSMA11.add(BigDecimal.valueOf(osisTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMA12= amountSMA12.add(BigDecimal.valueOf(osisTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMP":
                      switch(temp.currentLevel.level2.toString()){
                          case "7":
                              amountSMP7 = amountSMP7.add(BigDecimal.valueOf(osisTransactionDetails.get(i).amount));
                              break;
                          case "8":
                              amountSMP8 = amountSMP8.add(BigDecimal.valueOf(osisTransactionDetails.get(i).amount));
                              break;
                          case "9":
                              amountSMP9 = amountSMP9.add(BigDecimal.valueOf(osisTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMK":
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMK10 = amountSMK10.add(BigDecimal.valueOf(osisTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMK11 = amountSMK11.add(BigDecimal.valueOf(osisTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMK12 = amountSMK12.add(BigDecimal.valueOf(osisTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  default : 
                      break;
                 }
            }else{ // FOR PASCA
                 switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      amountSMAPasca = amountSMAPasca.add(BigDecimal.valueOf(osisTransactionDetails.get(i).amount));
                      break;
                  case "SMP":
                      amountSMPPasca = amountSMPPasca.add(BigDecimal.valueOf(osisTransactionDetails.get(i).amount));
                      break;
                  case "SMK":
                      amountSMKPasca = amountSMKPasca.add(BigDecimal.valueOf(osisTransactionDetails.get(i).amount));
                      break;
                  default : ;
                      break;
                 }
            }
        }
          rs.close();
          stmt.close();
          connection.close();
          retVal.add(amountSMP7);
          retVal.add(amountSMP8);
          retVal.add(amountSMP9);
          retVal.add(amountSMP7.add(amountSMP8.add(amountSMP9)));
          retVal.add(amountSMPPasca);
          retVal.add(amountSMA10);
          retVal.add(amountSMA11);
          retVal.add(amountSMA12);
          retVal.add(amountSMA10.add(amountSMA11.add(amountSMA12)));
          retVal.add(amountSMAPasca);
          retVal.add(amountSMK10);
          retVal.add(amountSMK11);
          retVal.add(amountSMK12);
          retVal.add(amountSMK10.add(amountSMK11.add(amountSMK12)));
          retVal.add(amountSMKPasca);
          return retVal;
    }
    
    private ArrayList<BigDecimal> farmPASB(Kalender startDate, Kalender endDate, Clerk clerk) throws SQLException, KasirException{
        ArrayList<BigDecimal> retVal = new ArrayList();
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        BigDecimal amountSMA10=BigDecimal.ZERO;
        BigDecimal amountSMA11=BigDecimal.ZERO;
        BigDecimal amountSMA12=BigDecimal.ZERO;
        BigDecimal amountSMK10=BigDecimal.ZERO;
        BigDecimal amountSMK11=BigDecimal.ZERO;
        BigDecimal amountSMK12=BigDecimal.ZERO;
        BigDecimal amountSMP7=BigDecimal.ZERO;
        BigDecimal amountSMP8=BigDecimal.ZERO;
        BigDecimal amountSMP9=BigDecimal.ZERO;
        BigDecimal amountSMAPasca=BigDecimal.ZERO;
        BigDecimal amountSMKPasca=BigDecimal.ZERO;
        BigDecimal amountSMPPasca=BigDecimal.ZERO;
       
        List<TransactionDetail> pasbTransactionDetails = new ArrayList<>();
        Statement stmt = null;
        //STEP 4: Execute a query
        stmt = connection.createStatement();
        String sql;
        if(clerk!=null)
            sql = "SELECT * FROM PASBTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH' AND IDClerk="+clerk.id;
        else
        sql = "SELECT * FROM PASBTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH'";
        ResultSet rs = stmt.executeQuery(sql);

        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           int id  = rs.getInt("ID");
           pasbTransactionDetails.add(Control.selectTDetail(TransactionDetail.Tipe.PASBTransaction, id));
        }
        Profil temp = new Profil();
        for(int i=0;i<pasbTransactionDetails.size();i++){
            temp = Control.selectProfil(pasbTransactionDetails.get(i).noIndukProfil);
            if(temp.tanggalLulus==null){
                switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMA10 = amountSMA10.add(BigDecimal.valueOf(pasbTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMA11 = amountSMA11.add(BigDecimal.valueOf(pasbTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMA12= amountSMA12.add(BigDecimal.valueOf(pasbTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMP":
                      switch(temp.currentLevel.level2.toString()){
                          case "7":
                              amountSMP7 = amountSMP7.add(BigDecimal.valueOf(pasbTransactionDetails.get(i).amount));
                              break;
                          case "8":
                              amountSMP8 = amountSMP8.add(BigDecimal.valueOf(pasbTransactionDetails.get(i).amount));
                              break;
                          case "9":
                              amountSMP9 = amountSMP9.add(BigDecimal.valueOf(pasbTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMK":
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMK10 = amountSMK10.add(BigDecimal.valueOf(pasbTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMK11 = amountSMK11.add(BigDecimal.valueOf(pasbTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMK12 = amountSMK12.add(BigDecimal.valueOf(pasbTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  default : 
                      break;
                 }
            }else{ // FOR PASCA
                 switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      amountSMAPasca = amountSMAPasca.add(BigDecimal.valueOf(pasbTransactionDetails.get(i).amount));
                      break;
                  case "SMP":
                      amountSMPPasca = amountSMPPasca.add(BigDecimal.valueOf(pasbTransactionDetails.get(i).amount));
                      break;
                  case "SMK":
                      amountSMKPasca = amountSMKPasca.add(BigDecimal.valueOf(pasbTransactionDetails.get(i).amount));
                      break;
                  default : ;
                      break;
                 }
            }
        }
          rs.close();
          stmt.close();
          connection.close();
          retVal.add(amountSMP7);
          retVal.add(amountSMP8);
          retVal.add(amountSMP9);
          retVal.add(amountSMP7.add(amountSMP8.add(amountSMP9)));
          retVal.add(amountSMPPasca);
          retVal.add(amountSMA10);
          retVal.add(amountSMA11);
          retVal.add(amountSMA12);
          retVal.add(amountSMA10.add(amountSMA11.add(amountSMA12)));
          retVal.add(amountSMAPasca);
          retVal.add(amountSMK10);
          retVal.add(amountSMK11);
          retVal.add(amountSMK12);
          retVal.add(amountSMK10.add(amountSMK11.add(amountSMK12)));
          retVal.add(amountSMKPasca);
          return retVal;
    }

    private ArrayList<BigDecimal> farmPVT(Kalender startDate, Kalender endDate, Clerk clerk) throws SQLException, KasirException{
        ArrayList<BigDecimal> retVal = new ArrayList();
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        BigDecimal amountSMA10=BigDecimal.ZERO;
        BigDecimal amountSMA11=BigDecimal.ZERO;
        BigDecimal amountSMA12=BigDecimal.ZERO;
        BigDecimal amountSMK10=BigDecimal.ZERO;
        BigDecimal amountSMK11=BigDecimal.ZERO;
        BigDecimal amountSMK12=BigDecimal.ZERO;
        BigDecimal amountSMP7=BigDecimal.ZERO;
        BigDecimal amountSMP8=BigDecimal.ZERO;
        BigDecimal amountSMP9=BigDecimal.ZERO;
        BigDecimal amountSMAPasca=BigDecimal.ZERO;
        BigDecimal amountSMKPasca=BigDecimal.ZERO;
        BigDecimal amountSMPPasca=BigDecimal.ZERO;
       
        List<TransactionDetail> pvtTransactionDetails = new ArrayList<>();
        Statement stmt = null;
        //STEP 4: Execute a query
        stmt = connection.createStatement();
        String sql;
        if(clerk!=null)
            sql = "SELECT * FROM PVTTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH' AND IDClerk="+clerk.id;
        else
        sql = "SELECT * FROM PVTTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH'";
        ResultSet rs = stmt.executeQuery(sql);

        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           int id  = rs.getInt("ID");
           pvtTransactionDetails.add(Control.selectTDetail(TransactionDetail.Tipe.PVTTransaction, id));
        }
        Profil temp = new Profil();
        for(int i=0;i<pvtTransactionDetails.size();i++){
            temp = Control.selectProfil(pvtTransactionDetails.get(i).noIndukProfil);
            if(temp.tanggalLulus==null){
                switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMA10 = amountSMA10.add(BigDecimal.valueOf(pvtTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMA11 = amountSMA11.add(BigDecimal.valueOf(pvtTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMA12= amountSMA12.add(BigDecimal.valueOf(pvtTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMP":
                      switch(temp.currentLevel.level2.toString()){
                          case "7":
                              amountSMP7 = amountSMP7.add(BigDecimal.valueOf(pvtTransactionDetails.get(i).amount));
                              break;
                          case "8":
                              amountSMP8 = amountSMP8.add(BigDecimal.valueOf(pvtTransactionDetails.get(i).amount));
                              break;
                          case "9":
                              amountSMP9 = amountSMP9.add(BigDecimal.valueOf(pvtTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMK":
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMK10 = amountSMK10.add(BigDecimal.valueOf(pvtTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMK11 = amountSMK11.add(BigDecimal.valueOf(pvtTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMK12 = amountSMK12.add(BigDecimal.valueOf(pvtTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  default : 
                      break;
                 }
            }else{ // FOR PASCA
                 switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      amountSMAPasca = amountSMAPasca.add(BigDecimal.valueOf(pvtTransactionDetails.get(i).amount));
                      break;
                  case "SMP":
                      amountSMPPasca = amountSMPPasca.add(BigDecimal.valueOf(pvtTransactionDetails.get(i).amount));
                      break;
                  case "SMK":
                      amountSMKPasca = amountSMKPasca.add(BigDecimal.valueOf(pvtTransactionDetails.get(i).amount));
                      break;
                  default : ;
                      break;
                 }
            }
        }
          rs.close();
          stmt.close();
          connection.close();
          retVal.add(amountSMP7);
          retVal.add(amountSMP8);
          retVal.add(amountSMP9);
          retVal.add(amountSMP7.add(amountSMP8.add(amountSMP9)));
          retVal.add(amountSMPPasca);
          retVal.add(amountSMA10);
          retVal.add(amountSMA11);
          retVal.add(amountSMA12);
          retVal.add(amountSMA10.add(amountSMA11.add(amountSMA12)));
          retVal.add(amountSMAPasca);
          retVal.add(amountSMK10);
          retVal.add(amountSMK11);
          retVal.add(amountSMK12);
          retVal.add(amountSMK10.add(amountSMK11.add(amountSMK12)));
          retVal.add(amountSMKPasca);
          return retVal;
    }

    private ArrayList<BigDecimal> farmSeragam(Kalender startDate, Kalender endDate, Clerk clerk) throws SQLException, KasirException{
        ArrayList<BigDecimal> retVal = new ArrayList();
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        BigDecimal amountSMA10=BigDecimal.ZERO;
        BigDecimal amountSMA11=BigDecimal.ZERO;
        BigDecimal amountSMA12=BigDecimal.ZERO;
        BigDecimal amountSMK10=BigDecimal.ZERO;
        BigDecimal amountSMK11=BigDecimal.ZERO;
        BigDecimal amountSMK12=BigDecimal.ZERO;
        BigDecimal amountSMP7=BigDecimal.ZERO;
        BigDecimal amountSMP8=BigDecimal.ZERO;
        BigDecimal amountSMP9=BigDecimal.ZERO;
        BigDecimal amountSMAPasca=BigDecimal.ZERO;
        BigDecimal amountSMKPasca=BigDecimal.ZERO;
        BigDecimal amountSMPPasca=BigDecimal.ZERO;
        List<TransactionDetail> seragamTransactionDetails = new ArrayList<>();
        
        Statement stmt = null;
        //STEP 4: Execute a query
        stmt = connection.createStatement();
        String sql;
        if(clerk!=null)
            sql = "SELECT * FROM SeragamTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH' AND IDClerk="+clerk.id;
        else
        sql = "SELECT * FROM SeragamTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH'";
        ResultSet rs = stmt.executeQuery(sql);
        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           int id  = rs.getInt("ID");
           seragamTransactionDetails.add(Control.selectTDetail(TransactionDetail.Tipe.SeragamTransaction, id));
        }
        Profil temp = new Profil();
        for(int i=0;i<seragamTransactionDetails.size();i++){
            temp = Control.selectProfil(seragamTransactionDetails.get(i).noIndukProfil);
            if(temp.tanggalLulus==null){
                switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMA10 = amountSMA10.add(BigDecimal.valueOf(seragamTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMA11 = amountSMA11.add(BigDecimal.valueOf(seragamTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMA12= amountSMA12.add(BigDecimal.valueOf(seragamTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMP":
                      switch(temp.currentLevel.level2.toString()){
                          case "7":
                              amountSMP7 = amountSMP7.add(BigDecimal.valueOf(seragamTransactionDetails.get(i).amount));
                              break;
                          case "8":
                              amountSMP8 = amountSMP8.add(BigDecimal.valueOf(seragamTransactionDetails.get(i).amount));
                              break;
                          case "9":
                              amountSMP9 = amountSMP9.add(BigDecimal.valueOf(seragamTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMK":
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMK10 = amountSMK10.add(BigDecimal.valueOf(seragamTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMK11 = amountSMK11.add(BigDecimal.valueOf(seragamTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMK12 = amountSMK12.add(BigDecimal.valueOf(seragamTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  default : 
                      break;
                 }
            }else{ // FOR PASCA
                 switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      amountSMAPasca = amountSMAPasca.add(BigDecimal.valueOf(seragamTransactionDetails.get(i).amount));
                      break;
                  case "SMP":
                      amountSMPPasca = amountSMPPasca.add(BigDecimal.valueOf(seragamTransactionDetails.get(i).amount));
                      break;
                  case "SMK":
                      amountSMKPasca = amountSMKPasca.add(BigDecimal.valueOf(seragamTransactionDetails.get(i).amount));
                      break;
                  default : ;
                      break;
                 }
            }
        }
          rs.close();
          stmt.close();
          connection.close();
          retVal.add(amountSMP7);
          retVal.add(amountSMP8);
          retVal.add(amountSMP9);
          retVal.add(amountSMP7.add(amountSMP8.add(amountSMP9)));
          retVal.add(amountSMPPasca);
          retVal.add(amountSMA10);
          retVal.add(amountSMA11);
          retVal.add(amountSMA12);
          retVal.add(amountSMA10.add(amountSMA11.add(amountSMA12)));
          retVal.add(amountSMAPasca);
          retVal.add(amountSMK10);
          retVal.add(amountSMK11);
          retVal.add(amountSMK12);
          retVal.add(amountSMK10.add(amountSMK11.add(amountSMK12)));
          retVal.add(amountSMKPasca);
          return retVal;
      }

    private ArrayList<BigDecimal> farmSumbangan(Kalender startDate, Kalender endDate, Clerk clerk) throws SQLException, KasirException{
        ArrayList<BigDecimal> retVal = new ArrayList();
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        BigDecimal amountSMA10=BigDecimal.ZERO;
        BigDecimal amountSMA11=BigDecimal.ZERO;
        BigDecimal amountSMA12=BigDecimal.ZERO;
        BigDecimal amountSMK10=BigDecimal.ZERO;
        BigDecimal amountSMK11=BigDecimal.ZERO;
        BigDecimal amountSMK12=BigDecimal.ZERO;
        BigDecimal amountSMP7=BigDecimal.ZERO;
        BigDecimal amountSMP8=BigDecimal.ZERO;
        BigDecimal amountSMP9=BigDecimal.ZERO;
        BigDecimal amountSMAPasca=BigDecimal.ZERO;
        BigDecimal amountSMKPasca=BigDecimal.ZERO;
        BigDecimal amountSMPPasca=BigDecimal.ZERO;
        List<TransactionDetail> sumbanganTransactionDetails = new ArrayList<>();
        
        Statement stmt = null;
        //STEP 4: Execute a query
        stmt = connection.createStatement();
        String sql;
        if(clerk!=null)
            sql = "SELECT * FROM SumbanganTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH' AND IDClerk="+clerk.id;
        else
        sql = "SELECT * FROM SumbanganTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH'";
        ResultSet rs = stmt.executeQuery(sql);
        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           int id  = rs.getInt("ID");
           sumbanganTransactionDetails.add(Control.selectTDetail(TransactionDetail.Tipe.SumbanganTransaction, id));
        }
        Profil temp = new Profil();
        for(int i=0;i<sumbanganTransactionDetails.size();i++){
            temp = Control.selectProfil(sumbanganTransactionDetails.get(i).noIndukProfil);
            if(temp.tanggalLulus==null){
                switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMA10 = amountSMA10.add(BigDecimal.valueOf(sumbanganTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMA11 = amountSMA11.add(BigDecimal.valueOf(sumbanganTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMA12= amountSMA12.add(BigDecimal.valueOf(sumbanganTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMP":
                      switch(temp.currentLevel.level2.toString()){
                          case "7":
                              amountSMP7 = amountSMP7.add(BigDecimal.valueOf(sumbanganTransactionDetails.get(i).amount));
                              break;
                          case "8":
                              amountSMP8 = amountSMP8.add(BigDecimal.valueOf(sumbanganTransactionDetails.get(i).amount));
                              break;
                          case "9":
                              amountSMP9 = amountSMP9.add(BigDecimal.valueOf(sumbanganTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMK":
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMK10 = amountSMK10.add(BigDecimal.valueOf(sumbanganTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMK11 = amountSMK11.add(BigDecimal.valueOf(sumbanganTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMK12 = amountSMK12.add(BigDecimal.valueOf(sumbanganTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  default : 
                      break;
                 }
            }else{ // FOR PASCA
                 switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      amountSMAPasca = amountSMAPasca.add(BigDecimal.valueOf(sumbanganTransactionDetails.get(i).amount));
                      break;
                  case "SMP":
                      amountSMPPasca = amountSMPPasca.add(BigDecimal.valueOf(sumbanganTransactionDetails.get(i).amount));
                      break;
                  case "SMK":
                      amountSMKPasca = amountSMKPasca.add(BigDecimal.valueOf(sumbanganTransactionDetails.get(i).amount));
                      break;
                  default : ;
                      break;
                 }
            }
        }
          rs.close();
          stmt.close();
          connection.close();
          retVal.add(amountSMP7);
          retVal.add(amountSMP8);
          retVal.add(amountSMP9);
          retVal.add(amountSMP7.add(amountSMP8.add(amountSMP9)));
          retVal.add(amountSMPPasca);
          retVal.add(amountSMA10);
          retVal.add(amountSMA11);
          retVal.add(amountSMA12);
          retVal.add(amountSMA10.add(amountSMA11.add(amountSMA12)));
          retVal.add(amountSMAPasca);
          retVal.add(amountSMK10);
          retVal.add(amountSMK11);
          retVal.add(amountSMK12);
          retVal.add(amountSMK10.add(amountSMK11.add(amountSMK12)));
          retVal.add(amountSMKPasca);
          return retVal;
      }

    private ArrayList<BigDecimal> farmTabungan(Kalender startDate, Kalender endDate, Clerk clerk) throws SQLException, KasirException{
        ArrayList<BigDecimal> retVal = new ArrayList();
        printout.PenerimaanKasir pb = new PenerimaanKasir();
        Connection connection = pb.establishConnection(); 
        BigDecimal amountSMA10=BigDecimal.ZERO;
        BigDecimal amountSMA11=BigDecimal.ZERO;
        BigDecimal amountSMA12=BigDecimal.ZERO;
        BigDecimal amountSMK10=BigDecimal.ZERO;
        BigDecimal amountSMK11=BigDecimal.ZERO;
        BigDecimal amountSMK12=BigDecimal.ZERO;
        BigDecimal amountSMP7=BigDecimal.ZERO;
        BigDecimal amountSMP8=BigDecimal.ZERO;
        BigDecimal amountSMP9=BigDecimal.ZERO;
        BigDecimal amountSMAPasca=BigDecimal.ZERO;
        BigDecimal amountSMKPasca=BigDecimal.ZERO;
        BigDecimal amountSMPPasca=BigDecimal.ZERO;
        List<TransactionDetail> tabunganTransactionDetails = new ArrayList<>();
        
        Statement stmt = null;
        //STEP 4: Execute a query
        stmt = connection.createStatement();
        String sql;
        if(clerk!=null)
            sql = "SELECT * FROM TabunganTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH' AND IDClerk="+clerk.id;
        else
        sql = "SELECT * FROM TabunganTransaction WHERE CreateDate >'"+startDate.toString()+"' AND CreateDate <'"+endDate.toString()+"' AND PaymentMethod = 'CASH'";
        ResultSet rs = stmt.executeQuery(sql);
        //STEP 5: Extract data from result set
        while(rs.next()){
           //Retrieve by column name
           int id  = rs.getInt("ID");
           tabunganTransactionDetails.add(Control.selectTDetail(TransactionDetail.Tipe.TabunganTransaction, id));
        }
        Profil temp = new Profil();
        for(int i=0;i<tabunganTransactionDetails.size();i++){
            temp = Control.selectProfil(tabunganTransactionDetails.get(i).noIndukProfil);
            if(temp.tanggalLulus==null){
                switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMA10 = amountSMA10.add(BigDecimal.valueOf(tabunganTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMA11 = amountSMA11.add(BigDecimal.valueOf(tabunganTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMA12= amountSMA12.add(BigDecimal.valueOf(tabunganTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMP":
                      switch(temp.currentLevel.level2.toString()){
                          case "7":
                              amountSMP7 = amountSMP7.add(BigDecimal.valueOf(tabunganTransactionDetails.get(i).amount));
                              break;
                          case "8":
                              amountSMP8 = amountSMP8.add(BigDecimal.valueOf(tabunganTransactionDetails.get(i).amount));
                              break;
                          case "9":
                              amountSMP9 = amountSMP9.add(BigDecimal.valueOf(tabunganTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  case "SMK":
                      switch(temp.currentLevel.level2.toString()){
                          case "10":
                              amountSMK10 = amountSMK10.add(BigDecimal.valueOf(tabunganTransactionDetails.get(i).amount));
                              break;
                          case "11":
                              amountSMK11 = amountSMK11.add(BigDecimal.valueOf(tabunganTransactionDetails.get(i).amount));
                              break;
                          case "12":
                              amountSMK12 = amountSMK12.add(BigDecimal.valueOf(tabunganTransactionDetails.get(i).amount));
                              break;
                          default:
                              break;
                      }
                      break;
                  default : 
                      break;
                 }
            }else{ // FOR PASCA
                 switch(temp.currentLevel.level1.toString()){
                  case "SMA" : 
                      amountSMAPasca = amountSMAPasca.add(BigDecimal.valueOf(tabunganTransactionDetails.get(i).amount));
                      break;
                  case "SMP":
                      amountSMPPasca = amountSMPPasca.add(BigDecimal.valueOf(tabunganTransactionDetails.get(i).amount));
                      break;
                  case "SMK":
                      amountSMKPasca = amountSMKPasca.add(BigDecimal.valueOf(tabunganTransactionDetails.get(i).amount));
                      break;
                  default : ;
                      break;
                 }
            }
        }
          rs.close();
          stmt.close();
          connection.close();
          retVal.add(amountSMP7);
          retVal.add(amountSMP8);
          retVal.add(amountSMP9);
          retVal.add(amountSMP7.add(amountSMP8.add(amountSMP9)));
          retVal.add(amountSMPPasca);
          retVal.add(amountSMA10);
          retVal.add(amountSMA11);
          retVal.add(amountSMA12);
          retVal.add(amountSMA10.add(amountSMA11.add(amountSMA12)));
          retVal.add(amountSMAPasca);
          retVal.add(amountSMK10);
          retVal.add(amountSMK11);
          retVal.add(amountSMK12);
          retVal.add(amountSMK10.add(amountSMK11.add(amountSMK12)));
          retVal.add(amountSMKPasca);
          return retVal;
      }
    
    private void updateCsv() throws SQLException{
        String csvFile = "lib/ini/profil.csv";
        String line = "";
        String cvsSplitBy = ",";

        try (BufferedReader br = new BufferedReader(new FileReader(csvFile))) {

            while ((line = br.readLine()) != null) {

                // use comma as separator
                String[] p = line.split(cvsSplitBy);
                System.out.println("No Induk "+ p[0] + " , Kelas " + p[1]);
                try{
                Profil temp = Control.selectProfil(p[0]);
                temp.currentLevel = Level.create(p[1]);
                Control.updateProfil(temp);
                }catch(KasirException e){
                    e.printStackTrace();
                }

            }

        } catch (IOException e) {
            e.printStackTrace();
        }
        
    }
    
    private void updatePpdb() throws SQLException{
        String csvFile = "lib/ini/ppdb.csv"; // NoindukLama, NoIndukBaru, KelasBaru
        String line ="";
        String csvSplitBy = ",";
        try (BufferedReader br = new BufferedReader(new FileReader(csvFile))) {

            while ((line = br.readLine()) != null) {
                ArrayList<TransactionSummary> tSums = new ArrayList<TransactionSummary>();
                // use comma as separator
                String[] p = line.split(csvSplitBy);
                System.out.println("No Daftar "+ p[0]  + " , No Induk " + p[1] + " , Kelas " + p[2]);
                try{
                Profil temp = Control.selectProfil(p[0]);
                temp.currentLevel = Level.create(p[2]);
                Control.updateProfil(temp);
                temp.noInduk = p[1];
                Control.updateProfilNoInduk(p[0], temp);
                
                IPP ipp = Control.selectIuran(Iuran.Tipe.IPP, IPP.noIndukColName, false, p[0]);
                ipp.noInduk = p[1];
                ipp.chargedLevel = temp.currentLevel;
                Control.updateIuran(Iuran.Tipe.IPP, ipp);
                List<IPPTransactionDetail> ippTransactions = Control.selectTDetails(TransactionDetail.Tipe.IPPTransaction,IPPTransactionDetail.idIuranColName, String.valueOf(ipp.id));
                for(int i = 0 ; i< ippTransactions.size(); i++){
                    ippTransactions.get(i).noIndukProfil = temp.noInduk;
                    Control.updateTDetail(IPPTransaction, ippTransactions.get(i));
                    tSums.add(Control.selectTSummary(ippTransactions.get(i).transactSummaryID));
                }
                
                
                IPSP ipsp = Control.selectIuran(Iuran.Tipe.IPSP, IPSP.noIndukColName, false, p[0]);
                ipsp.noInduk = p[1];
                ipsp.chargedLevel = temp.currentLevel;
                Control.updateIuran(Iuran.Tipe.IPSP, ipsp);
                List<IPSPTransactionDetail> ipspTransactions = Control.selectTDetails(TransactionDetail.Tipe.IPSPTransaction,IPSPTransactionDetail.idIuranColName, String.valueOf(ipsp.id));
                for(int i = 0 ; i< ipspTransactions.size(); i++){
                    ipspTransactions.get(i).noIndukProfil = temp.noInduk;
                    Control.updateTDetail(IPSPTransaction, ipspTransactions.get(i));
                    tSums.add(Control.selectTSummary(ipspTransactions.get(i).transactSummaryID));
                }
                
                IKS iks = Control.selectIuran(Iuran.Tipe.IKS, IKS.noIndukColName, false, p[0]);
                iks.noInduk = p[1];
                iks.chargedLevel = temp.currentLevel;
                Control.updateIuran(Iuran.Tipe.IKS, iks);
                List<IKSTransactionDetail> iksTransactions = Control.selectTDetails(TransactionDetail.Tipe.IKSTransaction,IKSTransactionDetail.idIuranColName, String.valueOf(iks.id));
                for(int i = 0 ; i< iksTransactions.size(); i++){
                    iksTransactions.get(i).noIndukProfil = temp.noInduk;
                    Control.updateTDetail(IKSTransaction, iksTransactions.get(i));
                    tSums.add(Control.selectTSummary(iksTransactions.get(i).transactSummaryID));
                }
                
                PASB pasb = Control.selectIuran(Iuran.Tipe.PASB, PASB.noIndukColName, false, p[0]);
                pasb.noInduk = p[1];
                pasb.chargedLevel = temp.currentLevel;
                Control.updateIuran(Iuran.Tipe.PASB, pasb);
                List<PASBTransactionDetail> pasbTransactions = Control.selectTDetails(TransactionDetail.Tipe.PASBTransaction,PASBTransactionDetail.idIuranColName, String.valueOf(pasb.id));
                for(int i = 0 ; i< pasbTransactions.size(); i++){
                    pasbTransactions.get(i).noIndukProfil = temp.noInduk;
                    Control.updateTDetail(PASBTransaction, pasbTransactions.get(i));
                    tSums.add(Control.selectTSummary(pasbTransactions.get(i).transactSummaryID));
                }
                
                IPSB ipsb = Control.selectIuran(Iuran.Tipe.IPSB, IPSB.noIndukColName, false, p[0]);
                ipsb.noInduk = p[1];
                ipsb.chargedLevel = temp.currentLevel;
                Control.updateIuran(Iuran.Tipe.IPSB, ipsb);
                List<IPSBTransactionDetail> ipsbTransactions = Control.selectTDetails(TransactionDetail.Tipe.IPSBTransaction,IPSBTransactionDetail.idIuranColName, String.valueOf(ipsb.id));
                for(int i = 0 ; i< ipsbTransactions.size(); i++){
                    ipsbTransactions.get(i).noIndukProfil = temp.noInduk;
                    Control.updateTDetail(IPSBTransaction, ipsbTransactions.get(i));
                    tSums.add(Control.selectTSummary(ipsbTransactions.get(i).transactSummaryID));
                }
                
                Seragam seragam = Control.selectIuran(Iuran.Tipe.Seragam, Seragam.noIndukColName, false, p[0]);
                seragam.noInduk = p[1];
                seragam.chargedLevel = temp.currentLevel;
                Control.updateIuran(Iuran.Tipe.Seragam, seragam);
                List<SeragamTransactionDetail> seragamTransactions = Control.selectTDetails(TransactionDetail.Tipe.SeragamTransaction,SeragamTransactionDetail.idIuranColName, String.valueOf(seragam.id));
                for(int i = 0 ; i< seragamTransactions.size(); i++){
                    seragamTransactions.get(i).noIndukProfil = temp.noInduk;
                    Control.updateTDetail(SeragamTransaction, seragamTransactions.get(i));
                    tSums.add(Control.selectTSummary(seragamTransactions.get(i).transactSummaryID));
                }
                
                OSIS osis = Control.selectIuran(Iuran.Tipe.OSIS, OSIS.noIndukColName, false, p[0]);
                osis.noInduk = p[1];
                osis.chargedLevel = temp.currentLevel;
                Control.updateIuran(Iuran.Tipe.OSIS, osis);
                 List<OSISTransactionDetail> osisTransactions = Control.selectTDetails(TransactionDetail.Tipe.OSISTransaction,OSISTransactionDetail.idIuranColName, String.valueOf(osis.id));
                for(int i = 0 ; i< osisTransactions.size(); i++){
                    osisTransactions.get(i).noIndukProfil = temp.noInduk;
                    Control.updateTDetail(OSISTransaction, osisTransactions.get(i));
                    tSums.add(Control.selectTSummary(osisTransactions.get(i).transactSummaryID));
                }
                
                Attribute attribute = Control.selectIuran(Iuran.Tipe.Attribute, Attribute.noIndukColName, false, p[0]);
                attribute.noInduk = p[1];
                attribute.chargedLevel = temp.currentLevel;
                Control.updateIuran(Iuran.Tipe.Attribute, attribute);
                List<AttributeTransactionDetail> attributeTransactions = Control.selectTDetails(TransactionDetail.Tipe.AttributeTransaction,AttributeTransactionDetail.idIuranColName, String.valueOf(attribute.id));
                for(int i = 0 ; i< attributeTransactions.size(); i++){
                    attributeTransactions.get(i).noIndukProfil = temp.noInduk;
                    Control.updateTDetail(AttributeTransaction, attributeTransactions.get(i));
                    tSums.add(Control.selectTSummary(attributeTransactions.get(i).transactSummaryID));
                }
                
                
                if(temp.currentLevel.level1.equals(Level.Level1.SMK)){
                    Almamater almamater = Control.selectIuran(Iuran.Tipe.Almamater, Almamater.noIndukColName, false, p[0]);
                    almamater.noInduk = p[1];
                    almamater.chargedLevel = temp.currentLevel;
                    Control.updateIuran(Iuran.Tipe.Almamater, almamater);
                    List<AlmamaterTransactionDetail> almamaterTransactions = Control.selectTDetails(TransactionDetail.Tipe.AlmamaterTransaction,AlmamaterTransactionDetail.idIuranColName, String.valueOf(almamater.id));
                    for(int i = 0 ; i< almamaterTransactions.size(); i++){
                        almamaterTransactions.get(i).noIndukProfil = temp.noInduk;
                        Control.updateTDetail(AlmamaterTransaction, almamaterTransactions.get(i));
                        tSums.add(Control.selectTSummary(almamaterTransactions.get(i).transactSummaryID));
                    }
                    PVT pvt = Control.selectIuran(Iuran.Tipe.PVT, PVT.noIndukColName, false, p[0]);
                    pvt.noInduk = p[1];
                    pvt.chargedLevel = temp.currentLevel;
                    Control.updateIuran(Iuran.Tipe.PVT, pvt);
                    List<PVTTransactionDetail> pvtTransactions = Control.selectTDetails(TransactionDetail.Tipe.PVTTransaction,PVTTransactionDetail.idIuranColName, String.valueOf(pvt.id));
                        for(int i = 0 ; i< pvtTransactions.size(); i++){
                            pvtTransactions.get(i).noIndukProfil = temp.noInduk;
                            Control.updateTDetail(PVTTransaction, pvtTransactions.get(i));
                            tSums.add(Control.selectTSummary(pvtTransactions.get(i).transactSummaryID));
                        }  
                }
                for(int i = 0; i< tSums.size(); i++){
                    tSums.get(i).noInduk = temp.noInduk;
                    Control.updateTSummary(tSums.get(i));
                }
                }catch(KasirException e){
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Export Gagal!!! " +"\r\n"+String.valueOf(e), "Export Gagal!!!", JOptionPane.WARNING_MESSAGE);
                }

            }
            
            

        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Export Gagal!!! " +"\r\n"+String.valueOf(e), "Export Gagal!!!", JOptionPane.WARNING_MESSAGE);
        }
        JOptionPane.showMessageDialog(this, "Export Berhasil!!!", "Export Berhasil!!!", JOptionPane.WARNING_MESSAGE);
    }
}

class Tunggakan{
    String tipeIuran;
    Float debt;
    String note;
    int tahun;
    public Tunggakan(String ti, Float d, String n, int t){
        tipeIuran = ti;
        debt = d;
        note = n;
        tahun = t;
    }
}
